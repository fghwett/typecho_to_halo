/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package user_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UploadFromUrlRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UploadFromUrlRequest{}

// UploadFromUrlRequest struct for UploadFromUrlRequest
type UploadFromUrlRequest struct {
	Filename *string `json:"filename,omitempty"`
	Url string `json:"url"`
}

type _UploadFromUrlRequest UploadFromUrlRequest

// NewUploadFromUrlRequest instantiates a new UploadFromUrlRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadFromUrlRequest(url string) *UploadFromUrlRequest {
	this := UploadFromUrlRequest{}
	this.Url = url
	return &this
}

// NewUploadFromUrlRequestWithDefaults instantiates a new UploadFromUrlRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadFromUrlRequestWithDefaults() *UploadFromUrlRequest {
	this := UploadFromUrlRequest{}
	return &this
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *UploadFromUrlRequest) GetFilename() string {
	if o == nil || IsNil(o.Filename) {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadFromUrlRequest) GetFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.Filename) {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *UploadFromUrlRequest) HasFilename() bool {
	if o != nil && !IsNil(o.Filename) {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *UploadFromUrlRequest) SetFilename(v string) {
	o.Filename = &v
}

// GetUrl returns the Url field value
func (o *UploadFromUrlRequest) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *UploadFromUrlRequest) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *UploadFromUrlRequest) SetUrl(v string) {
	o.Url = v
}

func (o UploadFromUrlRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UploadFromUrlRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Filename) {
		toSerialize["filename"] = o.Filename
	}
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

func (o *UploadFromUrlRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUploadFromUrlRequest := _UploadFromUrlRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUploadFromUrlRequest)

	if err != nil {
		return err
	}

	*o = UploadFromUrlRequest(varUploadFromUrlRequest)

	return err
}

type NullableUploadFromUrlRequest struct {
	value *UploadFromUrlRequest
	isSet bool
}

func (v NullableUploadFromUrlRequest) Get() *UploadFromUrlRequest {
	return v.value
}

func (v *NullableUploadFromUrlRequest) Set(val *UploadFromUrlRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadFromUrlRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadFromUrlRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadFromUrlRequest(val *UploadFromUrlRequest) *NullableUploadFromUrlRequest {
	return &NullableUploadFromUrlRequest{value: val, isSet: true}
}

func (v NullableUploadFromUrlRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadFromUrlRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


