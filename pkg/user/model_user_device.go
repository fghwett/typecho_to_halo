/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package user_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserDevice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserDevice{}

// UserDevice struct for UserDevice
type UserDevice struct {
	Active bool `json:"active"`
	CurrentDevice bool `json:"currentDevice"`
	Device Device `json:"device"`
}

type _UserDevice UserDevice

// NewUserDevice instantiates a new UserDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserDevice(active bool, currentDevice bool, device Device) *UserDevice {
	this := UserDevice{}
	this.Active = active
	this.CurrentDevice = currentDevice
	this.Device = device
	return &this
}

// NewUserDeviceWithDefaults instantiates a new UserDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserDeviceWithDefaults() *UserDevice {
	this := UserDevice{}
	return &this
}

// GetActive returns the Active field value
func (o *UserDevice) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *UserDevice) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *UserDevice) SetActive(v bool) {
	o.Active = v
}

// GetCurrentDevice returns the CurrentDevice field value
func (o *UserDevice) GetCurrentDevice() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CurrentDevice
}

// GetCurrentDeviceOk returns a tuple with the CurrentDevice field value
// and a boolean to check if the value has been set.
func (o *UserDevice) GetCurrentDeviceOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentDevice, true
}

// SetCurrentDevice sets field value
func (o *UserDevice) SetCurrentDevice(v bool) {
	o.CurrentDevice = v
}

// GetDevice returns the Device field value
func (o *UserDevice) GetDevice() Device {
	if o == nil {
		var ret Device
		return ret
	}

	return o.Device
}

// GetDeviceOk returns a tuple with the Device field value
// and a boolean to check if the value has been set.
func (o *UserDevice) GetDeviceOk() (*Device, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Device, true
}

// SetDevice sets field value
func (o *UserDevice) SetDevice(v Device) {
	o.Device = v
}

func (o UserDevice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserDevice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["active"] = o.Active
	toSerialize["currentDevice"] = o.CurrentDevice
	toSerialize["device"] = o.Device
	return toSerialize, nil
}

func (o *UserDevice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"active",
		"currentDevice",
		"device",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserDevice := _UserDevice{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserDevice)

	if err != nil {
		return err
	}

	*o = UserDevice(varUserDevice)

	return err
}

type NullableUserDevice struct {
	value *UserDevice
	isSet bool
}

func (v NullableUserDevice) Get() *UserDevice {
	return v.value
}

func (v *NullableUserDevice) Set(val *UserDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableUserDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableUserDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserDevice(val *UserDevice) *NullableUserDevice {
	return &NullableUserDevice{value: val, isSet: true}
}

func (v NullableUserDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


