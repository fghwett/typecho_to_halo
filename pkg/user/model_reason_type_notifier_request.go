/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package user_sdk

import (
	"encoding/json"
)

// checks if the ReasonTypeNotifierRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReasonTypeNotifierRequest{}

// ReasonTypeNotifierRequest struct for ReasonTypeNotifierRequest
type ReasonTypeNotifierRequest struct {
	Notifiers []string `json:"notifiers,omitempty"`
	ReasonType *string `json:"reasonType,omitempty"`
}

// NewReasonTypeNotifierRequest instantiates a new ReasonTypeNotifierRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReasonTypeNotifierRequest() *ReasonTypeNotifierRequest {
	this := ReasonTypeNotifierRequest{}
	return &this
}

// NewReasonTypeNotifierRequestWithDefaults instantiates a new ReasonTypeNotifierRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReasonTypeNotifierRequestWithDefaults() *ReasonTypeNotifierRequest {
	this := ReasonTypeNotifierRequest{}
	return &this
}

// GetNotifiers returns the Notifiers field value if set, zero value otherwise.
func (o *ReasonTypeNotifierRequest) GetNotifiers() []string {
	if o == nil || IsNil(o.Notifiers) {
		var ret []string
		return ret
	}
	return o.Notifiers
}

// GetNotifiersOk returns a tuple with the Notifiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReasonTypeNotifierRequest) GetNotifiersOk() ([]string, bool) {
	if o == nil || IsNil(o.Notifiers) {
		return nil, false
	}
	return o.Notifiers, true
}

// HasNotifiers returns a boolean if a field has been set.
func (o *ReasonTypeNotifierRequest) HasNotifiers() bool {
	if o != nil && !IsNil(o.Notifiers) {
		return true
	}

	return false
}

// SetNotifiers gets a reference to the given []string and assigns it to the Notifiers field.
func (o *ReasonTypeNotifierRequest) SetNotifiers(v []string) {
	o.Notifiers = v
}

// GetReasonType returns the ReasonType field value if set, zero value otherwise.
func (o *ReasonTypeNotifierRequest) GetReasonType() string {
	if o == nil || IsNil(o.ReasonType) {
		var ret string
		return ret
	}
	return *o.ReasonType
}

// GetReasonTypeOk returns a tuple with the ReasonType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReasonTypeNotifierRequest) GetReasonTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ReasonType) {
		return nil, false
	}
	return o.ReasonType, true
}

// HasReasonType returns a boolean if a field has been set.
func (o *ReasonTypeNotifierRequest) HasReasonType() bool {
	if o != nil && !IsNil(o.ReasonType) {
		return true
	}

	return false
}

// SetReasonType gets a reference to the given string and assigns it to the ReasonType field.
func (o *ReasonTypeNotifierRequest) SetReasonType(v string) {
	o.ReasonType = &v
}

func (o ReasonTypeNotifierRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReasonTypeNotifierRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Notifiers) {
		toSerialize["notifiers"] = o.Notifiers
	}
	if !IsNil(o.ReasonType) {
		toSerialize["reasonType"] = o.ReasonType
	}
	return toSerialize, nil
}

type NullableReasonTypeNotifierRequest struct {
	value *ReasonTypeNotifierRequest
	isSet bool
}

func (v NullableReasonTypeNotifierRequest) Get() *ReasonTypeNotifierRequest {
	return v.value
}

func (v *NullableReasonTypeNotifierRequest) Set(val *ReasonTypeNotifierRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReasonTypeNotifierRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReasonTypeNotifierRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReasonTypeNotifierRequest(val *ReasonTypeNotifierRequest) *NullableReasonTypeNotifierRequest {
	return &NullableReasonTypeNotifierRequest{value: val, isSet: true}
}

func (v NullableReasonTypeNotifierRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReasonTypeNotifierRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


