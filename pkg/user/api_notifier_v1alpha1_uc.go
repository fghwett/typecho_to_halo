/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package user_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type NotifierV1alpha1UcAPI interface {

	/*
	FetchReceiverConfig Method for FetchReceiverConfig

	Fetch receiver config of notifier

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Notifier name
	@return ApiFetchReceiverConfigRequest
	*/
	FetchReceiverConfig(ctx context.Context, name string) ApiFetchReceiverConfigRequest

	// FetchReceiverConfigExecute executes the request
	//  @return map[string]interface{}
	FetchReceiverConfigExecute(r ApiFetchReceiverConfigRequest) (map[string]interface{}, *http.Response, error)

	/*
	SaveReceiverConfig Method for SaveReceiverConfig

	Save receiver config of notifier

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Notifier name
	@return ApiSaveReceiverConfigRequest
	*/
	SaveReceiverConfig(ctx context.Context, name string) ApiSaveReceiverConfigRequest

	// SaveReceiverConfigExecute executes the request
	SaveReceiverConfigExecute(r ApiSaveReceiverConfigRequest) (*http.Response, error)
}

// NotifierV1alpha1UcAPIService NotifierV1alpha1UcAPI service
type NotifierV1alpha1UcAPIService service

type ApiFetchReceiverConfigRequest struct {
	ctx context.Context
	ApiService NotifierV1alpha1UcAPI
	name string
}

func (r ApiFetchReceiverConfigRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.FetchReceiverConfigExecute(r)
}

/*
FetchReceiverConfig Method for FetchReceiverConfig

Fetch receiver config of notifier

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Notifier name
 @return ApiFetchReceiverConfigRequest
*/
func (a *NotifierV1alpha1UcAPIService) FetchReceiverConfig(ctx context.Context, name string) ApiFetchReceiverConfigRequest {
	return ApiFetchReceiverConfigRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *NotifierV1alpha1UcAPIService) FetchReceiverConfigExecute(r ApiFetchReceiverConfigRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotifierV1alpha1UcAPIService.FetchReceiverConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.notification.halo.run/v1alpha1/notifiers/{name}/receiver-config"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSaveReceiverConfigRequest struct {
	ctx context.Context
	ApiService NotifierV1alpha1UcAPI
	name string
	body *map[string]interface{}
}

func (r ApiSaveReceiverConfigRequest) Body(body map[string]interface{}) ApiSaveReceiverConfigRequest {
	r.body = &body
	return r
}

func (r ApiSaveReceiverConfigRequest) Execute() (*http.Response, error) {
	return r.ApiService.SaveReceiverConfigExecute(r)
}

/*
SaveReceiverConfig Method for SaveReceiverConfig

Save receiver config of notifier

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Notifier name
 @return ApiSaveReceiverConfigRequest
*/
func (a *NotifierV1alpha1UcAPIService) SaveReceiverConfig(ctx context.Context, name string) ApiSaveReceiverConfigRequest {
	return ApiSaveReceiverConfigRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
func (a *NotifierV1alpha1UcAPIService) SaveReceiverConfigExecute(r ApiSaveReceiverConfigRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotifierV1alpha1UcAPIService.SaveReceiverConfig")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.notification.halo.run/v1alpha1/notifiers/{name}/receiver-config"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
