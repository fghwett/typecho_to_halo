/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package user_sdk

import (
	"encoding/json"
)

// checks if the ReasonTypeNotifierMatrix type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReasonTypeNotifierMatrix{}

// ReasonTypeNotifierMatrix struct for ReasonTypeNotifierMatrix
type ReasonTypeNotifierMatrix struct {
	Notifiers []NotifierInfo `json:"notifiers,omitempty"`
	ReasonTypes []ReasonTypeInfo `json:"reasonTypes,omitempty"`
	StateMatrix [][]bool `json:"stateMatrix,omitempty"`
}

// NewReasonTypeNotifierMatrix instantiates a new ReasonTypeNotifierMatrix object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReasonTypeNotifierMatrix() *ReasonTypeNotifierMatrix {
	this := ReasonTypeNotifierMatrix{}
	return &this
}

// NewReasonTypeNotifierMatrixWithDefaults instantiates a new ReasonTypeNotifierMatrix object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReasonTypeNotifierMatrixWithDefaults() *ReasonTypeNotifierMatrix {
	this := ReasonTypeNotifierMatrix{}
	return &this
}

// GetNotifiers returns the Notifiers field value if set, zero value otherwise.
func (o *ReasonTypeNotifierMatrix) GetNotifiers() []NotifierInfo {
	if o == nil || IsNil(o.Notifiers) {
		var ret []NotifierInfo
		return ret
	}
	return o.Notifiers
}

// GetNotifiersOk returns a tuple with the Notifiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReasonTypeNotifierMatrix) GetNotifiersOk() ([]NotifierInfo, bool) {
	if o == nil || IsNil(o.Notifiers) {
		return nil, false
	}
	return o.Notifiers, true
}

// HasNotifiers returns a boolean if a field has been set.
func (o *ReasonTypeNotifierMatrix) HasNotifiers() bool {
	if o != nil && !IsNil(o.Notifiers) {
		return true
	}

	return false
}

// SetNotifiers gets a reference to the given []NotifierInfo and assigns it to the Notifiers field.
func (o *ReasonTypeNotifierMatrix) SetNotifiers(v []NotifierInfo) {
	o.Notifiers = v
}

// GetReasonTypes returns the ReasonTypes field value if set, zero value otherwise.
func (o *ReasonTypeNotifierMatrix) GetReasonTypes() []ReasonTypeInfo {
	if o == nil || IsNil(o.ReasonTypes) {
		var ret []ReasonTypeInfo
		return ret
	}
	return o.ReasonTypes
}

// GetReasonTypesOk returns a tuple with the ReasonTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReasonTypeNotifierMatrix) GetReasonTypesOk() ([]ReasonTypeInfo, bool) {
	if o == nil || IsNil(o.ReasonTypes) {
		return nil, false
	}
	return o.ReasonTypes, true
}

// HasReasonTypes returns a boolean if a field has been set.
func (o *ReasonTypeNotifierMatrix) HasReasonTypes() bool {
	if o != nil && !IsNil(o.ReasonTypes) {
		return true
	}

	return false
}

// SetReasonTypes gets a reference to the given []ReasonTypeInfo and assigns it to the ReasonTypes field.
func (o *ReasonTypeNotifierMatrix) SetReasonTypes(v []ReasonTypeInfo) {
	o.ReasonTypes = v
}

// GetStateMatrix returns the StateMatrix field value if set, zero value otherwise.
func (o *ReasonTypeNotifierMatrix) GetStateMatrix() [][]bool {
	if o == nil || IsNil(o.StateMatrix) {
		var ret [][]bool
		return ret
	}
	return o.StateMatrix
}

// GetStateMatrixOk returns a tuple with the StateMatrix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReasonTypeNotifierMatrix) GetStateMatrixOk() ([][]bool, bool) {
	if o == nil || IsNil(o.StateMatrix) {
		return nil, false
	}
	return o.StateMatrix, true
}

// HasStateMatrix returns a boolean if a field has been set.
func (o *ReasonTypeNotifierMatrix) HasStateMatrix() bool {
	if o != nil && !IsNil(o.StateMatrix) {
		return true
	}

	return false
}

// SetStateMatrix gets a reference to the given [][]bool and assigns it to the StateMatrix field.
func (o *ReasonTypeNotifierMatrix) SetStateMatrix(v [][]bool) {
	o.StateMatrix = v
}

func (o ReasonTypeNotifierMatrix) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReasonTypeNotifierMatrix) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Notifiers) {
		toSerialize["notifiers"] = o.Notifiers
	}
	if !IsNil(o.ReasonTypes) {
		toSerialize["reasonTypes"] = o.ReasonTypes
	}
	if !IsNil(o.StateMatrix) {
		toSerialize["stateMatrix"] = o.StateMatrix
	}
	return toSerialize, nil
}

type NullableReasonTypeNotifierMatrix struct {
	value *ReasonTypeNotifierMatrix
	isSet bool
}

func (v NullableReasonTypeNotifierMatrix) Get() *ReasonTypeNotifierMatrix {
	return v.value
}

func (v *NullableReasonTypeNotifierMatrix) Set(val *ReasonTypeNotifierMatrix) {
	v.value = val
	v.isSet = true
}

func (v NullableReasonTypeNotifierMatrix) IsSet() bool {
	return v.isSet
}

func (v *NullableReasonTypeNotifierMatrix) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReasonTypeNotifierMatrix(val *ReasonTypeNotifierMatrix) *NullableReasonTypeNotifierMatrix {
	return &NullableReasonTypeNotifierMatrix{value: val, isSet: true}
}

func (v NullableReasonTypeNotifierMatrix) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReasonTypeNotifierMatrix) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


