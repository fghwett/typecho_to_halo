/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package user_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
	"reflect"
)


type AttachmentV1alpha1UcAPI interface {

	/*
	CreateAttachmentForPost Method for CreateAttachmentForPost

	Create attachment for the given post.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateAttachmentForPostRequest
	*/
	CreateAttachmentForPost(ctx context.Context) ApiCreateAttachmentForPostRequest

	// CreateAttachmentForPostExecute executes the request
	//  @return Attachment
	CreateAttachmentForPostExecute(r ApiCreateAttachmentForPostRequest) (*Attachment, *http.Response, error)

	/*
	ExternalTransferAttachment1 Method for ExternalTransferAttachment1

	Upload attachment from the given URL.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExternalTransferAttachment1Request
	*/
	ExternalTransferAttachment1(ctx context.Context) ApiExternalTransferAttachment1Request

	// ExternalTransferAttachment1Execute executes the request
	//  @return Attachment
	ExternalTransferAttachment1Execute(r ApiExternalTransferAttachment1Request) (*Attachment, *http.Response, error)

	/*
	ListMyAttachments Method for ListMyAttachments

	List attachments of the current user uploaded.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListMyAttachmentsRequest
	*/
	ListMyAttachments(ctx context.Context) ApiListMyAttachmentsRequest

	// ListMyAttachmentsExecute executes the request
	//  @return AttachmentList
	ListMyAttachmentsExecute(r ApiListMyAttachmentsRequest) (*AttachmentList, *http.Response, error)

	/*
	UploadUcAttachment Method for UploadUcAttachment

	Upload attachment to user center storage.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiUploadUcAttachmentRequest
	*/
	UploadUcAttachment(ctx context.Context) ApiUploadUcAttachmentRequest

	// UploadUcAttachmentExecute executes the request
	//  @return Attachment
	UploadUcAttachmentExecute(r ApiUploadUcAttachmentRequest) (*Attachment, *http.Response, error)
}

// AttachmentV1alpha1UcAPIService AttachmentV1alpha1UcAPI service
type AttachmentV1alpha1UcAPIService service

type ApiCreateAttachmentForPostRequest struct {
	ctx context.Context
	ApiService AttachmentV1alpha1UcAPI
	file *os.File
	waitForPermalink *bool
	postName *string
	singlePageName *string
}

func (r ApiCreateAttachmentForPostRequest) File(file *os.File) ApiCreateAttachmentForPostRequest {
	r.file = file
	return r
}

// Wait for permalink.
func (r ApiCreateAttachmentForPostRequest) WaitForPermalink(waitForPermalink bool) ApiCreateAttachmentForPostRequest {
	r.waitForPermalink = &waitForPermalink
	return r
}

// Post name.
func (r ApiCreateAttachmentForPostRequest) PostName(postName string) ApiCreateAttachmentForPostRequest {
	r.postName = &postName
	return r
}

// Single page name.
func (r ApiCreateAttachmentForPostRequest) SinglePageName(singlePageName string) ApiCreateAttachmentForPostRequest {
	r.singlePageName = &singlePageName
	return r
}

func (r ApiCreateAttachmentForPostRequest) Execute() (*Attachment, *http.Response, error) {
	return r.ApiService.CreateAttachmentForPostExecute(r)
}

/*
CreateAttachmentForPost Method for CreateAttachmentForPost

Create attachment for the given post.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateAttachmentForPostRequest
*/
func (a *AttachmentV1alpha1UcAPIService) CreateAttachmentForPost(ctx context.Context) ApiCreateAttachmentForPostRequest {
	return ApiCreateAttachmentForPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Attachment
func (a *AttachmentV1alpha1UcAPIService) CreateAttachmentForPostExecute(r ApiCreateAttachmentForPostRequest) (*Attachment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Attachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AttachmentV1alpha1UcAPIService.CreateAttachmentForPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/uc.api.storage.halo.run/v1alpha1/attachments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.file == nil {
		return localVarReturnValue, nil, reportError("file is required and must be specified")
	}

	if r.waitForPermalink != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "waitForPermalink", r.waitForPermalink, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var fileLocalVarFormFileName string
	var fileLocalVarFileName     string
	var fileLocalVarFileBytes    []byte

	fileLocalVarFormFileName = "file"
	fileLocalVarFile := r.file

	if fileLocalVarFile != nil {
		fbs, _ := io.ReadAll(fileLocalVarFile)

		fileLocalVarFileBytes = fbs
		fileLocalVarFileName = fileLocalVarFile.Name()
		fileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: fileLocalVarFileBytes, fileName: fileLocalVarFileName, formFileName: fileLocalVarFormFileName})
	}
	if r.postName != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "postName", r.postName, "", "")
	}
	if r.singlePageName != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "singlePageName", r.singlePageName, "", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Attachment
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExternalTransferAttachment1Request struct {
	ctx context.Context
	ApiService AttachmentV1alpha1UcAPI
	uploadFromUrlRequest *UploadFromUrlRequest
	waitForPermalink *bool
}

func (r ApiExternalTransferAttachment1Request) UploadFromUrlRequest(uploadFromUrlRequest UploadFromUrlRequest) ApiExternalTransferAttachment1Request {
	r.uploadFromUrlRequest = &uploadFromUrlRequest
	return r
}

// Wait for permalink.
func (r ApiExternalTransferAttachment1Request) WaitForPermalink(waitForPermalink bool) ApiExternalTransferAttachment1Request {
	r.waitForPermalink = &waitForPermalink
	return r
}

func (r ApiExternalTransferAttachment1Request) Execute() (*Attachment, *http.Response, error) {
	return r.ApiService.ExternalTransferAttachment1Execute(r)
}

/*
ExternalTransferAttachment1 Method for ExternalTransferAttachment1

Upload attachment from the given URL.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExternalTransferAttachment1Request
*/
func (a *AttachmentV1alpha1UcAPIService) ExternalTransferAttachment1(ctx context.Context) ApiExternalTransferAttachment1Request {
	return ApiExternalTransferAttachment1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Attachment
func (a *AttachmentV1alpha1UcAPIService) ExternalTransferAttachment1Execute(r ApiExternalTransferAttachment1Request) (*Attachment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Attachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AttachmentV1alpha1UcAPIService.ExternalTransferAttachment1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/uc.api.storage.halo.run/v1alpha1/attachments/-/upload-from-url"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.uploadFromUrlRequest == nil {
		return localVarReturnValue, nil, reportError("uploadFromUrlRequest is required and must be specified")
	}

	if r.waitForPermalink != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "waitForPermalink", r.waitForPermalink, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.uploadFromUrlRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Attachment
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListMyAttachmentsRequest struct {
	ctx context.Context
	ApiService AttachmentV1alpha1UcAPI
	page *int32
	size *int32
	labelSelector *[]string
	fieldSelector *[]string
	sort *[]string
	ungrouped *bool
	keyword *string
	accepts *[]string
}

// Page number. Default is 0.
func (r ApiListMyAttachmentsRequest) Page(page int32) ApiListMyAttachmentsRequest {
	r.page = &page
	return r
}

// Size number. Default is 0.
func (r ApiListMyAttachmentsRequest) Size(size int32) ApiListMyAttachmentsRequest {
	r.size = &size
	return r
}

// Label selector. e.g.: hidden!&#x3D;true
func (r ApiListMyAttachmentsRequest) LabelSelector(labelSelector []string) ApiListMyAttachmentsRequest {
	r.labelSelector = &labelSelector
	return r
}

// Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
func (r ApiListMyAttachmentsRequest) FieldSelector(fieldSelector []string) ApiListMyAttachmentsRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListMyAttachmentsRequest) Sort(sort []string) ApiListMyAttachmentsRequest {
	r.sort = &sort
	return r
}

// Filter attachments without group. This parameter will ignore group parameter.
func (r ApiListMyAttachmentsRequest) Ungrouped(ungrouped bool) ApiListMyAttachmentsRequest {
	r.ungrouped = &ungrouped
	return r
}

// Keyword for searching.
func (r ApiListMyAttachmentsRequest) Keyword(keyword string) ApiListMyAttachmentsRequest {
	r.keyword = &keyword
	return r
}

// Acceptable media types.
func (r ApiListMyAttachmentsRequest) Accepts(accepts []string) ApiListMyAttachmentsRequest {
	r.accepts = &accepts
	return r
}

func (r ApiListMyAttachmentsRequest) Execute() (*AttachmentList, *http.Response, error) {
	return r.ApiService.ListMyAttachmentsExecute(r)
}

/*
ListMyAttachments Method for ListMyAttachments

List attachments of the current user uploaded.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListMyAttachmentsRequest
*/
func (a *AttachmentV1alpha1UcAPIService) ListMyAttachments(ctx context.Context) ApiListMyAttachmentsRequest {
	return ApiListMyAttachmentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AttachmentList
func (a *AttachmentV1alpha1UcAPIService) ListMyAttachmentsExecute(r ApiListMyAttachmentsRequest) (*AttachmentList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AttachmentList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AttachmentV1alpha1UcAPIService.ListMyAttachments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/uc.api.storage.halo.run/v1alpha1/attachments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.labelSelector != nil {
		t := *r.labelSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", t, "form", "multi")
		}
	}
	if r.fieldSelector != nil {
		t := *r.fieldSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", t, "form", "multi")
		}
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	if r.ungrouped != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ungrouped", r.ungrouped, "form", "")
	}
	if r.keyword != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "keyword", r.keyword, "form", "")
	}
	if r.accepts != nil {
		t := *r.accepts
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "accepts", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "accepts", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AttachmentList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUploadUcAttachmentRequest struct {
	ctx context.Context
	ApiService AttachmentV1alpha1UcAPI
	file *os.File
	formData *UcUploadRequestFormData
}

func (r ApiUploadUcAttachmentRequest) File(file *os.File) ApiUploadUcAttachmentRequest {
	r.file = file
	return r
}

func (r ApiUploadUcAttachmentRequest) FormData(formData UcUploadRequestFormData) ApiUploadUcAttachmentRequest {
	r.formData = &formData
	return r
}

func (r ApiUploadUcAttachmentRequest) Execute() (*Attachment, *http.Response, error) {
	return r.ApiService.UploadUcAttachmentExecute(r)
}

/*
UploadUcAttachment Method for UploadUcAttachment

Upload attachment to user center storage.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUploadUcAttachmentRequest
*/
func (a *AttachmentV1alpha1UcAPIService) UploadUcAttachment(ctx context.Context) ApiUploadUcAttachmentRequest {
	return ApiUploadUcAttachmentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Attachment
func (a *AttachmentV1alpha1UcAPIService) UploadUcAttachmentExecute(r ApiUploadUcAttachmentRequest) (*Attachment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Attachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AttachmentV1alpha1UcAPIService.UploadUcAttachment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/uc.api.storage.halo.run/v1alpha1/attachments/-/upload"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.file == nil {
		return localVarReturnValue, nil, reportError("file is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var fileLocalVarFormFileName string
	var fileLocalVarFileName     string
	var fileLocalVarFileBytes    []byte

	fileLocalVarFormFileName = "file"
	fileLocalVarFile := r.file

	if fileLocalVarFile != nil {
		fbs, _ := io.ReadAll(fileLocalVarFile)

		fileLocalVarFileBytes = fbs
		fileLocalVarFileName = fileLocalVarFile.Name()
		fileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: fileLocalVarFileBytes, fileName: fileLocalVarFileName, formFileName: fileLocalVarFormFileName})
	}
	if r.formData != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "formData", r.formData, "", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Attachment
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
