/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package user_sdk

import (
	"encoding/json"
)

// checks if the AttachmentStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttachmentStatus{}

// AttachmentStatus struct for AttachmentStatus
type AttachmentStatus struct {
	// Permalink of attachment. If it is in local storage, the public URL will be set. If it is in s3 storage, the Object URL will be set. 
	Permalink *string `json:"permalink,omitempty"`
	Thumbnails *map[string]string `json:"thumbnails,omitempty"`
}

// NewAttachmentStatus instantiates a new AttachmentStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttachmentStatus() *AttachmentStatus {
	this := AttachmentStatus{}
	return &this
}

// NewAttachmentStatusWithDefaults instantiates a new AttachmentStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttachmentStatusWithDefaults() *AttachmentStatus {
	this := AttachmentStatus{}
	return &this
}

// GetPermalink returns the Permalink field value if set, zero value otherwise.
func (o *AttachmentStatus) GetPermalink() string {
	if o == nil || IsNil(o.Permalink) {
		var ret string
		return ret
	}
	return *o.Permalink
}

// GetPermalinkOk returns a tuple with the Permalink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachmentStatus) GetPermalinkOk() (*string, bool) {
	if o == nil || IsNil(o.Permalink) {
		return nil, false
	}
	return o.Permalink, true
}

// HasPermalink returns a boolean if a field has been set.
func (o *AttachmentStatus) HasPermalink() bool {
	if o != nil && !IsNil(o.Permalink) {
		return true
	}

	return false
}

// SetPermalink gets a reference to the given string and assigns it to the Permalink field.
func (o *AttachmentStatus) SetPermalink(v string) {
	o.Permalink = &v
}

// GetThumbnails returns the Thumbnails field value if set, zero value otherwise.
func (o *AttachmentStatus) GetThumbnails() map[string]string {
	if o == nil || IsNil(o.Thumbnails) {
		var ret map[string]string
		return ret
	}
	return *o.Thumbnails
}

// GetThumbnailsOk returns a tuple with the Thumbnails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachmentStatus) GetThumbnailsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Thumbnails) {
		return nil, false
	}
	return o.Thumbnails, true
}

// HasThumbnails returns a boolean if a field has been set.
func (o *AttachmentStatus) HasThumbnails() bool {
	if o != nil && !IsNil(o.Thumbnails) {
		return true
	}

	return false
}

// SetThumbnails gets a reference to the given map[string]string and assigns it to the Thumbnails field.
func (o *AttachmentStatus) SetThumbnails(v map[string]string) {
	o.Thumbnails = &v
}

func (o AttachmentStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttachmentStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Permalink) {
		toSerialize["permalink"] = o.Permalink
	}
	if !IsNil(o.Thumbnails) {
		toSerialize["thumbnails"] = o.Thumbnails
	}
	return toSerialize, nil
}

type NullableAttachmentStatus struct {
	value *AttachmentStatus
	isSet bool
}

func (v NullableAttachmentStatus) Get() *AttachmentStatus {
	return v.value
}

func (v *NullableAttachmentStatus) Set(val *AttachmentStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAttachmentStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachmentStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachmentStatus(val *AttachmentStatus) *NullableAttachmentStatus {
	return &NullableAttachmentStatus{value: val, isSet: true}
}

func (v NullableAttachmentStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachmentStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


