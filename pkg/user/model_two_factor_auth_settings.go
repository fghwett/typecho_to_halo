/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package user_sdk

import (
	"encoding/json"
)

// checks if the TwoFactorAuthSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TwoFactorAuthSettings{}

// TwoFactorAuthSettings struct for TwoFactorAuthSettings
type TwoFactorAuthSettings struct {
	Available *bool `json:"available,omitempty"`
	EmailVerified *bool `json:"emailVerified,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	TotpConfigured *bool `json:"totpConfigured,omitempty"`
}

// NewTwoFactorAuthSettings instantiates a new TwoFactorAuthSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTwoFactorAuthSettings() *TwoFactorAuthSettings {
	this := TwoFactorAuthSettings{}
	return &this
}

// NewTwoFactorAuthSettingsWithDefaults instantiates a new TwoFactorAuthSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTwoFactorAuthSettingsWithDefaults() *TwoFactorAuthSettings {
	this := TwoFactorAuthSettings{}
	return &this
}

// GetAvailable returns the Available field value if set, zero value otherwise.
func (o *TwoFactorAuthSettings) GetAvailable() bool {
	if o == nil || IsNil(o.Available) {
		var ret bool
		return ret
	}
	return *o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TwoFactorAuthSettings) GetAvailableOk() (*bool, bool) {
	if o == nil || IsNil(o.Available) {
		return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *TwoFactorAuthSettings) HasAvailable() bool {
	if o != nil && !IsNil(o.Available) {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given bool and assigns it to the Available field.
func (o *TwoFactorAuthSettings) SetAvailable(v bool) {
	o.Available = &v
}

// GetEmailVerified returns the EmailVerified field value if set, zero value otherwise.
func (o *TwoFactorAuthSettings) GetEmailVerified() bool {
	if o == nil || IsNil(o.EmailVerified) {
		var ret bool
		return ret
	}
	return *o.EmailVerified
}

// GetEmailVerifiedOk returns a tuple with the EmailVerified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TwoFactorAuthSettings) GetEmailVerifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.EmailVerified) {
		return nil, false
	}
	return o.EmailVerified, true
}

// HasEmailVerified returns a boolean if a field has been set.
func (o *TwoFactorAuthSettings) HasEmailVerified() bool {
	if o != nil && !IsNil(o.EmailVerified) {
		return true
	}

	return false
}

// SetEmailVerified gets a reference to the given bool and assigns it to the EmailVerified field.
func (o *TwoFactorAuthSettings) SetEmailVerified(v bool) {
	o.EmailVerified = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *TwoFactorAuthSettings) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TwoFactorAuthSettings) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *TwoFactorAuthSettings) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *TwoFactorAuthSettings) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetTotpConfigured returns the TotpConfigured field value if set, zero value otherwise.
func (o *TwoFactorAuthSettings) GetTotpConfigured() bool {
	if o == nil || IsNil(o.TotpConfigured) {
		var ret bool
		return ret
	}
	return *o.TotpConfigured
}

// GetTotpConfiguredOk returns a tuple with the TotpConfigured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TwoFactorAuthSettings) GetTotpConfiguredOk() (*bool, bool) {
	if o == nil || IsNil(o.TotpConfigured) {
		return nil, false
	}
	return o.TotpConfigured, true
}

// HasTotpConfigured returns a boolean if a field has been set.
func (o *TwoFactorAuthSettings) HasTotpConfigured() bool {
	if o != nil && !IsNil(o.TotpConfigured) {
		return true
	}

	return false
}

// SetTotpConfigured gets a reference to the given bool and assigns it to the TotpConfigured field.
func (o *TwoFactorAuthSettings) SetTotpConfigured(v bool) {
	o.TotpConfigured = &v
}

func (o TwoFactorAuthSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TwoFactorAuthSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Available) {
		toSerialize["available"] = o.Available
	}
	if !IsNil(o.EmailVerified) {
		toSerialize["emailVerified"] = o.EmailVerified
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.TotpConfigured) {
		toSerialize["totpConfigured"] = o.TotpConfigured
	}
	return toSerialize, nil
}

type NullableTwoFactorAuthSettings struct {
	value *TwoFactorAuthSettings
	isSet bool
}

func (v NullableTwoFactorAuthSettings) Get() *TwoFactorAuthSettings {
	return v.value
}

func (v *NullableTwoFactorAuthSettings) Set(val *TwoFactorAuthSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableTwoFactorAuthSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableTwoFactorAuthSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTwoFactorAuthSettings(val *TwoFactorAuthSettings) *NullableTwoFactorAuthSettings {
	return &NullableTwoFactorAuthSettings{value: val, isSet: true}
}

func (v NullableTwoFactorAuthSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTwoFactorAuthSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


