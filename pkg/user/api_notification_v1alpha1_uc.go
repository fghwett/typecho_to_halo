/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package user_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type NotificationV1alpha1UcAPI interface {

	/*
	DeleteSpecifiedNotification Method for DeleteSpecifiedNotification

	Delete the specified notification.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param username Username
	@param name Notification name
	@return ApiDeleteSpecifiedNotificationRequest
	*/
	DeleteSpecifiedNotification(ctx context.Context, username string, name string) ApiDeleteSpecifiedNotificationRequest

	// DeleteSpecifiedNotificationExecute executes the request
	//  @return Notification
	DeleteSpecifiedNotificationExecute(r ApiDeleteSpecifiedNotificationRequest) (*Notification, *http.Response, error)

	/*
	ListUserNotificationPreferences Method for ListUserNotificationPreferences

	List notification preferences for the authenticated user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param username Username
	@return ApiListUserNotificationPreferencesRequest
	*/
	ListUserNotificationPreferences(ctx context.Context, username string) ApiListUserNotificationPreferencesRequest

	// ListUserNotificationPreferencesExecute executes the request
	//  @return ReasonTypeNotifierMatrix
	ListUserNotificationPreferencesExecute(r ApiListUserNotificationPreferencesRequest) (*ReasonTypeNotifierMatrix, *http.Response, error)

	/*
	ListUserNotifications Method for ListUserNotifications

	List notifications for the authenticated user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param username Username
	@return ApiListUserNotificationsRequest
	*/
	ListUserNotifications(ctx context.Context, username string) ApiListUserNotificationsRequest

	// ListUserNotificationsExecute executes the request
	//  @return NotificationList
	ListUserNotificationsExecute(r ApiListUserNotificationsRequest) (*NotificationList, *http.Response, error)

	/*
	MarkNotificationAsRead Method for MarkNotificationAsRead

	Mark the specified notification as read.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param username Username
	@param name Notification name
	@return ApiMarkNotificationAsReadRequest
	*/
	MarkNotificationAsRead(ctx context.Context, username string, name string) ApiMarkNotificationAsReadRequest

	// MarkNotificationAsReadExecute executes the request
	//  @return Notification
	MarkNotificationAsReadExecute(r ApiMarkNotificationAsReadRequest) (*Notification, *http.Response, error)

	/*
	MarkNotificationsAsRead Method for MarkNotificationsAsRead

	Mark the specified notifications as read.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param username Username
	@return ApiMarkNotificationsAsReadRequest
	*/
	MarkNotificationsAsRead(ctx context.Context, username string) ApiMarkNotificationsAsReadRequest

	// MarkNotificationsAsReadExecute executes the request
	//  @return []string
	MarkNotificationsAsReadExecute(r ApiMarkNotificationsAsReadRequest) ([]string, *http.Response, error)

	/*
	SaveUserNotificationPreferences Method for SaveUserNotificationPreferences

	Save notification preferences for the authenticated user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param username Username
	@return ApiSaveUserNotificationPreferencesRequest
	*/
	SaveUserNotificationPreferences(ctx context.Context, username string) ApiSaveUserNotificationPreferencesRequest

	// SaveUserNotificationPreferencesExecute executes the request
	//  @return ReasonTypeNotifierMatrix
	SaveUserNotificationPreferencesExecute(r ApiSaveUserNotificationPreferencesRequest) (*ReasonTypeNotifierMatrix, *http.Response, error)
}

// NotificationV1alpha1UcAPIService NotificationV1alpha1UcAPI service
type NotificationV1alpha1UcAPIService service

type ApiDeleteSpecifiedNotificationRequest struct {
	ctx context.Context
	ApiService NotificationV1alpha1UcAPI
	username string
	name string
}

func (r ApiDeleteSpecifiedNotificationRequest) Execute() (*Notification, *http.Response, error) {
	return r.ApiService.DeleteSpecifiedNotificationExecute(r)
}

/*
DeleteSpecifiedNotification Method for DeleteSpecifiedNotification

Delete the specified notification.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param username Username
 @param name Notification name
 @return ApiDeleteSpecifiedNotificationRequest
*/
func (a *NotificationV1alpha1UcAPIService) DeleteSpecifiedNotification(ctx context.Context, username string, name string) ApiDeleteSpecifiedNotificationRequest {
	return ApiDeleteSpecifiedNotificationRequest{
		ApiService: a,
		ctx: ctx,
		username: username,
		name: name,
	}
}

// Execute executes the request
//  @return Notification
func (a *NotificationV1alpha1UcAPIService) DeleteSpecifiedNotificationExecute(r ApiDeleteSpecifiedNotificationRequest) (*Notification, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Notification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotificationV1alpha1UcAPIService.DeleteSpecifiedNotification")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.notification.halo.run/v1alpha1/userspaces/{username}/notifications/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"username"+"}", url.PathEscape(parameterValueToString(r.username, "username")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Notification
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListUserNotificationPreferencesRequest struct {
	ctx context.Context
	ApiService NotificationV1alpha1UcAPI
	username string
}

func (r ApiListUserNotificationPreferencesRequest) Execute() (*ReasonTypeNotifierMatrix, *http.Response, error) {
	return r.ApiService.ListUserNotificationPreferencesExecute(r)
}

/*
ListUserNotificationPreferences Method for ListUserNotificationPreferences

List notification preferences for the authenticated user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param username Username
 @return ApiListUserNotificationPreferencesRequest
*/
func (a *NotificationV1alpha1UcAPIService) ListUserNotificationPreferences(ctx context.Context, username string) ApiListUserNotificationPreferencesRequest {
	return ApiListUserNotificationPreferencesRequest{
		ApiService: a,
		ctx: ctx,
		username: username,
	}
}

// Execute executes the request
//  @return ReasonTypeNotifierMatrix
func (a *NotificationV1alpha1UcAPIService) ListUserNotificationPreferencesExecute(r ApiListUserNotificationPreferencesRequest) (*ReasonTypeNotifierMatrix, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReasonTypeNotifierMatrix
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotificationV1alpha1UcAPIService.ListUserNotificationPreferences")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.notification.halo.run/v1alpha1/userspaces/{username}/notification-preferences"
	localVarPath = strings.Replace(localVarPath, "{"+"username"+"}", url.PathEscape(parameterValueToString(r.username, "username")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ReasonTypeNotifierMatrix
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListUserNotificationsRequest struct {
	ctx context.Context
	ApiService NotificationV1alpha1UcAPI
	username string
	page *int32
	size *int32
	labelSelector *[]string
	fieldSelector *[]string
	sort *[]string
}

// Page number. Default is 0.
func (r ApiListUserNotificationsRequest) Page(page int32) ApiListUserNotificationsRequest {
	r.page = &page
	return r
}

// Size number. Default is 0.
func (r ApiListUserNotificationsRequest) Size(size int32) ApiListUserNotificationsRequest {
	r.size = &size
	return r
}

// Label selector. e.g.: hidden!&#x3D;true
func (r ApiListUserNotificationsRequest) LabelSelector(labelSelector []string) ApiListUserNotificationsRequest {
	r.labelSelector = &labelSelector
	return r
}

// Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
func (r ApiListUserNotificationsRequest) FieldSelector(fieldSelector []string) ApiListUserNotificationsRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListUserNotificationsRequest) Sort(sort []string) ApiListUserNotificationsRequest {
	r.sort = &sort
	return r
}

func (r ApiListUserNotificationsRequest) Execute() (*NotificationList, *http.Response, error) {
	return r.ApiService.ListUserNotificationsExecute(r)
}

/*
ListUserNotifications Method for ListUserNotifications

List notifications for the authenticated user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param username Username
 @return ApiListUserNotificationsRequest
*/
func (a *NotificationV1alpha1UcAPIService) ListUserNotifications(ctx context.Context, username string) ApiListUserNotificationsRequest {
	return ApiListUserNotificationsRequest{
		ApiService: a,
		ctx: ctx,
		username: username,
	}
}

// Execute executes the request
//  @return NotificationList
func (a *NotificationV1alpha1UcAPIService) ListUserNotificationsExecute(r ApiListUserNotificationsRequest) (*NotificationList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NotificationList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotificationV1alpha1UcAPIService.ListUserNotifications")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.notification.halo.run/v1alpha1/userspaces/{username}/notifications"
	localVarPath = strings.Replace(localVarPath, "{"+"username"+"}", url.PathEscape(parameterValueToString(r.username, "username")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.labelSelector != nil {
		t := *r.labelSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", t, "form", "multi")
		}
	}
	if r.fieldSelector != nil {
		t := *r.fieldSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", t, "form", "multi")
		}
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v NotificationList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMarkNotificationAsReadRequest struct {
	ctx context.Context
	ApiService NotificationV1alpha1UcAPI
	username string
	name string
}

func (r ApiMarkNotificationAsReadRequest) Execute() (*Notification, *http.Response, error) {
	return r.ApiService.MarkNotificationAsReadExecute(r)
}

/*
MarkNotificationAsRead Method for MarkNotificationAsRead

Mark the specified notification as read.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param username Username
 @param name Notification name
 @return ApiMarkNotificationAsReadRequest
*/
func (a *NotificationV1alpha1UcAPIService) MarkNotificationAsRead(ctx context.Context, username string, name string) ApiMarkNotificationAsReadRequest {
	return ApiMarkNotificationAsReadRequest{
		ApiService: a,
		ctx: ctx,
		username: username,
		name: name,
	}
}

// Execute executes the request
//  @return Notification
func (a *NotificationV1alpha1UcAPIService) MarkNotificationAsReadExecute(r ApiMarkNotificationAsReadRequest) (*Notification, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Notification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotificationV1alpha1UcAPIService.MarkNotificationAsRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.notification.halo.run/v1alpha1/userspaces/{username}/notifications/{name}/mark-as-read"
	localVarPath = strings.Replace(localVarPath, "{"+"username"+"}", url.PathEscape(parameterValueToString(r.username, "username")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Notification
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMarkNotificationsAsReadRequest struct {
	ctx context.Context
	ApiService NotificationV1alpha1UcAPI
	username string
	markSpecifiedRequest *MarkSpecifiedRequest
}

func (r ApiMarkNotificationsAsReadRequest) MarkSpecifiedRequest(markSpecifiedRequest MarkSpecifiedRequest) ApiMarkNotificationsAsReadRequest {
	r.markSpecifiedRequest = &markSpecifiedRequest
	return r
}

func (r ApiMarkNotificationsAsReadRequest) Execute() ([]string, *http.Response, error) {
	return r.ApiService.MarkNotificationsAsReadExecute(r)
}

/*
MarkNotificationsAsRead Method for MarkNotificationsAsRead

Mark the specified notifications as read.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param username Username
 @return ApiMarkNotificationsAsReadRequest
*/
func (a *NotificationV1alpha1UcAPIService) MarkNotificationsAsRead(ctx context.Context, username string) ApiMarkNotificationsAsReadRequest {
	return ApiMarkNotificationsAsReadRequest{
		ApiService: a,
		ctx: ctx,
		username: username,
	}
}

// Execute executes the request
//  @return []string
func (a *NotificationV1alpha1UcAPIService) MarkNotificationsAsReadExecute(r ApiMarkNotificationsAsReadRequest) ([]string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotificationV1alpha1UcAPIService.MarkNotificationsAsRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.notification.halo.run/v1alpha1/userspaces/{username}/notifications/-/mark-specified-as-read"
	localVarPath = strings.Replace(localVarPath, "{"+"username"+"}", url.PathEscape(parameterValueToString(r.username, "username")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.markSpecifiedRequest == nil {
		return localVarReturnValue, nil, reportError("markSpecifiedRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.markSpecifiedRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSaveUserNotificationPreferencesRequest struct {
	ctx context.Context
	ApiService NotificationV1alpha1UcAPI
	username string
	reasonTypeNotifierCollectionRequest *ReasonTypeNotifierCollectionRequest
}

func (r ApiSaveUserNotificationPreferencesRequest) ReasonTypeNotifierCollectionRequest(reasonTypeNotifierCollectionRequest ReasonTypeNotifierCollectionRequest) ApiSaveUserNotificationPreferencesRequest {
	r.reasonTypeNotifierCollectionRequest = &reasonTypeNotifierCollectionRequest
	return r
}

func (r ApiSaveUserNotificationPreferencesRequest) Execute() (*ReasonTypeNotifierMatrix, *http.Response, error) {
	return r.ApiService.SaveUserNotificationPreferencesExecute(r)
}

/*
SaveUserNotificationPreferences Method for SaveUserNotificationPreferences

Save notification preferences for the authenticated user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param username Username
 @return ApiSaveUserNotificationPreferencesRequest
*/
func (a *NotificationV1alpha1UcAPIService) SaveUserNotificationPreferences(ctx context.Context, username string) ApiSaveUserNotificationPreferencesRequest {
	return ApiSaveUserNotificationPreferencesRequest{
		ApiService: a,
		ctx: ctx,
		username: username,
	}
}

// Execute executes the request
//  @return ReasonTypeNotifierMatrix
func (a *NotificationV1alpha1UcAPIService) SaveUserNotificationPreferencesExecute(r ApiSaveUserNotificationPreferencesRequest) (*ReasonTypeNotifierMatrix, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReasonTypeNotifierMatrix
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotificationV1alpha1UcAPIService.SaveUserNotificationPreferences")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.notification.halo.run/v1alpha1/userspaces/{username}/notification-preferences"
	localVarPath = strings.Replace(localVarPath, "{"+"username"+"}", url.PathEscape(parameterValueToString(r.username, "username")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.reasonTypeNotifierCollectionRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ReasonTypeNotifierMatrix
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
