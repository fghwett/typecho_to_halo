/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package user_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type SnapshotV1alpha1UcAPI interface {

	/*
	GetSnapshotForPost Method for GetSnapshotForPost

	Get snapshot for one post.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Snapshot name.
	@return ApiGetSnapshotForPostRequest
	*/
	GetSnapshotForPost(ctx context.Context, name string) ApiGetSnapshotForPostRequest

	// GetSnapshotForPostExecute executes the request
	//  @return Snapshot
	GetSnapshotForPostExecute(r ApiGetSnapshotForPostRequest) (*Snapshot, *http.Response, error)
}

// SnapshotV1alpha1UcAPIService SnapshotV1alpha1UcAPI service
type SnapshotV1alpha1UcAPIService service

type ApiGetSnapshotForPostRequest struct {
	ctx context.Context
	ApiService SnapshotV1alpha1UcAPI
	name string
	postName *string
	patched *bool
}

// Post name.
func (r ApiGetSnapshotForPostRequest) PostName(postName string) ApiGetSnapshotForPostRequest {
	r.postName = &postName
	return r
}

// Should include patched content and raw or not.
func (r ApiGetSnapshotForPostRequest) Patched(patched bool) ApiGetSnapshotForPostRequest {
	r.patched = &patched
	return r
}

func (r ApiGetSnapshotForPostRequest) Execute() (*Snapshot, *http.Response, error) {
	return r.ApiService.GetSnapshotForPostExecute(r)
}

/*
GetSnapshotForPost Method for GetSnapshotForPost

Get snapshot for one post.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Snapshot name.
 @return ApiGetSnapshotForPostRequest
*/
func (a *SnapshotV1alpha1UcAPIService) GetSnapshotForPost(ctx context.Context, name string) ApiGetSnapshotForPostRequest {
	return ApiGetSnapshotForPostRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return Snapshot
func (a *SnapshotV1alpha1UcAPIService) GetSnapshotForPostExecute(r ApiGetSnapshotForPostRequest) (*Snapshot, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Snapshot
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SnapshotV1alpha1UcAPIService.GetSnapshotForPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/uc.api.content.halo.run/v1alpha1/snapshots/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.postName == nil {
		return localVarReturnValue, nil, reportError("postName is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "postName", r.postName, "form", "")
	if r.patched != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "patched", r.patched, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Snapshot
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
