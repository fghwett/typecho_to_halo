/*
Halo

Testing PersonalAccessTokenV1alpha1UcAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package user_sdk

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "api.halo.run/apis/openapi-go-user"
)

func Test_user_sdk_PersonalAccessTokenV1alpha1UcAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PersonalAccessTokenV1alpha1UcAPIService DeletePat", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.PersonalAccessTokenV1alpha1UcAPI.DeletePat(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PersonalAccessTokenV1alpha1UcAPIService GeneratePat", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PersonalAccessTokenV1alpha1UcAPI.GeneratePat(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PersonalAccessTokenV1alpha1UcAPIService ObtainPat", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.PersonalAccessTokenV1alpha1UcAPI.ObtainPat(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PersonalAccessTokenV1alpha1UcAPIService ObtainPats", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PersonalAccessTokenV1alpha1UcAPI.ObtainPats(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PersonalAccessTokenV1alpha1UcAPIService RestorePat", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.PersonalAccessTokenV1alpha1UcAPI.RestorePat(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PersonalAccessTokenV1alpha1UcAPIService RevokePat", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.PersonalAccessTokenV1alpha1UcAPI.RevokePat(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
