/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package user_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type TwoFactorAuthV1alpha1UcAPI interface {

	/*
	ConfigurerTotp Method for ConfigurerTotp

	Configure a TOTP

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiConfigurerTotpRequest
	*/
	ConfigurerTotp(ctx context.Context) ApiConfigurerTotpRequest

	// ConfigurerTotpExecute executes the request
	//  @return TwoFactorAuthSettings
	ConfigurerTotpExecute(r ApiConfigurerTotpRequest) (*TwoFactorAuthSettings, *http.Response, error)

	/*
	DeleteTotp Method for DeleteTotp

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteTotpRequest
	*/
	DeleteTotp(ctx context.Context) ApiDeleteTotpRequest

	// DeleteTotpExecute executes the request
	//  @return TwoFactorAuthSettings
	DeleteTotpExecute(r ApiDeleteTotpRequest) (*TwoFactorAuthSettings, *http.Response, error)

	/*
	DisableTwoFactor Method for DisableTwoFactor

	Disable Two-factor authentication

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDisableTwoFactorRequest
	*/
	DisableTwoFactor(ctx context.Context) ApiDisableTwoFactorRequest

	// DisableTwoFactorExecute executes the request
	//  @return TwoFactorAuthSettings
	DisableTwoFactorExecute(r ApiDisableTwoFactorRequest) (*TwoFactorAuthSettings, *http.Response, error)

	/*
	EnableTwoFactor Method for EnableTwoFactor

	Enable Two-factor authentication

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiEnableTwoFactorRequest
	*/
	EnableTwoFactor(ctx context.Context) ApiEnableTwoFactorRequest

	// EnableTwoFactorExecute executes the request
	//  @return TwoFactorAuthSettings
	EnableTwoFactorExecute(r ApiEnableTwoFactorRequest) (*TwoFactorAuthSettings, *http.Response, error)

	/*
	GetTotpAuthLink Method for GetTotpAuthLink

	Get TOTP auth link, including secret

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetTotpAuthLinkRequest
	*/
	GetTotpAuthLink(ctx context.Context) ApiGetTotpAuthLinkRequest

	// GetTotpAuthLinkExecute executes the request
	//  @return TotpAuthLinkResponse
	GetTotpAuthLinkExecute(r ApiGetTotpAuthLinkRequest) (*TotpAuthLinkResponse, *http.Response, error)

	/*
	GetTwoFactorAuthenticationSettings Method for GetTwoFactorAuthenticationSettings

	Get Two-factor authentication settings.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetTwoFactorAuthenticationSettingsRequest
	*/
	GetTwoFactorAuthenticationSettings(ctx context.Context) ApiGetTwoFactorAuthenticationSettingsRequest

	// GetTwoFactorAuthenticationSettingsExecute executes the request
	//  @return TwoFactorAuthSettings
	GetTwoFactorAuthenticationSettingsExecute(r ApiGetTwoFactorAuthenticationSettingsRequest) (*TwoFactorAuthSettings, *http.Response, error)
}

// TwoFactorAuthV1alpha1UcAPIService TwoFactorAuthV1alpha1UcAPI service
type TwoFactorAuthV1alpha1UcAPIService service

type ApiConfigurerTotpRequest struct {
	ctx context.Context
	ApiService TwoFactorAuthV1alpha1UcAPI
	totpRequest *TotpRequest
}

func (r ApiConfigurerTotpRequest) TotpRequest(totpRequest TotpRequest) ApiConfigurerTotpRequest {
	r.totpRequest = &totpRequest
	return r
}

func (r ApiConfigurerTotpRequest) Execute() (*TwoFactorAuthSettings, *http.Response, error) {
	return r.ApiService.ConfigurerTotpExecute(r)
}

/*
ConfigurerTotp Method for ConfigurerTotp

Configure a TOTP

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiConfigurerTotpRequest
*/
func (a *TwoFactorAuthV1alpha1UcAPIService) ConfigurerTotp(ctx context.Context) ApiConfigurerTotpRequest {
	return ApiConfigurerTotpRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TwoFactorAuthSettings
func (a *TwoFactorAuthV1alpha1UcAPIService) ConfigurerTotpExecute(r ApiConfigurerTotpRequest) (*TwoFactorAuthSettings, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TwoFactorAuthSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TwoFactorAuthV1alpha1UcAPIService.ConfigurerTotp")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/uc.api.security.halo.run/v1alpha1/authentications/two-factor/totp"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.totpRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v TwoFactorAuthSettings
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteTotpRequest struct {
	ctx context.Context
	ApiService TwoFactorAuthV1alpha1UcAPI
	passwordRequest *PasswordRequest
}

func (r ApiDeleteTotpRequest) PasswordRequest(passwordRequest PasswordRequest) ApiDeleteTotpRequest {
	r.passwordRequest = &passwordRequest
	return r
}

func (r ApiDeleteTotpRequest) Execute() (*TwoFactorAuthSettings, *http.Response, error) {
	return r.ApiService.DeleteTotpExecute(r)
}

/*
DeleteTotp Method for DeleteTotp

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeleteTotpRequest
*/
func (a *TwoFactorAuthV1alpha1UcAPIService) DeleteTotp(ctx context.Context) ApiDeleteTotpRequest {
	return ApiDeleteTotpRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TwoFactorAuthSettings
func (a *TwoFactorAuthV1alpha1UcAPIService) DeleteTotpExecute(r ApiDeleteTotpRequest) (*TwoFactorAuthSettings, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TwoFactorAuthSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TwoFactorAuthV1alpha1UcAPIService.DeleteTotp")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/uc.api.security.halo.run/v1alpha1/authentications/two-factor/totp/-"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.passwordRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v TwoFactorAuthSettings
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDisableTwoFactorRequest struct {
	ctx context.Context
	ApiService TwoFactorAuthV1alpha1UcAPI
	passwordRequest *PasswordRequest
}

func (r ApiDisableTwoFactorRequest) PasswordRequest(passwordRequest PasswordRequest) ApiDisableTwoFactorRequest {
	r.passwordRequest = &passwordRequest
	return r
}

func (r ApiDisableTwoFactorRequest) Execute() (*TwoFactorAuthSettings, *http.Response, error) {
	return r.ApiService.DisableTwoFactorExecute(r)
}

/*
DisableTwoFactor Method for DisableTwoFactor

Disable Two-factor authentication

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDisableTwoFactorRequest
*/
func (a *TwoFactorAuthV1alpha1UcAPIService) DisableTwoFactor(ctx context.Context) ApiDisableTwoFactorRequest {
	return ApiDisableTwoFactorRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TwoFactorAuthSettings
func (a *TwoFactorAuthV1alpha1UcAPIService) DisableTwoFactorExecute(r ApiDisableTwoFactorRequest) (*TwoFactorAuthSettings, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TwoFactorAuthSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TwoFactorAuthV1alpha1UcAPIService.DisableTwoFactor")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/uc.api.security.halo.run/v1alpha1/authentications/two-factor/settings/disabled"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.passwordRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v TwoFactorAuthSettings
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnableTwoFactorRequest struct {
	ctx context.Context
	ApiService TwoFactorAuthV1alpha1UcAPI
	passwordRequest *PasswordRequest
}

func (r ApiEnableTwoFactorRequest) PasswordRequest(passwordRequest PasswordRequest) ApiEnableTwoFactorRequest {
	r.passwordRequest = &passwordRequest
	return r
}

func (r ApiEnableTwoFactorRequest) Execute() (*TwoFactorAuthSettings, *http.Response, error) {
	return r.ApiService.EnableTwoFactorExecute(r)
}

/*
EnableTwoFactor Method for EnableTwoFactor

Enable Two-factor authentication

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEnableTwoFactorRequest
*/
func (a *TwoFactorAuthV1alpha1UcAPIService) EnableTwoFactor(ctx context.Context) ApiEnableTwoFactorRequest {
	return ApiEnableTwoFactorRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TwoFactorAuthSettings
func (a *TwoFactorAuthV1alpha1UcAPIService) EnableTwoFactorExecute(r ApiEnableTwoFactorRequest) (*TwoFactorAuthSettings, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TwoFactorAuthSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TwoFactorAuthV1alpha1UcAPIService.EnableTwoFactor")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/uc.api.security.halo.run/v1alpha1/authentications/two-factor/settings/enabled"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.passwordRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v TwoFactorAuthSettings
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTotpAuthLinkRequest struct {
	ctx context.Context
	ApiService TwoFactorAuthV1alpha1UcAPI
}

func (r ApiGetTotpAuthLinkRequest) Execute() (*TotpAuthLinkResponse, *http.Response, error) {
	return r.ApiService.GetTotpAuthLinkExecute(r)
}

/*
GetTotpAuthLink Method for GetTotpAuthLink

Get TOTP auth link, including secret

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTotpAuthLinkRequest
*/
func (a *TwoFactorAuthV1alpha1UcAPIService) GetTotpAuthLink(ctx context.Context) ApiGetTotpAuthLinkRequest {
	return ApiGetTotpAuthLinkRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TotpAuthLinkResponse
func (a *TwoFactorAuthV1alpha1UcAPIService) GetTotpAuthLinkExecute(r ApiGetTotpAuthLinkRequest) (*TotpAuthLinkResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TotpAuthLinkResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TwoFactorAuthV1alpha1UcAPIService.GetTotpAuthLink")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/uc.api.security.halo.run/v1alpha1/authentications/two-factor/totp/auth-link"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v TotpAuthLinkResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTwoFactorAuthenticationSettingsRequest struct {
	ctx context.Context
	ApiService TwoFactorAuthV1alpha1UcAPI
}

func (r ApiGetTwoFactorAuthenticationSettingsRequest) Execute() (*TwoFactorAuthSettings, *http.Response, error) {
	return r.ApiService.GetTwoFactorAuthenticationSettingsExecute(r)
}

/*
GetTwoFactorAuthenticationSettings Method for GetTwoFactorAuthenticationSettings

Get Two-factor authentication settings.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTwoFactorAuthenticationSettingsRequest
*/
func (a *TwoFactorAuthV1alpha1UcAPIService) GetTwoFactorAuthenticationSettings(ctx context.Context) ApiGetTwoFactorAuthenticationSettingsRequest {
	return ApiGetTwoFactorAuthenticationSettingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TwoFactorAuthSettings
func (a *TwoFactorAuthV1alpha1UcAPIService) GetTwoFactorAuthenticationSettingsExecute(r ApiGetTwoFactorAuthenticationSettingsRequest) (*TwoFactorAuthSettings, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TwoFactorAuthSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TwoFactorAuthV1alpha1UcAPIService.GetTwoFactorAuthenticationSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/uc.api.security.halo.run/v1alpha1/authentications/two-factor/settings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v TwoFactorAuthSettings
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
