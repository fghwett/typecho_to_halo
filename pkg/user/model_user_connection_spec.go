/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package user_sdk

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the UserConnectionSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserConnectionSpec{}

// UserConnectionSpec struct for UserConnectionSpec
type UserConnectionSpec struct {
	ProviderUserId string `json:"providerUserId"`
	RegistrationId string `json:"registrationId"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	Username string `json:"username"`
}

type _UserConnectionSpec UserConnectionSpec

// NewUserConnectionSpec instantiates a new UserConnectionSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserConnectionSpec(providerUserId string, registrationId string, username string) *UserConnectionSpec {
	this := UserConnectionSpec{}
	this.ProviderUserId = providerUserId
	this.RegistrationId = registrationId
	this.Username = username
	return &this
}

// NewUserConnectionSpecWithDefaults instantiates a new UserConnectionSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserConnectionSpecWithDefaults() *UserConnectionSpec {
	this := UserConnectionSpec{}
	return &this
}

// GetProviderUserId returns the ProviderUserId field value
func (o *UserConnectionSpec) GetProviderUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderUserId
}

// GetProviderUserIdOk returns a tuple with the ProviderUserId field value
// and a boolean to check if the value has been set.
func (o *UserConnectionSpec) GetProviderUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderUserId, true
}

// SetProviderUserId sets field value
func (o *UserConnectionSpec) SetProviderUserId(v string) {
	o.ProviderUserId = v
}

// GetRegistrationId returns the RegistrationId field value
func (o *UserConnectionSpec) GetRegistrationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegistrationId
}

// GetRegistrationIdOk returns a tuple with the RegistrationId field value
// and a boolean to check if the value has been set.
func (o *UserConnectionSpec) GetRegistrationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegistrationId, true
}

// SetRegistrationId sets field value
func (o *UserConnectionSpec) SetRegistrationId(v string) {
	o.RegistrationId = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *UserConnectionSpec) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserConnectionSpec) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *UserConnectionSpec) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *UserConnectionSpec) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUsername returns the Username field value
func (o *UserConnectionSpec) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *UserConnectionSpec) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *UserConnectionSpec) SetUsername(v string) {
	o.Username = v
}

func (o UserConnectionSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserConnectionSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["providerUserId"] = o.ProviderUserId
	toSerialize["registrationId"] = o.RegistrationId
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	toSerialize["username"] = o.Username
	return toSerialize, nil
}

func (o *UserConnectionSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"providerUserId",
		"registrationId",
		"username",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserConnectionSpec := _UserConnectionSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserConnectionSpec)

	if err != nil {
		return err
	}

	*o = UserConnectionSpec(varUserConnectionSpec)

	return err
}

type NullableUserConnectionSpec struct {
	value *UserConnectionSpec
	isSet bool
}

func (v NullableUserConnectionSpec) Get() *UserConnectionSpec {
	return v.value
}

func (v *NullableUserConnectionSpec) Set(val *UserConnectionSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableUserConnectionSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableUserConnectionSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserConnectionSpec(val *UserConnectionSpec) *NullableUserConnectionSpec {
	return &NullableUserConnectionSpec{value: val, isSet: true}
}

func (v NullableUserConnectionSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserConnectionSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


