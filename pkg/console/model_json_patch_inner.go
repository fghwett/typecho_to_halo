/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package console_sdk

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// JsonPatchInner - struct for JsonPatchInner
type JsonPatchInner struct {
	AddOperation *AddOperation
	CopyOperation *CopyOperation
	MoveOperation *MoveOperation
	RemoveOperation *RemoveOperation
	ReplaceOperation *ReplaceOperation
	TestOperation *TestOperation
}

// AddOperationAsJsonPatchInner is a convenience function that returns AddOperation wrapped in JsonPatchInner
func AddOperationAsJsonPatchInner(v *AddOperation) JsonPatchInner {
	return JsonPatchInner{
		AddOperation: v,
	}
}

// CopyOperationAsJsonPatchInner is a convenience function that returns CopyOperation wrapped in JsonPatchInner
func CopyOperationAsJsonPatchInner(v *CopyOperation) JsonPatchInner {
	return JsonPatchInner{
		CopyOperation: v,
	}
}

// MoveOperationAsJsonPatchInner is a convenience function that returns MoveOperation wrapped in JsonPatchInner
func MoveOperationAsJsonPatchInner(v *MoveOperation) JsonPatchInner {
	return JsonPatchInner{
		MoveOperation: v,
	}
}

// RemoveOperationAsJsonPatchInner is a convenience function that returns RemoveOperation wrapped in JsonPatchInner
func RemoveOperationAsJsonPatchInner(v *RemoveOperation) JsonPatchInner {
	return JsonPatchInner{
		RemoveOperation: v,
	}
}

// ReplaceOperationAsJsonPatchInner is a convenience function that returns ReplaceOperation wrapped in JsonPatchInner
func ReplaceOperationAsJsonPatchInner(v *ReplaceOperation) JsonPatchInner {
	return JsonPatchInner{
		ReplaceOperation: v,
	}
}

// TestOperationAsJsonPatchInner is a convenience function that returns TestOperation wrapped in JsonPatchInner
func TestOperationAsJsonPatchInner(v *TestOperation) JsonPatchInner {
	return JsonPatchInner{
		TestOperation: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *JsonPatchInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddOperation
	err = newStrictDecoder(data).Decode(&dst.AddOperation)
	if err == nil {
		jsonAddOperation, _ := json.Marshal(dst.AddOperation)
		if string(jsonAddOperation) == "{}" { // empty struct
			dst.AddOperation = nil
		} else {
			if err = validator.Validate(dst.AddOperation); err != nil {
				dst.AddOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.AddOperation = nil
	}

	// try to unmarshal data into CopyOperation
	err = newStrictDecoder(data).Decode(&dst.CopyOperation)
	if err == nil {
		jsonCopyOperation, _ := json.Marshal(dst.CopyOperation)
		if string(jsonCopyOperation) == "{}" { // empty struct
			dst.CopyOperation = nil
		} else {
			if err = validator.Validate(dst.CopyOperation); err != nil {
				dst.CopyOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.CopyOperation = nil
	}

	// try to unmarshal data into MoveOperation
	err = newStrictDecoder(data).Decode(&dst.MoveOperation)
	if err == nil {
		jsonMoveOperation, _ := json.Marshal(dst.MoveOperation)
		if string(jsonMoveOperation) == "{}" { // empty struct
			dst.MoveOperation = nil
		} else {
			if err = validator.Validate(dst.MoveOperation); err != nil {
				dst.MoveOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.MoveOperation = nil
	}

	// try to unmarshal data into RemoveOperation
	err = newStrictDecoder(data).Decode(&dst.RemoveOperation)
	if err == nil {
		jsonRemoveOperation, _ := json.Marshal(dst.RemoveOperation)
		if string(jsonRemoveOperation) == "{}" { // empty struct
			dst.RemoveOperation = nil
		} else {
			if err = validator.Validate(dst.RemoveOperation); err != nil {
				dst.RemoveOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.RemoveOperation = nil
	}

	// try to unmarshal data into ReplaceOperation
	err = newStrictDecoder(data).Decode(&dst.ReplaceOperation)
	if err == nil {
		jsonReplaceOperation, _ := json.Marshal(dst.ReplaceOperation)
		if string(jsonReplaceOperation) == "{}" { // empty struct
			dst.ReplaceOperation = nil
		} else {
			if err = validator.Validate(dst.ReplaceOperation); err != nil {
				dst.ReplaceOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.ReplaceOperation = nil
	}

	// try to unmarshal data into TestOperation
	err = newStrictDecoder(data).Decode(&dst.TestOperation)
	if err == nil {
		jsonTestOperation, _ := json.Marshal(dst.TestOperation)
		if string(jsonTestOperation) == "{}" { // empty struct
			dst.TestOperation = nil
		} else {
			if err = validator.Validate(dst.TestOperation); err != nil {
				dst.TestOperation = nil
			} else {
				match++
			}
		}
	} else {
		dst.TestOperation = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddOperation = nil
		dst.CopyOperation = nil
		dst.MoveOperation = nil
		dst.RemoveOperation = nil
		dst.ReplaceOperation = nil
		dst.TestOperation = nil

		return fmt.Errorf("data matches more than one schema in oneOf(JsonPatchInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(JsonPatchInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src JsonPatchInner) MarshalJSON() ([]byte, error) {
	if src.AddOperation != nil {
		return json.Marshal(&src.AddOperation)
	}

	if src.CopyOperation != nil {
		return json.Marshal(&src.CopyOperation)
	}

	if src.MoveOperation != nil {
		return json.Marshal(&src.MoveOperation)
	}

	if src.RemoveOperation != nil {
		return json.Marshal(&src.RemoveOperation)
	}

	if src.ReplaceOperation != nil {
		return json.Marshal(&src.ReplaceOperation)
	}

	if src.TestOperation != nil {
		return json.Marshal(&src.TestOperation)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *JsonPatchInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AddOperation != nil {
		return obj.AddOperation
	}

	if obj.CopyOperation != nil {
		return obj.CopyOperation
	}

	if obj.MoveOperation != nil {
		return obj.MoveOperation
	}

	if obj.RemoveOperation != nil {
		return obj.RemoveOperation
	}

	if obj.ReplaceOperation != nil {
		return obj.ReplaceOperation
	}

	if obj.TestOperation != nil {
		return obj.TestOperation
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj JsonPatchInner) GetActualInstanceValue() (interface{}) {
	if obj.AddOperation != nil {
		return *obj.AddOperation
	}

	if obj.CopyOperation != nil {
		return *obj.CopyOperation
	}

	if obj.MoveOperation != nil {
		return *obj.MoveOperation
	}

	if obj.RemoveOperation != nil {
		return *obj.RemoveOperation
	}

	if obj.ReplaceOperation != nil {
		return *obj.ReplaceOperation
	}

	if obj.TestOperation != nil {
		return *obj.TestOperation
	}

	// all schemas are nil
	return nil
}

type NullableJsonPatchInner struct {
	value *JsonPatchInner
	isSet bool
}

func (v NullableJsonPatchInner) Get() *JsonPatchInner {
	return v.value
}

func (v *NullableJsonPatchInner) Set(val *JsonPatchInner) {
	v.value = val
	v.isSet = true
}

func (v NullableJsonPatchInner) IsSet() bool {
	return v.isSet
}

func (v *NullableJsonPatchInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJsonPatchInner(val *JsonPatchInner) *NullableJsonPatchInner {
	return &NullableJsonPatchInner{value: val, isSet: true}
}

func (v NullableJsonPatchInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJsonPatchInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


