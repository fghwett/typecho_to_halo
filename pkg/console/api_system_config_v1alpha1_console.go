/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package console_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type SystemConfigV1alpha1ConsoleAPI interface {

	/*
	GetSystemConfigByGroup Method for GetSystemConfigByGroup

	Get system config by group

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param group Group of the system config
	@return ApiGetSystemConfigByGroupRequest
	*/
	GetSystemConfigByGroup(ctx context.Context, group string) ApiGetSystemConfigByGroupRequest

	// GetSystemConfigByGroupExecute executes the request
	//  @return map[string]interface{}
	GetSystemConfigByGroupExecute(r ApiGetSystemConfigByGroupRequest) (map[string]interface{}, *http.Response, error)

	/*
	UpdateSystemConfigByGroup Method for UpdateSystemConfigByGroup

	Update system config by group

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param group Group of the system config
	@return ApiUpdateSystemConfigByGroupRequest
	*/
	UpdateSystemConfigByGroup(ctx context.Context, group string) ApiUpdateSystemConfigByGroupRequest

	// UpdateSystemConfigByGroupExecute executes the request
	UpdateSystemConfigByGroupExecute(r ApiUpdateSystemConfigByGroupRequest) (*http.Response, error)
}

// SystemConfigV1alpha1ConsoleAPIService SystemConfigV1alpha1ConsoleAPI service
type SystemConfigV1alpha1ConsoleAPIService service

type ApiGetSystemConfigByGroupRequest struct {
	ctx context.Context
	ApiService SystemConfigV1alpha1ConsoleAPI
	group string
}

func (r ApiGetSystemConfigByGroupRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetSystemConfigByGroupExecute(r)
}

/*
GetSystemConfigByGroup Method for GetSystemConfigByGroup

Get system config by group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param group Group of the system config
 @return ApiGetSystemConfigByGroupRequest
*/
func (a *SystemConfigV1alpha1ConsoleAPIService) GetSystemConfigByGroup(ctx context.Context, group string) ApiGetSystemConfigByGroupRequest {
	return ApiGetSystemConfigByGroupRequest{
		ApiService: a,
		ctx: ctx,
		group: group,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *SystemConfigV1alpha1ConsoleAPIService) GetSystemConfigByGroupExecute(r ApiGetSystemConfigByGroupRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemConfigV1alpha1ConsoleAPIService.GetSystemConfigByGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/console.api.halo.run/v1alpha1/systemconfigs/{group}"
	localVarPath = strings.Replace(localVarPath, "{"+"group"+"}", url.PathEscape(parameterValueToString(r.group, "group")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateSystemConfigByGroupRequest struct {
	ctx context.Context
	ApiService SystemConfigV1alpha1ConsoleAPI
	group string
	body *map[string]interface{}
}

func (r ApiUpdateSystemConfigByGroupRequest) Body(body map[string]interface{}) ApiUpdateSystemConfigByGroupRequest {
	r.body = &body
	return r
}

func (r ApiUpdateSystemConfigByGroupRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateSystemConfigByGroupExecute(r)
}

/*
UpdateSystemConfigByGroup Method for UpdateSystemConfigByGroup

Update system config by group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param group Group of the system config
 @return ApiUpdateSystemConfigByGroupRequest
*/
func (a *SystemConfigV1alpha1ConsoleAPIService) UpdateSystemConfigByGroup(ctx context.Context, group string) ApiUpdateSystemConfigByGroupRequest {
	return ApiUpdateSystemConfigByGroupRequest{
		ApiService: a,
		ctx: ctx,
		group: group,
	}
}

// Execute executes the request
func (a *SystemConfigV1alpha1ConsoleAPIService) UpdateSystemConfigByGroupExecute(r ApiUpdateSystemConfigByGroupRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemConfigV1alpha1ConsoleAPIService.UpdateSystemConfigByGroup")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/console.api.halo.run/v1alpha1/systemconfigs/{group}"
	localVarPath = strings.Replace(localVarPath, "{"+"group"+"}", url.PathEscape(parameterValueToString(r.group, "group")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
