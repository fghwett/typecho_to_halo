/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package console_sdk

import (
	"encoding/json"
)

// checks if the ThemeStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThemeStatus{}

// ThemeStatus struct for ThemeStatus
type ThemeStatus struct {
	Conditions *[]Condition `json:"conditions,omitempty"`
	Location *string `json:"location,omitempty"`
	Phase *string `json:"phase,omitempty"`
}

// NewThemeStatus instantiates a new ThemeStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThemeStatus() *ThemeStatus {
	this := ThemeStatus{}
	return &this
}

// NewThemeStatusWithDefaults instantiates a new ThemeStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThemeStatusWithDefaults() *ThemeStatus {
	this := ThemeStatus{}
	return &this
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *ThemeStatus) GetConditions() []Condition {
	if o == nil || IsNil(o.Conditions) {
		var ret []Condition
		return ret
	}
	return *o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThemeStatus) GetConditionsOk() (*[]Condition, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *ThemeStatus) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []Condition and assigns it to the Conditions field.
func (o *ThemeStatus) SetConditions(v []Condition) {
	o.Conditions = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *ThemeStatus) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThemeStatus) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *ThemeStatus) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *ThemeStatus) SetLocation(v string) {
	o.Location = &v
}

// GetPhase returns the Phase field value if set, zero value otherwise.
func (o *ThemeStatus) GetPhase() string {
	if o == nil || IsNil(o.Phase) {
		var ret string
		return ret
	}
	return *o.Phase
}

// GetPhaseOk returns a tuple with the Phase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThemeStatus) GetPhaseOk() (*string, bool) {
	if o == nil || IsNil(o.Phase) {
		return nil, false
	}
	return o.Phase, true
}

// HasPhase returns a boolean if a field has been set.
func (o *ThemeStatus) HasPhase() bool {
	if o != nil && !IsNil(o.Phase) {
		return true
	}

	return false
}

// SetPhase gets a reference to the given string and assigns it to the Phase field.
func (o *ThemeStatus) SetPhase(v string) {
	o.Phase = &v
}

func (o ThemeStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThemeStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Phase) {
		toSerialize["phase"] = o.Phase
	}
	return toSerialize, nil
}

type NullableThemeStatus struct {
	value *ThemeStatus
	isSet bool
}

func (v NullableThemeStatus) Get() *ThemeStatus {
	return v.value
}

func (v *NullableThemeStatus) Set(val *ThemeStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableThemeStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableThemeStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThemeStatus(val *ThemeStatus) *NullableThemeStatus {
	return &NullableThemeStatus{value: val, isSet: true}
}

func (v NullableThemeStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThemeStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


