/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package console_sdk

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the LoginHistory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoginHistory{}

// LoginHistory struct for LoginHistory
type LoginHistory struct {
	LoginAt time.Time `json:"loginAt"`
	Reason *string `json:"reason,omitempty"`
	SourceIp string `json:"sourceIp"`
	Successful bool `json:"successful"`
	UserAgent string `json:"userAgent"`
}

type _LoginHistory LoginHistory

// NewLoginHistory instantiates a new LoginHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoginHistory(loginAt time.Time, sourceIp string, successful bool, userAgent string) *LoginHistory {
	this := LoginHistory{}
	this.LoginAt = loginAt
	this.SourceIp = sourceIp
	this.Successful = successful
	this.UserAgent = userAgent
	return &this
}

// NewLoginHistoryWithDefaults instantiates a new LoginHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoginHistoryWithDefaults() *LoginHistory {
	this := LoginHistory{}
	return &this
}

// GetLoginAt returns the LoginAt field value
func (o *LoginHistory) GetLoginAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LoginAt
}

// GetLoginAtOk returns a tuple with the LoginAt field value
// and a boolean to check if the value has been set.
func (o *LoginHistory) GetLoginAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LoginAt, true
}

// SetLoginAt sets field value
func (o *LoginHistory) SetLoginAt(v time.Time) {
	o.LoginAt = v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *LoginHistory) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginHistory) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *LoginHistory) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *LoginHistory) SetReason(v string) {
	o.Reason = &v
}

// GetSourceIp returns the SourceIp field value
func (o *LoginHistory) GetSourceIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceIp
}

// GetSourceIpOk returns a tuple with the SourceIp field value
// and a boolean to check if the value has been set.
func (o *LoginHistory) GetSourceIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceIp, true
}

// SetSourceIp sets field value
func (o *LoginHistory) SetSourceIp(v string) {
	o.SourceIp = v
}

// GetSuccessful returns the Successful field value
func (o *LoginHistory) GetSuccessful() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Successful
}

// GetSuccessfulOk returns a tuple with the Successful field value
// and a boolean to check if the value has been set.
func (o *LoginHistory) GetSuccessfulOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Successful, true
}

// SetSuccessful sets field value
func (o *LoginHistory) SetSuccessful(v bool) {
	o.Successful = v
}

// GetUserAgent returns the UserAgent field value
func (o *LoginHistory) GetUserAgent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserAgent
}

// GetUserAgentOk returns a tuple with the UserAgent field value
// and a boolean to check if the value has been set.
func (o *LoginHistory) GetUserAgentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserAgent, true
}

// SetUserAgent sets field value
func (o *LoginHistory) SetUserAgent(v string) {
	o.UserAgent = v
}

func (o LoginHistory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoginHistory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["loginAt"] = o.LoginAt
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	toSerialize["sourceIp"] = o.SourceIp
	toSerialize["successful"] = o.Successful
	toSerialize["userAgent"] = o.UserAgent
	return toSerialize, nil
}

func (o *LoginHistory) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"loginAt",
		"sourceIp",
		"successful",
		"userAgent",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLoginHistory := _LoginHistory{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLoginHistory)

	if err != nil {
		return err
	}

	*o = LoginHistory(varLoginHistory)

	return err
}

type NullableLoginHistory struct {
	value *LoginHistory
	isSet bool
}

func (v NullableLoginHistory) Get() *LoginHistory {
	return v.value
}

func (v *NullableLoginHistory) Set(val *LoginHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableLoginHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableLoginHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoginHistory(val *LoginHistory) *NullableLoginHistory {
	return &NullableLoginHistory{value: val, isSet: true}
}

func (v NullableLoginHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoginHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


