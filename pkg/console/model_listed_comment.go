/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package console_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListedComment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListedComment{}

// ListedComment A chunk of items.
type ListedComment struct {
	Comment Comment `json:"comment"`
	Owner OwnerInfo `json:"owner"`
	Stats CommentStats `json:"stats"`
	Subject *Extension `json:"subject,omitempty"`
}

type _ListedComment ListedComment

// NewListedComment instantiates a new ListedComment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListedComment(comment Comment, owner OwnerInfo, stats CommentStats) *ListedComment {
	this := ListedComment{}
	this.Comment = comment
	this.Owner = owner
	this.Stats = stats
	return &this
}

// NewListedCommentWithDefaults instantiates a new ListedComment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListedCommentWithDefaults() *ListedComment {
	this := ListedComment{}
	return &this
}

// GetComment returns the Comment field value
func (o *ListedComment) GetComment() Comment {
	if o == nil {
		var ret Comment
		return ret
	}

	return o.Comment
}

// GetCommentOk returns a tuple with the Comment field value
// and a boolean to check if the value has been set.
func (o *ListedComment) GetCommentOk() (*Comment, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Comment, true
}

// SetComment sets field value
func (o *ListedComment) SetComment(v Comment) {
	o.Comment = v
}

// GetOwner returns the Owner field value
func (o *ListedComment) GetOwner() OwnerInfo {
	if o == nil {
		var ret OwnerInfo
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *ListedComment) GetOwnerOk() (*OwnerInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *ListedComment) SetOwner(v OwnerInfo) {
	o.Owner = v
}

// GetStats returns the Stats field value
func (o *ListedComment) GetStats() CommentStats {
	if o == nil {
		var ret CommentStats
		return ret
	}

	return o.Stats
}

// GetStatsOk returns a tuple with the Stats field value
// and a boolean to check if the value has been set.
func (o *ListedComment) GetStatsOk() (*CommentStats, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stats, true
}

// SetStats sets field value
func (o *ListedComment) SetStats(v CommentStats) {
	o.Stats = v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *ListedComment) GetSubject() Extension {
	if o == nil || IsNil(o.Subject) {
		var ret Extension
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListedComment) GetSubjectOk() (*Extension, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *ListedComment) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given Extension and assigns it to the Subject field.
func (o *ListedComment) SetSubject(v Extension) {
	o.Subject = &v
}

func (o ListedComment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListedComment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["comment"] = o.Comment
	toSerialize["owner"] = o.Owner
	toSerialize["stats"] = o.Stats
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	return toSerialize, nil
}

func (o *ListedComment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"comment",
		"owner",
		"stats",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListedComment := _ListedComment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListedComment)

	if err != nil {
		return err
	}

	*o = ListedComment(varListedComment)

	return err
}

type NullableListedComment struct {
	value *ListedComment
	isSet bool
}

func (v NullableListedComment) Get() *ListedComment {
	return v.value
}

func (v *NullableListedComment) Set(val *ListedComment) {
	v.value = val
	v.isSet = true
}

func (v NullableListedComment) IsSet() bool {
	return v.isSet
}

func (v *NullableListedComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListedComment(val *ListedComment) *NullableListedComment {
	return &NullableListedComment{value: val, isSet: true}
}

func (v NullableListedComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListedComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


