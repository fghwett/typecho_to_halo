/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package console_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
	"reflect"
)


type PluginV1alpha1ConsoleAPI interface {

	/*
	ChangePluginRunningState Method for ChangePluginRunningState

	Change the running state of a plugin by name.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name
	@return ApiChangePluginRunningStateRequest
	*/
	ChangePluginRunningState(ctx context.Context, name string) ApiChangePluginRunningStateRequest

	// ChangePluginRunningStateExecute executes the request
	//  @return Plugin
	ChangePluginRunningStateExecute(r ApiChangePluginRunningStateRequest) (*Plugin, *http.Response, error)

	/*
	FetchCssBundle Method for FetchCssBundle

	Merge all CSS bundles of enabled plugins into one.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFetchCssBundleRequest
	*/
	FetchCssBundle(ctx context.Context) ApiFetchCssBundleRequest

	// FetchCssBundleExecute executes the request
	//  @return string
	FetchCssBundleExecute(r ApiFetchCssBundleRequest) (string, *http.Response, error)

	/*
	FetchJsBundle Method for FetchJsBundle

	Merge all JS bundles of enabled plugins into one.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFetchJsBundleRequest
	*/
	FetchJsBundle(ctx context.Context) ApiFetchJsBundleRequest

	// FetchJsBundleExecute executes the request
	//  @return string
	FetchJsBundleExecute(r ApiFetchJsBundleRequest) (string, *http.Response, error)

	/*
	FetchPluginConfig Method for FetchPluginConfig

	Fetch configMap of plugin by configured configMapName. it is deprecated since 2.20.0

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name
	@return ApiFetchPluginConfigRequest
	*/
	FetchPluginConfig(ctx context.Context, name string) ApiFetchPluginConfigRequest

	// FetchPluginConfigExecute executes the request
	//  @return ConfigMap
	FetchPluginConfigExecute(r ApiFetchPluginConfigRequest) (*ConfigMap, *http.Response, error)

	/*
	FetchPluginJsonConfig Method for FetchPluginJsonConfig

	Fetch converted json config of plugin by configured configMapName.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name
	@return ApiFetchPluginJsonConfigRequest
	*/
	FetchPluginJsonConfig(ctx context.Context, name string) ApiFetchPluginJsonConfigRequest

	// FetchPluginJsonConfigExecute executes the request
	//  @return map[string]interface{}
	FetchPluginJsonConfigExecute(r ApiFetchPluginJsonConfigRequest) (map[string]interface{}, *http.Response, error)

	/*
	FetchPluginSetting Method for FetchPluginSetting

	Fetch setting of plugin.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name
	@return ApiFetchPluginSettingRequest
	*/
	FetchPluginSetting(ctx context.Context, name string) ApiFetchPluginSettingRequest

	// FetchPluginSettingExecute executes the request
	//  @return Setting
	FetchPluginSettingExecute(r ApiFetchPluginSettingRequest) (*Setting, *http.Response, error)

	/*
	InstallPlugin Method for InstallPlugin

	Install a plugin by uploading a Jar file.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInstallPluginRequest
	*/
	InstallPlugin(ctx context.Context) ApiInstallPluginRequest

	// InstallPluginExecute executes the request
	//  @return Plugin
	InstallPluginExecute(r ApiInstallPluginRequest) (*Plugin, *http.Response, error)

	/*
	InstallPluginFromUri Method for InstallPluginFromUri

	Install a plugin from uri.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInstallPluginFromUriRequest
	*/
	InstallPluginFromUri(ctx context.Context) ApiInstallPluginFromUriRequest

	// InstallPluginFromUriExecute executes the request
	//  @return Plugin
	InstallPluginFromUriExecute(r ApiInstallPluginFromUriRequest) (*Plugin, *http.Response, error)

	/*
	ListPlugins Method for ListPlugins

	List plugins using query criteria and sort params

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListPluginsRequest
	*/
	ListPlugins(ctx context.Context) ApiListPluginsRequest

	// ListPluginsExecute executes the request
	//  @return PluginList
	ListPluginsExecute(r ApiListPluginsRequest) (*PluginList, *http.Response, error)

	/*
	ReloadPlugin Method for ReloadPlugin

	Reload a plugin by name.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name
	@return ApiReloadPluginRequest
	*/
	ReloadPlugin(ctx context.Context, name string) ApiReloadPluginRequest

	// ReloadPluginExecute executes the request
	//  @return Plugin
	ReloadPluginExecute(r ApiReloadPluginRequest) (*Plugin, *http.Response, error)

	/*
	ResetPluginConfig Method for ResetPluginConfig

	Reset the configMap of plugin setting.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name
	@return ApiResetPluginConfigRequest
	*/
	ResetPluginConfig(ctx context.Context, name string) ApiResetPluginConfigRequest

	// ResetPluginConfigExecute executes the request
	//  @return ConfigMap
	ResetPluginConfigExecute(r ApiResetPluginConfigRequest) (*ConfigMap, *http.Response, error)

	/*
	UpdatePluginConfig Method for UpdatePluginConfig

	Update the configMap of plugin setting, it is deprecated since 2.20.0

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name
	@return ApiUpdatePluginConfigRequest

	Deprecated
	*/
	UpdatePluginConfig(ctx context.Context, name string) ApiUpdatePluginConfigRequest

	// UpdatePluginConfigExecute executes the request
	//  @return ConfigMap
	// Deprecated
	UpdatePluginConfigExecute(r ApiUpdatePluginConfigRequest) (*ConfigMap, *http.Response, error)

	/*
	UpdatePluginJsonConfig Method for UpdatePluginJsonConfig

	Update the config of plugin setting.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name
	@return ApiUpdatePluginJsonConfigRequest
	*/
	UpdatePluginJsonConfig(ctx context.Context, name string) ApiUpdatePluginJsonConfigRequest

	// UpdatePluginJsonConfigExecute executes the request
	UpdatePluginJsonConfigExecute(r ApiUpdatePluginJsonConfigRequest) (*http.Response, error)

	/*
	UpgradePlugin Method for UpgradePlugin

	Upgrade a plugin by uploading a Jar file

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name
	@return ApiUpgradePluginRequest
	*/
	UpgradePlugin(ctx context.Context, name string) ApiUpgradePluginRequest

	// UpgradePluginExecute executes the request
	UpgradePluginExecute(r ApiUpgradePluginRequest) (*http.Response, error)

	/*
	UpgradePluginFromUri Method for UpgradePluginFromUri

	Upgrade a plugin from uri.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name
	@return ApiUpgradePluginFromUriRequest
	*/
	UpgradePluginFromUri(ctx context.Context, name string) ApiUpgradePluginFromUriRequest

	// UpgradePluginFromUriExecute executes the request
	//  @return Plugin
	UpgradePluginFromUriExecute(r ApiUpgradePluginFromUriRequest) (*Plugin, *http.Response, error)
}

// PluginV1alpha1ConsoleAPIService PluginV1alpha1ConsoleAPI service
type PluginV1alpha1ConsoleAPIService service

type ApiChangePluginRunningStateRequest struct {
	ctx context.Context
	ApiService PluginV1alpha1ConsoleAPI
	name string
	pluginRunningStateRequest *PluginRunningStateRequest
}

func (r ApiChangePluginRunningStateRequest) PluginRunningStateRequest(pluginRunningStateRequest PluginRunningStateRequest) ApiChangePluginRunningStateRequest {
	r.pluginRunningStateRequest = &pluginRunningStateRequest
	return r
}

func (r ApiChangePluginRunningStateRequest) Execute() (*Plugin, *http.Response, error) {
	return r.ApiService.ChangePluginRunningStateExecute(r)
}

/*
ChangePluginRunningState Method for ChangePluginRunningState

Change the running state of a plugin by name.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiChangePluginRunningStateRequest
*/
func (a *PluginV1alpha1ConsoleAPIService) ChangePluginRunningState(ctx context.Context, name string) ApiChangePluginRunningStateRequest {
	return ApiChangePluginRunningStateRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return Plugin
func (a *PluginV1alpha1ConsoleAPIService) ChangePluginRunningStateExecute(r ApiChangePluginRunningStateRequest) (*Plugin, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Plugin
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginV1alpha1ConsoleAPIService.ChangePluginRunningState")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.console.halo.run/v1alpha1/plugins/{name}/plugin-state"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pluginRunningStateRequest == nil {
		return localVarReturnValue, nil, reportError("pluginRunningStateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.pluginRunningStateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Plugin
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchCssBundleRequest struct {
	ctx context.Context
	ApiService PluginV1alpha1ConsoleAPI
}

func (r ApiFetchCssBundleRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.FetchCssBundleExecute(r)
}

/*
FetchCssBundle Method for FetchCssBundle

Merge all CSS bundles of enabled plugins into one.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFetchCssBundleRequest
*/
func (a *PluginV1alpha1ConsoleAPIService) FetchCssBundle(ctx context.Context) ApiFetchCssBundleRequest {
	return ApiFetchCssBundleRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *PluginV1alpha1ConsoleAPIService) FetchCssBundleExecute(r ApiFetchCssBundleRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginV1alpha1ConsoleAPIService.FetchCssBundle")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.console.halo.run/v1alpha1/plugins/-/bundle.css"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchJsBundleRequest struct {
	ctx context.Context
	ApiService PluginV1alpha1ConsoleAPI
}

func (r ApiFetchJsBundleRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.FetchJsBundleExecute(r)
}

/*
FetchJsBundle Method for FetchJsBundle

Merge all JS bundles of enabled plugins into one.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFetchJsBundleRequest
*/
func (a *PluginV1alpha1ConsoleAPIService) FetchJsBundle(ctx context.Context) ApiFetchJsBundleRequest {
	return ApiFetchJsBundleRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *PluginV1alpha1ConsoleAPIService) FetchJsBundleExecute(r ApiFetchJsBundleRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginV1alpha1ConsoleAPIService.FetchJsBundle")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.console.halo.run/v1alpha1/plugins/-/bundle.js"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchPluginConfigRequest struct {
	ctx context.Context
	ApiService PluginV1alpha1ConsoleAPI
	name string
}

func (r ApiFetchPluginConfigRequest) Execute() (*ConfigMap, *http.Response, error) {
	return r.ApiService.FetchPluginConfigExecute(r)
}

/*
FetchPluginConfig Method for FetchPluginConfig

Fetch configMap of plugin by configured configMapName. it is deprecated since 2.20.0

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiFetchPluginConfigRequest
*/
func (a *PluginV1alpha1ConsoleAPIService) FetchPluginConfig(ctx context.Context, name string) ApiFetchPluginConfigRequest {
	return ApiFetchPluginConfigRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return ConfigMap
func (a *PluginV1alpha1ConsoleAPIService) FetchPluginConfigExecute(r ApiFetchPluginConfigRequest) (*ConfigMap, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigMap
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginV1alpha1ConsoleAPIService.FetchPluginConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.console.halo.run/v1alpha1/plugins/{name}/config"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ConfigMap
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchPluginJsonConfigRequest struct {
	ctx context.Context
	ApiService PluginV1alpha1ConsoleAPI
	name string
}

func (r ApiFetchPluginJsonConfigRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.FetchPluginJsonConfigExecute(r)
}

/*
FetchPluginJsonConfig Method for FetchPluginJsonConfig

Fetch converted json config of plugin by configured configMapName.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiFetchPluginJsonConfigRequest
*/
func (a *PluginV1alpha1ConsoleAPIService) FetchPluginJsonConfig(ctx context.Context, name string) ApiFetchPluginJsonConfigRequest {
	return ApiFetchPluginJsonConfigRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *PluginV1alpha1ConsoleAPIService) FetchPluginJsonConfigExecute(r ApiFetchPluginJsonConfigRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginV1alpha1ConsoleAPIService.FetchPluginJsonConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.console.halo.run/v1alpha1/plugins/{name}/json-config"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchPluginSettingRequest struct {
	ctx context.Context
	ApiService PluginV1alpha1ConsoleAPI
	name string
}

func (r ApiFetchPluginSettingRequest) Execute() (*Setting, *http.Response, error) {
	return r.ApiService.FetchPluginSettingExecute(r)
}

/*
FetchPluginSetting Method for FetchPluginSetting

Fetch setting of plugin.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiFetchPluginSettingRequest
*/
func (a *PluginV1alpha1ConsoleAPIService) FetchPluginSetting(ctx context.Context, name string) ApiFetchPluginSettingRequest {
	return ApiFetchPluginSettingRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return Setting
func (a *PluginV1alpha1ConsoleAPIService) FetchPluginSettingExecute(r ApiFetchPluginSettingRequest) (*Setting, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Setting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginV1alpha1ConsoleAPIService.FetchPluginSetting")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.console.halo.run/v1alpha1/plugins/{name}/setting"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Setting
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInstallPluginRequest struct {
	ctx context.Context
	ApiService PluginV1alpha1ConsoleAPI
	file *os.File
	presetName *string
	source *string
}

func (r ApiInstallPluginRequest) File(file *os.File) ApiInstallPluginRequest {
	r.file = file
	return r
}

// Plugin preset name. We will find the plugin from plugin presets
func (r ApiInstallPluginRequest) PresetName(presetName string) ApiInstallPluginRequest {
	r.presetName = &presetName
	return r
}

// Install source. Default is file.
func (r ApiInstallPluginRequest) Source(source string) ApiInstallPluginRequest {
	r.source = &source
	return r
}

func (r ApiInstallPluginRequest) Execute() (*Plugin, *http.Response, error) {
	return r.ApiService.InstallPluginExecute(r)
}

/*
InstallPlugin Method for InstallPlugin

Install a plugin by uploading a Jar file.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiInstallPluginRequest
*/
func (a *PluginV1alpha1ConsoleAPIService) InstallPlugin(ctx context.Context) ApiInstallPluginRequest {
	return ApiInstallPluginRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Plugin
func (a *PluginV1alpha1ConsoleAPIService) InstallPluginExecute(r ApiInstallPluginRequest) (*Plugin, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Plugin
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginV1alpha1ConsoleAPIService.InstallPlugin")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.console.halo.run/v1alpha1/plugins/install"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var fileLocalVarFormFileName string
	var fileLocalVarFileName     string
	var fileLocalVarFileBytes    []byte

	fileLocalVarFormFileName = "file"
	fileLocalVarFile := r.file

	if fileLocalVarFile != nil {
		fbs, _ := io.ReadAll(fileLocalVarFile)

		fileLocalVarFileBytes = fbs
		fileLocalVarFileName = fileLocalVarFile.Name()
		fileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: fileLocalVarFileBytes, fileName: fileLocalVarFileName, formFileName: fileLocalVarFormFileName})
	}
	if r.presetName != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "presetName", r.presetName, "", "")
	}
	if r.source != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "source", r.source, "", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Plugin
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInstallPluginFromUriRequest struct {
	ctx context.Context
	ApiService PluginV1alpha1ConsoleAPI
	installFromUriRequest *InstallFromUriRequest
}

func (r ApiInstallPluginFromUriRequest) InstallFromUriRequest(installFromUriRequest InstallFromUriRequest) ApiInstallPluginFromUriRequest {
	r.installFromUriRequest = &installFromUriRequest
	return r
}

func (r ApiInstallPluginFromUriRequest) Execute() (*Plugin, *http.Response, error) {
	return r.ApiService.InstallPluginFromUriExecute(r)
}

/*
InstallPluginFromUri Method for InstallPluginFromUri

Install a plugin from uri.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiInstallPluginFromUriRequest
*/
func (a *PluginV1alpha1ConsoleAPIService) InstallPluginFromUri(ctx context.Context) ApiInstallPluginFromUriRequest {
	return ApiInstallPluginFromUriRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Plugin
func (a *PluginV1alpha1ConsoleAPIService) InstallPluginFromUriExecute(r ApiInstallPluginFromUriRequest) (*Plugin, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Plugin
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginV1alpha1ConsoleAPIService.InstallPluginFromUri")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.console.halo.run/v1alpha1/plugins/-/install-from-uri"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.installFromUriRequest == nil {
		return localVarReturnValue, nil, reportError("installFromUriRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.installFromUriRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Plugin
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListPluginsRequest struct {
	ctx context.Context
	ApiService PluginV1alpha1ConsoleAPI
	page *int32
	size *int32
	labelSelector *[]string
	fieldSelector *[]string
	sort *[]string
	keyword *string
	enabled *bool
}

// Page number. Default is 0.
func (r ApiListPluginsRequest) Page(page int32) ApiListPluginsRequest {
	r.page = &page
	return r
}

// Size number. Default is 0.
func (r ApiListPluginsRequest) Size(size int32) ApiListPluginsRequest {
	r.size = &size
	return r
}

// Label selector. e.g.: hidden!&#x3D;true
func (r ApiListPluginsRequest) LabelSelector(labelSelector []string) ApiListPluginsRequest {
	r.labelSelector = &labelSelector
	return r
}

// Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
func (r ApiListPluginsRequest) FieldSelector(fieldSelector []string) ApiListPluginsRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListPluginsRequest) Sort(sort []string) ApiListPluginsRequest {
	r.sort = &sort
	return r
}

// Keyword of plugin name or description
func (r ApiListPluginsRequest) Keyword(keyword string) ApiListPluginsRequest {
	r.keyword = &keyword
	return r
}

// Whether the plugin is enabled
func (r ApiListPluginsRequest) Enabled(enabled bool) ApiListPluginsRequest {
	r.enabled = &enabled
	return r
}

func (r ApiListPluginsRequest) Execute() (*PluginList, *http.Response, error) {
	return r.ApiService.ListPluginsExecute(r)
}

/*
ListPlugins Method for ListPlugins

List plugins using query criteria and sort params

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListPluginsRequest
*/
func (a *PluginV1alpha1ConsoleAPIService) ListPlugins(ctx context.Context) ApiListPluginsRequest {
	return ApiListPluginsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PluginList
func (a *PluginV1alpha1ConsoleAPIService) ListPluginsExecute(r ApiListPluginsRequest) (*PluginList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PluginList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginV1alpha1ConsoleAPIService.ListPlugins")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.console.halo.run/v1alpha1/plugins"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.labelSelector != nil {
		t := *r.labelSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", t, "form", "multi")
		}
	}
	if r.fieldSelector != nil {
		t := *r.fieldSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", t, "form", "multi")
		}
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	if r.keyword != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "keyword", r.keyword, "form", "")
	}
	if r.enabled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enabled", r.enabled, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v PluginList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReloadPluginRequest struct {
	ctx context.Context
	ApiService PluginV1alpha1ConsoleAPI
	name string
}

func (r ApiReloadPluginRequest) Execute() (*Plugin, *http.Response, error) {
	return r.ApiService.ReloadPluginExecute(r)
}

/*
ReloadPlugin Method for ReloadPlugin

Reload a plugin by name.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiReloadPluginRequest
*/
func (a *PluginV1alpha1ConsoleAPIService) ReloadPlugin(ctx context.Context, name string) ApiReloadPluginRequest {
	return ApiReloadPluginRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return Plugin
func (a *PluginV1alpha1ConsoleAPIService) ReloadPluginExecute(r ApiReloadPluginRequest) (*Plugin, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Plugin
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginV1alpha1ConsoleAPIService.ReloadPlugin")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.console.halo.run/v1alpha1/plugins/{name}/reload"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Plugin
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiResetPluginConfigRequest struct {
	ctx context.Context
	ApiService PluginV1alpha1ConsoleAPI
	name string
}

func (r ApiResetPluginConfigRequest) Execute() (*ConfigMap, *http.Response, error) {
	return r.ApiService.ResetPluginConfigExecute(r)
}

/*
ResetPluginConfig Method for ResetPluginConfig

Reset the configMap of plugin setting.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiResetPluginConfigRequest
*/
func (a *PluginV1alpha1ConsoleAPIService) ResetPluginConfig(ctx context.Context, name string) ApiResetPluginConfigRequest {
	return ApiResetPluginConfigRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return ConfigMap
func (a *PluginV1alpha1ConsoleAPIService) ResetPluginConfigExecute(r ApiResetPluginConfigRequest) (*ConfigMap, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigMap
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginV1alpha1ConsoleAPIService.ResetPluginConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.console.halo.run/v1alpha1/plugins/{name}/reset-config"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ConfigMap
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdatePluginConfigRequest struct {
	ctx context.Context
	ApiService PluginV1alpha1ConsoleAPI
	name string
	configMap *ConfigMap
}

func (r ApiUpdatePluginConfigRequest) ConfigMap(configMap ConfigMap) ApiUpdatePluginConfigRequest {
	r.configMap = &configMap
	return r
}

func (r ApiUpdatePluginConfigRequest) Execute() (*ConfigMap, *http.Response, error) {
	return r.ApiService.UpdatePluginConfigExecute(r)
}

/*
UpdatePluginConfig Method for UpdatePluginConfig

Update the configMap of plugin setting, it is deprecated since 2.20.0

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiUpdatePluginConfigRequest

Deprecated
*/
func (a *PluginV1alpha1ConsoleAPIService) UpdatePluginConfig(ctx context.Context, name string) ApiUpdatePluginConfigRequest {
	return ApiUpdatePluginConfigRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return ConfigMap
// Deprecated
func (a *PluginV1alpha1ConsoleAPIService) UpdatePluginConfigExecute(r ApiUpdatePluginConfigRequest) (*ConfigMap, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigMap
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginV1alpha1ConsoleAPIService.UpdatePluginConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.console.halo.run/v1alpha1/plugins/{name}/config"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.configMap == nil {
		return localVarReturnValue, nil, reportError("configMap is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.configMap
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ConfigMap
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdatePluginJsonConfigRequest struct {
	ctx context.Context
	ApiService PluginV1alpha1ConsoleAPI
	name string
	body *map[string]interface{}
}

func (r ApiUpdatePluginJsonConfigRequest) Body(body map[string]interface{}) ApiUpdatePluginJsonConfigRequest {
	r.body = &body
	return r
}

func (r ApiUpdatePluginJsonConfigRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdatePluginJsonConfigExecute(r)
}

/*
UpdatePluginJsonConfig Method for UpdatePluginJsonConfig

Update the config of plugin setting.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiUpdatePluginJsonConfigRequest
*/
func (a *PluginV1alpha1ConsoleAPIService) UpdatePluginJsonConfig(ctx context.Context, name string) ApiUpdatePluginJsonConfigRequest {
	return ApiUpdatePluginJsonConfigRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
func (a *PluginV1alpha1ConsoleAPIService) UpdatePluginJsonConfigExecute(r ApiUpdatePluginJsonConfigRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginV1alpha1ConsoleAPIService.UpdatePluginJsonConfig")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.console.halo.run/v1alpha1/plugins/{name}/json-config"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpgradePluginRequest struct {
	ctx context.Context
	ApiService PluginV1alpha1ConsoleAPI
	name string
	file *os.File
	presetName *string
	source *string
}

func (r ApiUpgradePluginRequest) File(file *os.File) ApiUpgradePluginRequest {
	r.file = file
	return r
}

// Plugin preset name. We will find the plugin from plugin presets
func (r ApiUpgradePluginRequest) PresetName(presetName string) ApiUpgradePluginRequest {
	r.presetName = &presetName
	return r
}

// Install source. Default is file.
func (r ApiUpgradePluginRequest) Source(source string) ApiUpgradePluginRequest {
	r.source = &source
	return r
}

func (r ApiUpgradePluginRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpgradePluginExecute(r)
}

/*
UpgradePlugin Method for UpgradePlugin

Upgrade a plugin by uploading a Jar file

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiUpgradePluginRequest
*/
func (a *PluginV1alpha1ConsoleAPIService) UpgradePlugin(ctx context.Context, name string) ApiUpgradePluginRequest {
	return ApiUpgradePluginRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
func (a *PluginV1alpha1ConsoleAPIService) UpgradePluginExecute(r ApiUpgradePluginRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginV1alpha1ConsoleAPIService.UpgradePlugin")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.console.halo.run/v1alpha1/plugins/{name}/upgrade"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var fileLocalVarFormFileName string
	var fileLocalVarFileName     string
	var fileLocalVarFileBytes    []byte

	fileLocalVarFormFileName = "file"
	fileLocalVarFile := r.file

	if fileLocalVarFile != nil {
		fbs, _ := io.ReadAll(fileLocalVarFile)

		fileLocalVarFileBytes = fbs
		fileLocalVarFileName = fileLocalVarFile.Name()
		fileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: fileLocalVarFileBytes, fileName: fileLocalVarFileName, formFileName: fileLocalVarFormFileName})
	}
	if r.presetName != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "presetName", r.presetName, "", "")
	}
	if r.source != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "source", r.source, "", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpgradePluginFromUriRequest struct {
	ctx context.Context
	ApiService PluginV1alpha1ConsoleAPI
	name string
	upgradeFromUriRequest *UpgradeFromUriRequest
}

func (r ApiUpgradePluginFromUriRequest) UpgradeFromUriRequest(upgradeFromUriRequest UpgradeFromUriRequest) ApiUpgradePluginFromUriRequest {
	r.upgradeFromUriRequest = &upgradeFromUriRequest
	return r
}

func (r ApiUpgradePluginFromUriRequest) Execute() (*Plugin, *http.Response, error) {
	return r.ApiService.UpgradePluginFromUriExecute(r)
}

/*
UpgradePluginFromUri Method for UpgradePluginFromUri

Upgrade a plugin from uri.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiUpgradePluginFromUriRequest
*/
func (a *PluginV1alpha1ConsoleAPIService) UpgradePluginFromUri(ctx context.Context, name string) ApiUpgradePluginFromUriRequest {
	return ApiUpgradePluginFromUriRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return Plugin
func (a *PluginV1alpha1ConsoleAPIService) UpgradePluginFromUriExecute(r ApiUpgradePluginFromUriRequest) (*Plugin, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Plugin
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginV1alpha1ConsoleAPIService.UpgradePluginFromUri")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.console.halo.run/v1alpha1/plugins/{name}/upgrade-from-uri"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.upgradeFromUriRequest == nil {
		return localVarReturnValue, nil, reportError("upgradeFromUriRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.upgradeFromUriRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Plugin
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
