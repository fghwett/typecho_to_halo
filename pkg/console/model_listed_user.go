/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package console_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListedUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListedUser{}

// ListedUser A chunk of items.
type ListedUser struct {
	Roles []Role `json:"roles"`
	User User `json:"user"`
}

type _ListedUser ListedUser

// NewListedUser instantiates a new ListedUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListedUser(roles []Role, user User) *ListedUser {
	this := ListedUser{}
	this.Roles = roles
	this.User = user
	return &this
}

// NewListedUserWithDefaults instantiates a new ListedUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListedUserWithDefaults() *ListedUser {
	this := ListedUser{}
	return &this
}

// GetRoles returns the Roles field value
func (o *ListedUser) GetRoles() []Role {
	if o == nil {
		var ret []Role
		return ret
	}

	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value
// and a boolean to check if the value has been set.
func (o *ListedUser) GetRolesOk() ([]Role, bool) {
	if o == nil {
		return nil, false
	}
	return o.Roles, true
}

// SetRoles sets field value
func (o *ListedUser) SetRoles(v []Role) {
	o.Roles = v
}

// GetUser returns the User field value
func (o *ListedUser) GetUser() User {
	if o == nil {
		var ret User
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *ListedUser) GetUserOk() (*User, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *ListedUser) SetUser(v User) {
	o.User = v
}

func (o ListedUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListedUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["roles"] = o.Roles
	toSerialize["user"] = o.User
	return toSerialize, nil
}

func (o *ListedUser) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"roles",
		"user",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListedUser := _ListedUser{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListedUser)

	if err != nil {
		return err
	}

	*o = ListedUser(varListedUser)

	return err
}

type NullableListedUser struct {
	value *ListedUser
	isSet bool
}

func (v NullableListedUser) Get() *ListedUser {
	return v.value
}

func (v *NullableListedUser) Set(val *ListedUser) {
	v.value = val
	v.isSet = true
}

func (v NullableListedUser) IsSet() bool {
	return v.isSet
}

func (v *NullableListedUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListedUser(val *ListedUser) *NullableListedUser {
	return &NullableListedUser{value: val, isSet: true}
}

func (v NullableListedUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListedUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


