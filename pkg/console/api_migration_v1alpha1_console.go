/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package console_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
)


type MigrationV1alpha1ConsoleAPI interface {

	/*
	DownloadBackups Method for DownloadBackups

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Backup name.
	@param filename Backup filename.
	@return ApiDownloadBackupsRequest
	*/
	DownloadBackups(ctx context.Context, name string, filename string) ApiDownloadBackupsRequest

	// DownloadBackupsExecute executes the request
	DownloadBackupsExecute(r ApiDownloadBackupsRequest) (*http.Response, error)

	/*
	GetBackupFiles Method for GetBackupFiles

	Get backup files from backup root.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetBackupFilesRequest
	*/
	GetBackupFiles(ctx context.Context) ApiGetBackupFilesRequest

	// GetBackupFilesExecute executes the request
	//  @return []BackupFile
	GetBackupFilesExecute(r ApiGetBackupFilesRequest) ([]BackupFile, *http.Response, error)

	/*
	RestoreBackup Method for RestoreBackup

	Restore backup by uploading file or providing download link or backup name.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiRestoreBackupRequest
	*/
	RestoreBackup(ctx context.Context) ApiRestoreBackupRequest

	// RestoreBackupExecute executes the request
	RestoreBackupExecute(r ApiRestoreBackupRequest) (*http.Response, error)
}

// MigrationV1alpha1ConsoleAPIService MigrationV1alpha1ConsoleAPI service
type MigrationV1alpha1ConsoleAPIService service

type ApiDownloadBackupsRequest struct {
	ctx context.Context
	ApiService MigrationV1alpha1ConsoleAPI
	name string
	filename string
}

func (r ApiDownloadBackupsRequest) Execute() (*http.Response, error) {
	return r.ApiService.DownloadBackupsExecute(r)
}

/*
DownloadBackups Method for DownloadBackups

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Backup name.
 @param filename Backup filename.
 @return ApiDownloadBackupsRequest
*/
func (a *MigrationV1alpha1ConsoleAPIService) DownloadBackups(ctx context.Context, name string, filename string) ApiDownloadBackupsRequest {
	return ApiDownloadBackupsRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		filename: filename,
	}
}

// Execute executes the request
func (a *MigrationV1alpha1ConsoleAPIService) DownloadBackupsExecute(r ApiDownloadBackupsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MigrationV1alpha1ConsoleAPIService.DownloadBackups")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/console.api.migration.halo.run/v1alpha1/backups/{name}/files/{filename}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"filename"+"}", url.PathEscape(parameterValueToString(r.filename, "filename")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetBackupFilesRequest struct {
	ctx context.Context
	ApiService MigrationV1alpha1ConsoleAPI
}

func (r ApiGetBackupFilesRequest) Execute() ([]BackupFile, *http.Response, error) {
	return r.ApiService.GetBackupFilesExecute(r)
}

/*
GetBackupFiles Method for GetBackupFiles

Get backup files from backup root.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetBackupFilesRequest
*/
func (a *MigrationV1alpha1ConsoleAPIService) GetBackupFiles(ctx context.Context) ApiGetBackupFilesRequest {
	return ApiGetBackupFilesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []BackupFile
func (a *MigrationV1alpha1ConsoleAPIService) GetBackupFilesExecute(r ApiGetBackupFilesRequest) ([]BackupFile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []BackupFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MigrationV1alpha1ConsoleAPIService.GetBackupFiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/console.api.migration.halo.run/v1alpha1/backup-files"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v []BackupFile
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRestoreBackupRequest struct {
	ctx context.Context
	ApiService MigrationV1alpha1ConsoleAPI
	backupName *string
	downloadUrl *string
	file *os.File
	filename *string
}

// Backup metadata name.
func (r ApiRestoreBackupRequest) BackupName(backupName string) ApiRestoreBackupRequest {
	r.backupName = &backupName
	return r
}

// Remote backup HTTP URL.
func (r ApiRestoreBackupRequest) DownloadUrl(downloadUrl string) ApiRestoreBackupRequest {
	r.downloadUrl = &downloadUrl
	return r
}

func (r ApiRestoreBackupRequest) File(file *os.File) ApiRestoreBackupRequest {
	r.file = file
	return r
}

// Filename of backup file in backups root.
func (r ApiRestoreBackupRequest) Filename(filename string) ApiRestoreBackupRequest {
	r.filename = &filename
	return r
}

func (r ApiRestoreBackupRequest) Execute() (*http.Response, error) {
	return r.ApiService.RestoreBackupExecute(r)
}

/*
RestoreBackup Method for RestoreBackup

Restore backup by uploading file or providing download link or backup name.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRestoreBackupRequest
*/
func (a *MigrationV1alpha1ConsoleAPIService) RestoreBackup(ctx context.Context) ApiRestoreBackupRequest {
	return ApiRestoreBackupRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *MigrationV1alpha1ConsoleAPIService) RestoreBackupExecute(r ApiRestoreBackupRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MigrationV1alpha1ConsoleAPIService.RestoreBackup")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/console.api.migration.halo.run/v1alpha1/restorations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.backupName != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "backupName", r.backupName, "", "")
	}
	if r.downloadUrl != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "downloadUrl", r.downloadUrl, "", "")
	}
	var fileLocalVarFormFileName string
	var fileLocalVarFileName     string
	var fileLocalVarFileBytes    []byte

	fileLocalVarFormFileName = "file"
	fileLocalVarFile := r.file

	if fileLocalVarFile != nil {
		fbs, _ := io.ReadAll(fileLocalVarFile)

		fileLocalVarFileBytes = fbs
		fileLocalVarFileName = fileLocalVarFile.Name()
		fileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: fileLocalVarFileBytes, fileName: fileLocalVarFileName, formFileName: fileLocalVarFormFileName})
	}
	if r.filename != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "filename", r.filename, "", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
