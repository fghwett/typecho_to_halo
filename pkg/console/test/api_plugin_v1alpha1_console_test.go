/*
Halo

Testing PluginV1alpha1ConsoleAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package console_sdk

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "api.halo.run/apis/openapi-go-console"
)

func Test_console_sdk_PluginV1alpha1ConsoleAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PluginV1alpha1ConsoleAPIService ChangePluginRunningState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.PluginV1alpha1ConsoleAPI.ChangePluginRunningState(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginV1alpha1ConsoleAPIService FetchCssBundle", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PluginV1alpha1ConsoleAPI.FetchCssBundle(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginV1alpha1ConsoleAPIService FetchJsBundle", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PluginV1alpha1ConsoleAPI.FetchJsBundle(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginV1alpha1ConsoleAPIService FetchPluginConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.PluginV1alpha1ConsoleAPI.FetchPluginConfig(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginV1alpha1ConsoleAPIService FetchPluginJsonConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.PluginV1alpha1ConsoleAPI.FetchPluginJsonConfig(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginV1alpha1ConsoleAPIService FetchPluginSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.PluginV1alpha1ConsoleAPI.FetchPluginSetting(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginV1alpha1ConsoleAPIService InstallPlugin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PluginV1alpha1ConsoleAPI.InstallPlugin(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginV1alpha1ConsoleAPIService InstallPluginFromUri", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PluginV1alpha1ConsoleAPI.InstallPluginFromUri(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginV1alpha1ConsoleAPIService ListPlugins", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PluginV1alpha1ConsoleAPI.ListPlugins(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginV1alpha1ConsoleAPIService ReloadPlugin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.PluginV1alpha1ConsoleAPI.ReloadPlugin(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginV1alpha1ConsoleAPIService ResetPluginConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.PluginV1alpha1ConsoleAPI.ResetPluginConfig(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginV1alpha1ConsoleAPIService UpdatePluginConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.PluginV1alpha1ConsoleAPI.UpdatePluginConfig(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginV1alpha1ConsoleAPIService UpdatePluginJsonConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.PluginV1alpha1ConsoleAPI.UpdatePluginJsonConfig(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginV1alpha1ConsoleAPIService UpgradePlugin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.PluginV1alpha1ConsoleAPI.UpgradePlugin(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginV1alpha1ConsoleAPIService UpgradePluginFromUri", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.PluginV1alpha1ConsoleAPI.UpgradePluginFromUri(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
