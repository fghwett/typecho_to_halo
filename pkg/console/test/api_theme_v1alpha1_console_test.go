/*
Halo

Testing ThemeV1alpha1ConsoleAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package console_sdk

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "api.halo.run/apis/openapi-go-console"
)

func Test_console_sdk_ThemeV1alpha1ConsoleAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ThemeV1alpha1ConsoleAPIService ActivateTheme", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ThemeV1alpha1ConsoleAPI.ActivateTheme(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThemeV1alpha1ConsoleAPIService FetchActivatedTheme", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ThemeV1alpha1ConsoleAPI.FetchActivatedTheme(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThemeV1alpha1ConsoleAPIService FetchThemeConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ThemeV1alpha1ConsoleAPI.FetchThemeConfig(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThemeV1alpha1ConsoleAPIService FetchThemeJsonConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ThemeV1alpha1ConsoleAPI.FetchThemeJsonConfig(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThemeV1alpha1ConsoleAPIService FetchThemeSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ThemeV1alpha1ConsoleAPI.FetchThemeSetting(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThemeV1alpha1ConsoleAPIService InstallTheme", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ThemeV1alpha1ConsoleAPI.InstallTheme(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThemeV1alpha1ConsoleAPIService InstallThemeFromUri", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ThemeV1alpha1ConsoleAPI.InstallThemeFromUri(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThemeV1alpha1ConsoleAPIService InvalidateCache", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.ThemeV1alpha1ConsoleAPI.InvalidateCache(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThemeV1alpha1ConsoleAPIService ListThemes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ThemeV1alpha1ConsoleAPI.ListThemes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThemeV1alpha1ConsoleAPIService Reload", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ThemeV1alpha1ConsoleAPI.Reload(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThemeV1alpha1ConsoleAPIService ResetThemeConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ThemeV1alpha1ConsoleAPI.ResetThemeConfig(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThemeV1alpha1ConsoleAPIService UpdateThemeConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ThemeV1alpha1ConsoleAPI.UpdateThemeConfig(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThemeV1alpha1ConsoleAPIService UpdateThemeJsonConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.ThemeV1alpha1ConsoleAPI.UpdateThemeJsonConfig(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThemeV1alpha1ConsoleAPIService UpgradeTheme", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.ThemeV1alpha1ConsoleAPI.UpgradeTheme(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThemeV1alpha1ConsoleAPIService UpgradeThemeFromUri", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ThemeV1alpha1ConsoleAPI.UpgradeThemeFromUri(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
