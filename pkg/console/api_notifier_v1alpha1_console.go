/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package console_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type NotifierV1alpha1ConsoleAPI interface {

	/*
	FetchSenderConfig Method for FetchSenderConfig

	Fetch sender config of notifier

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Notifier name
	@return ApiFetchSenderConfigRequest
	*/
	FetchSenderConfig(ctx context.Context, name string) ApiFetchSenderConfigRequest

	// FetchSenderConfigExecute executes the request
	//  @return map[string]interface{}
	FetchSenderConfigExecute(r ApiFetchSenderConfigRequest) (map[string]interface{}, *http.Response, error)

	/*
	SaveSenderConfig Method for SaveSenderConfig

	Save sender config of notifier

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Notifier name
	@return ApiSaveSenderConfigRequest
	*/
	SaveSenderConfig(ctx context.Context, name string) ApiSaveSenderConfigRequest

	// SaveSenderConfigExecute executes the request
	SaveSenderConfigExecute(r ApiSaveSenderConfigRequest) (*http.Response, error)

	/*
	VerifyEmailSenderConfig Method for VerifyEmailSenderConfig

	Verify email sender config.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiVerifyEmailSenderConfigRequest
	*/
	VerifyEmailSenderConfig(ctx context.Context) ApiVerifyEmailSenderConfigRequest

	// VerifyEmailSenderConfigExecute executes the request
	VerifyEmailSenderConfigExecute(r ApiVerifyEmailSenderConfigRequest) (*http.Response, error)
}

// NotifierV1alpha1ConsoleAPIService NotifierV1alpha1ConsoleAPI service
type NotifierV1alpha1ConsoleAPIService service

type ApiFetchSenderConfigRequest struct {
	ctx context.Context
	ApiService NotifierV1alpha1ConsoleAPI
	name string
}

func (r ApiFetchSenderConfigRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.FetchSenderConfigExecute(r)
}

/*
FetchSenderConfig Method for FetchSenderConfig

Fetch sender config of notifier

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Notifier name
 @return ApiFetchSenderConfigRequest
*/
func (a *NotifierV1alpha1ConsoleAPIService) FetchSenderConfig(ctx context.Context, name string) ApiFetchSenderConfigRequest {
	return ApiFetchSenderConfigRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *NotifierV1alpha1ConsoleAPIService) FetchSenderConfigExecute(r ApiFetchSenderConfigRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotifierV1alpha1ConsoleAPIService.FetchSenderConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.console.halo.run/v1alpha1/notifiers/{name}/sender-config"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSaveSenderConfigRequest struct {
	ctx context.Context
	ApiService NotifierV1alpha1ConsoleAPI
	name string
	body *map[string]interface{}
}

func (r ApiSaveSenderConfigRequest) Body(body map[string]interface{}) ApiSaveSenderConfigRequest {
	r.body = &body
	return r
}

func (r ApiSaveSenderConfigRequest) Execute() (*http.Response, error) {
	return r.ApiService.SaveSenderConfigExecute(r)
}

/*
SaveSenderConfig Method for SaveSenderConfig

Save sender config of notifier

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Notifier name
 @return ApiSaveSenderConfigRequest
*/
func (a *NotifierV1alpha1ConsoleAPIService) SaveSenderConfig(ctx context.Context, name string) ApiSaveSenderConfigRequest {
	return ApiSaveSenderConfigRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
func (a *NotifierV1alpha1ConsoleAPIService) SaveSenderConfigExecute(r ApiSaveSenderConfigRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotifierV1alpha1ConsoleAPIService.SaveSenderConfig")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.console.halo.run/v1alpha1/notifiers/{name}/sender-config"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiVerifyEmailSenderConfigRequest struct {
	ctx context.Context
	ApiService NotifierV1alpha1ConsoleAPI
	emailConfigValidationRequest *EmailConfigValidationRequest
}

func (r ApiVerifyEmailSenderConfigRequest) EmailConfigValidationRequest(emailConfigValidationRequest EmailConfigValidationRequest) ApiVerifyEmailSenderConfigRequest {
	r.emailConfigValidationRequest = &emailConfigValidationRequest
	return r
}

func (r ApiVerifyEmailSenderConfigRequest) Execute() (*http.Response, error) {
	return r.ApiService.VerifyEmailSenderConfigExecute(r)
}

/*
VerifyEmailSenderConfig Method for VerifyEmailSenderConfig

Verify email sender config.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVerifyEmailSenderConfigRequest
*/
func (a *NotifierV1alpha1ConsoleAPIService) VerifyEmailSenderConfig(ctx context.Context) ApiVerifyEmailSenderConfigRequest {
	return ApiVerifyEmailSenderConfigRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *NotifierV1alpha1ConsoleAPIService) VerifyEmailSenderConfigExecute(r ApiVerifyEmailSenderConfigRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotifierV1alpha1ConsoleAPIService.VerifyEmailSenderConfig")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/console.api.notification.halo.run/v1alpha1/notifiers/default-email-notifier/verify-connection"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.emailConfigValidationRequest == nil {
		return nil, reportError("emailConfigValidationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.emailConfigValidationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
