/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package console_sdk

import (
	"encoding/json"
)

// checks if the PluginRunningStateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PluginRunningStateRequest{}

// PluginRunningStateRequest struct for PluginRunningStateRequest
type PluginRunningStateRequest struct {
	Async *bool `json:"async,omitempty"`
	Enable *bool `json:"enable,omitempty"`
}

// NewPluginRunningStateRequest instantiates a new PluginRunningStateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluginRunningStateRequest() *PluginRunningStateRequest {
	this := PluginRunningStateRequest{}
	return &this
}

// NewPluginRunningStateRequestWithDefaults instantiates a new PluginRunningStateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginRunningStateRequestWithDefaults() *PluginRunningStateRequest {
	this := PluginRunningStateRequest{}
	return &this
}

// GetAsync returns the Async field value if set, zero value otherwise.
func (o *PluginRunningStateRequest) GetAsync() bool {
	if o == nil || IsNil(o.Async) {
		var ret bool
		return ret
	}
	return *o.Async
}

// GetAsyncOk returns a tuple with the Async field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginRunningStateRequest) GetAsyncOk() (*bool, bool) {
	if o == nil || IsNil(o.Async) {
		return nil, false
	}
	return o.Async, true
}

// HasAsync returns a boolean if a field has been set.
func (o *PluginRunningStateRequest) HasAsync() bool {
	if o != nil && !IsNil(o.Async) {
		return true
	}

	return false
}

// SetAsync gets a reference to the given bool and assigns it to the Async field.
func (o *PluginRunningStateRequest) SetAsync(v bool) {
	o.Async = &v
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *PluginRunningStateRequest) GetEnable() bool {
	if o == nil || IsNil(o.Enable) {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginRunningStateRequest) GetEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.Enable) {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *PluginRunningStateRequest) HasEnable() bool {
	if o != nil && !IsNil(o.Enable) {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *PluginRunningStateRequest) SetEnable(v bool) {
	o.Enable = &v
}

func (o PluginRunningStateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PluginRunningStateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Async) {
		toSerialize["async"] = o.Async
	}
	if !IsNil(o.Enable) {
		toSerialize["enable"] = o.Enable
	}
	return toSerialize, nil
}

type NullablePluginRunningStateRequest struct {
	value *PluginRunningStateRequest
	isSet bool
}

func (v NullablePluginRunningStateRequest) Get() *PluginRunningStateRequest {
	return v.value
}

func (v *NullablePluginRunningStateRequest) Set(val *PluginRunningStateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginRunningStateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginRunningStateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginRunningStateRequest(val *PluginRunningStateRequest) *NullablePluginRunningStateRequest {
	return &NullablePluginRunningStateRequest{value: val, isSet: true}
}

func (v NullablePluginRunningStateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginRunningStateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


