/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package console_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReplyRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplyRequest{}

// ReplyRequest struct for ReplyRequest
type ReplyRequest struct {
	AllowNotification *bool `json:"allowNotification,omitempty"`
	Content string `json:"content"`
	Owner *CommentEmailOwner `json:"owner,omitempty"`
	QuoteReply *string `json:"quoteReply,omitempty"`
	Raw string `json:"raw"`
}

type _ReplyRequest ReplyRequest

// NewReplyRequest instantiates a new ReplyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplyRequest(content string, raw string) *ReplyRequest {
	this := ReplyRequest{}
	var allowNotification bool = false
	this.AllowNotification = &allowNotification
	this.Content = content
	this.Raw = raw
	return &this
}

// NewReplyRequestWithDefaults instantiates a new ReplyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplyRequestWithDefaults() *ReplyRequest {
	this := ReplyRequest{}
	var allowNotification bool = false
	this.AllowNotification = &allowNotification
	return &this
}

// GetAllowNotification returns the AllowNotification field value if set, zero value otherwise.
func (o *ReplyRequest) GetAllowNotification() bool {
	if o == nil || IsNil(o.AllowNotification) {
		var ret bool
		return ret
	}
	return *o.AllowNotification
}

// GetAllowNotificationOk returns a tuple with the AllowNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplyRequest) GetAllowNotificationOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowNotification) {
		return nil, false
	}
	return o.AllowNotification, true
}

// HasAllowNotification returns a boolean if a field has been set.
func (o *ReplyRequest) HasAllowNotification() bool {
	if o != nil && !IsNil(o.AllowNotification) {
		return true
	}

	return false
}

// SetAllowNotification gets a reference to the given bool and assigns it to the AllowNotification field.
func (o *ReplyRequest) SetAllowNotification(v bool) {
	o.AllowNotification = &v
}

// GetContent returns the Content field value
func (o *ReplyRequest) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *ReplyRequest) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *ReplyRequest) SetContent(v string) {
	o.Content = v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *ReplyRequest) GetOwner() CommentEmailOwner {
	if o == nil || IsNil(o.Owner) {
		var ret CommentEmailOwner
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplyRequest) GetOwnerOk() (*CommentEmailOwner, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *ReplyRequest) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given CommentEmailOwner and assigns it to the Owner field.
func (o *ReplyRequest) SetOwner(v CommentEmailOwner) {
	o.Owner = &v
}

// GetQuoteReply returns the QuoteReply field value if set, zero value otherwise.
func (o *ReplyRequest) GetQuoteReply() string {
	if o == nil || IsNil(o.QuoteReply) {
		var ret string
		return ret
	}
	return *o.QuoteReply
}

// GetQuoteReplyOk returns a tuple with the QuoteReply field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplyRequest) GetQuoteReplyOk() (*string, bool) {
	if o == nil || IsNil(o.QuoteReply) {
		return nil, false
	}
	return o.QuoteReply, true
}

// HasQuoteReply returns a boolean if a field has been set.
func (o *ReplyRequest) HasQuoteReply() bool {
	if o != nil && !IsNil(o.QuoteReply) {
		return true
	}

	return false
}

// SetQuoteReply gets a reference to the given string and assigns it to the QuoteReply field.
func (o *ReplyRequest) SetQuoteReply(v string) {
	o.QuoteReply = &v
}

// GetRaw returns the Raw field value
func (o *ReplyRequest) GetRaw() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Raw
}

// GetRawOk returns a tuple with the Raw field value
// and a boolean to check if the value has been set.
func (o *ReplyRequest) GetRawOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Raw, true
}

// SetRaw sets field value
func (o *ReplyRequest) SetRaw(v string) {
	o.Raw = v
}

func (o ReplyRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplyRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowNotification) {
		toSerialize["allowNotification"] = o.AllowNotification
	}
	toSerialize["content"] = o.Content
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.QuoteReply) {
		toSerialize["quoteReply"] = o.QuoteReply
	}
	toSerialize["raw"] = o.Raw
	return toSerialize, nil
}

func (o *ReplyRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"content",
		"raw",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReplyRequest := _ReplyRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReplyRequest)

	if err != nil {
		return err
	}

	*o = ReplyRequest(varReplyRequest)

	return err
}

type NullableReplyRequest struct {
	value *ReplyRequest
	isSet bool
}

func (v NullableReplyRequest) Get() *ReplyRequest {
	return v.value
}

func (v *NullableReplyRequest) Set(val *ReplyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReplyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReplyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplyRequest(val *ReplyRequest) *NullableReplyRequest {
	return &NullableReplyRequest{value: val, isSet: true}
}

func (v NullableReplyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


