/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package console_sdk

import (
	"encoding/json"
	"time"
)

// checks if the BackupFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackupFile{}

// BackupFile struct for BackupFile
type BackupFile struct {
	Filename *string `json:"filename,omitempty"`
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`
	Size *int64 `json:"size,omitempty"`
}

// NewBackupFile instantiates a new BackupFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupFile() *BackupFile {
	this := BackupFile{}
	return &this
}

// NewBackupFileWithDefaults instantiates a new BackupFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupFileWithDefaults() *BackupFile {
	this := BackupFile{}
	return &this
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *BackupFile) GetFilename() string {
	if o == nil || IsNil(o.Filename) {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupFile) GetFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.Filename) {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *BackupFile) HasFilename() bool {
	if o != nil && !IsNil(o.Filename) {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *BackupFile) SetFilename(v string) {
	o.Filename = &v
}

// GetLastModifiedTime returns the LastModifiedTime field value if set, zero value otherwise.
func (o *BackupFile) GetLastModifiedTime() time.Time {
	if o == nil || IsNil(o.LastModifiedTime) {
		var ret time.Time
		return ret
	}
	return *o.LastModifiedTime
}

// GetLastModifiedTimeOk returns a tuple with the LastModifiedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupFile) GetLastModifiedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastModifiedTime) {
		return nil, false
	}
	return o.LastModifiedTime, true
}

// HasLastModifiedTime returns a boolean if a field has been set.
func (o *BackupFile) HasLastModifiedTime() bool {
	if o != nil && !IsNil(o.LastModifiedTime) {
		return true
	}

	return false
}

// SetLastModifiedTime gets a reference to the given time.Time and assigns it to the LastModifiedTime field.
func (o *BackupFile) SetLastModifiedTime(v time.Time) {
	o.LastModifiedTime = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *BackupFile) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupFile) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *BackupFile) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *BackupFile) SetSize(v int64) {
	o.Size = &v
}

func (o BackupFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackupFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Filename) {
		toSerialize["filename"] = o.Filename
	}
	if !IsNil(o.LastModifiedTime) {
		toSerialize["lastModifiedTime"] = o.LastModifiedTime
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	return toSerialize, nil
}

type NullableBackupFile struct {
	value *BackupFile
	isSet bool
}

func (v NullableBackupFile) Get() *BackupFile {
	return v.value
}

func (v *NullableBackupFile) Set(val *BackupFile) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupFile) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupFile(val *BackupFile) *NullableBackupFile {
	return &NullableBackupFile{value: val, isSet: true}
}

func (v NullableBackupFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


