/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package console_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostRequest{}

// PostRequest struct for PostRequest
type PostRequest struct {
	Content *ContentUpdateParam `json:"content,omitempty"`
	Post Post `json:"post"`
}

type _PostRequest PostRequest

// NewPostRequest instantiates a new PostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostRequest(post Post) *PostRequest {
	this := PostRequest{}
	this.Post = post
	return &this
}

// NewPostRequestWithDefaults instantiates a new PostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostRequestWithDefaults() *PostRequest {
	this := PostRequest{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *PostRequest) GetContent() ContentUpdateParam {
	if o == nil || IsNil(o.Content) {
		var ret ContentUpdateParam
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostRequest) GetContentOk() (*ContentUpdateParam, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *PostRequest) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given ContentUpdateParam and assigns it to the Content field.
func (o *PostRequest) SetContent(v ContentUpdateParam) {
	o.Content = &v
}

// GetPost returns the Post field value
func (o *PostRequest) GetPost() Post {
	if o == nil {
		var ret Post
		return ret
	}

	return o.Post
}

// GetPostOk returns a tuple with the Post field value
// and a boolean to check if the value has been set.
func (o *PostRequest) GetPostOk() (*Post, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Post, true
}

// SetPost sets field value
func (o *PostRequest) SetPost(v Post) {
	o.Post = v
}

func (o PostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	toSerialize["post"] = o.Post
	return toSerialize, nil
}

func (o *PostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"post",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostRequest := _PostRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostRequest)

	if err != nil {
		return err
	}

	*o = PostRequest(varPostRequest)

	return err
}

type NullablePostRequest struct {
	value *PostRequest
	isSet bool
}

func (v NullablePostRequest) Get() *PostRequest {
	return v.value
}

func (v *NullablePostRequest) Set(val *PostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostRequest(val *PostRequest) *NullablePostRequest {
	return &NullablePostRequest{value: val, isSet: true}
}

func (v NullablePostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


