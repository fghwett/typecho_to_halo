/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package console_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListedPost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListedPost{}

// ListedPost A chunk of items.
type ListedPost struct {
	Categories []Category `json:"categories"`
	Contributors []Contributor `json:"contributors"`
	Owner Contributor `json:"owner"`
	Post Post `json:"post"`
	Stats Stats `json:"stats"`
	Tags []Tag `json:"tags"`
}

type _ListedPost ListedPost

// NewListedPost instantiates a new ListedPost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListedPost(categories []Category, contributors []Contributor, owner Contributor, post Post, stats Stats, tags []Tag) *ListedPost {
	this := ListedPost{}
	this.Categories = categories
	this.Contributors = contributors
	this.Owner = owner
	this.Post = post
	this.Stats = stats
	this.Tags = tags
	return &this
}

// NewListedPostWithDefaults instantiates a new ListedPost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListedPostWithDefaults() *ListedPost {
	this := ListedPost{}
	return &this
}

// GetCategories returns the Categories field value
func (o *ListedPost) GetCategories() []Category {
	if o == nil {
		var ret []Category
		return ret
	}

	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value
// and a boolean to check if the value has been set.
func (o *ListedPost) GetCategoriesOk() ([]Category, bool) {
	if o == nil {
		return nil, false
	}
	return o.Categories, true
}

// SetCategories sets field value
func (o *ListedPost) SetCategories(v []Category) {
	o.Categories = v
}

// GetContributors returns the Contributors field value
func (o *ListedPost) GetContributors() []Contributor {
	if o == nil {
		var ret []Contributor
		return ret
	}

	return o.Contributors
}

// GetContributorsOk returns a tuple with the Contributors field value
// and a boolean to check if the value has been set.
func (o *ListedPost) GetContributorsOk() ([]Contributor, bool) {
	if o == nil {
		return nil, false
	}
	return o.Contributors, true
}

// SetContributors sets field value
func (o *ListedPost) SetContributors(v []Contributor) {
	o.Contributors = v
}

// GetOwner returns the Owner field value
func (o *ListedPost) GetOwner() Contributor {
	if o == nil {
		var ret Contributor
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *ListedPost) GetOwnerOk() (*Contributor, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *ListedPost) SetOwner(v Contributor) {
	o.Owner = v
}

// GetPost returns the Post field value
func (o *ListedPost) GetPost() Post {
	if o == nil {
		var ret Post
		return ret
	}

	return o.Post
}

// GetPostOk returns a tuple with the Post field value
// and a boolean to check if the value has been set.
func (o *ListedPost) GetPostOk() (*Post, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Post, true
}

// SetPost sets field value
func (o *ListedPost) SetPost(v Post) {
	o.Post = v
}

// GetStats returns the Stats field value
func (o *ListedPost) GetStats() Stats {
	if o == nil {
		var ret Stats
		return ret
	}

	return o.Stats
}

// GetStatsOk returns a tuple with the Stats field value
// and a boolean to check if the value has been set.
func (o *ListedPost) GetStatsOk() (*Stats, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stats, true
}

// SetStats sets field value
func (o *ListedPost) SetStats(v Stats) {
	o.Stats = v
}

// GetTags returns the Tags field value
func (o *ListedPost) GetTags() []Tag {
	if o == nil {
		var ret []Tag
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *ListedPost) GetTagsOk() ([]Tag, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *ListedPost) SetTags(v []Tag) {
	o.Tags = v
}

func (o ListedPost) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListedPost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["categories"] = o.Categories
	toSerialize["contributors"] = o.Contributors
	toSerialize["owner"] = o.Owner
	toSerialize["post"] = o.Post
	toSerialize["stats"] = o.Stats
	toSerialize["tags"] = o.Tags
	return toSerialize, nil
}

func (o *ListedPost) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"categories",
		"contributors",
		"owner",
		"post",
		"stats",
		"tags",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListedPost := _ListedPost{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListedPost)

	if err != nil {
		return err
	}

	*o = ListedPost(varListedPost)

	return err
}

type NullableListedPost struct {
	value *ListedPost
	isSet bool
}

func (v NullableListedPost) Get() *ListedPost {
	return v.value
}

func (v *NullableListedPost) Set(val *ListedPost) {
	v.value = val
	v.isSet = true
}

func (v NullableListedPost) IsSet() bool {
	return v.isSet
}

func (v *NullableListedPost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListedPost(val *ListedPost) *NullableListedPost {
	return &NullableListedPost{value: val, isSet: true}
}

func (v NullableListedPost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListedPost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


