/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package console_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MoveOperation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MoveOperation{}

// MoveOperation struct for MoveOperation
type MoveOperation struct {
	// A JSON Pointer path pointing to the location to move/copy from.
	From string `json:"from" validate:"regexp=^(\\/[^\\/~]*(~[01][^\\/~]*)*)*$"`
	Op string `json:"op"`
	// A JSON Pointer path pointing to the location to move/copy from.
	Path string `json:"path" validate:"regexp=^(\\/[^\\/~]*(~[01][^\\/~]*)*)*$"`
}

type _MoveOperation MoveOperation

// NewMoveOperation instantiates a new MoveOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMoveOperation(from string, op string, path string) *MoveOperation {
	this := MoveOperation{}
	this.From = from
	this.Op = op
	this.Path = path
	return &this
}

// NewMoveOperationWithDefaults instantiates a new MoveOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMoveOperationWithDefaults() *MoveOperation {
	this := MoveOperation{}
	return &this
}

// GetFrom returns the From field value
func (o *MoveOperation) GetFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *MoveOperation) GetFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *MoveOperation) SetFrom(v string) {
	o.From = v
}

// GetOp returns the Op field value
func (o *MoveOperation) GetOp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Op
}

// GetOpOk returns a tuple with the Op field value
// and a boolean to check if the value has been set.
func (o *MoveOperation) GetOpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Op, true
}

// SetOp sets field value
func (o *MoveOperation) SetOp(v string) {
	o.Op = v
}

// GetPath returns the Path field value
func (o *MoveOperation) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *MoveOperation) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *MoveOperation) SetPath(v string) {
	o.Path = v
}

func (o MoveOperation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MoveOperation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["from"] = o.From
	toSerialize["op"] = o.Op
	toSerialize["path"] = o.Path
	return toSerialize, nil
}

func (o *MoveOperation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"from",
		"op",
		"path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMoveOperation := _MoveOperation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMoveOperation)

	if err != nil {
		return err
	}

	*o = MoveOperation(varMoveOperation)

	return err
}

type NullableMoveOperation struct {
	value *MoveOperation
	isSet bool
}

func (v NullableMoveOperation) Get() *MoveOperation {
	return v.value
}

func (v *NullableMoveOperation) Set(val *MoveOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableMoveOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableMoveOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMoveOperation(val *MoveOperation) *NullableMoveOperation {
	return &NullableMoveOperation{value: val, isSet: true}
}

func (v NullableMoveOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMoveOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


