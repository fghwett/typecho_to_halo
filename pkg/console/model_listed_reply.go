/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package console_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListedReply type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListedReply{}

// ListedReply A chunk of items.
type ListedReply struct {
	Owner OwnerInfo `json:"owner"`
	Reply Reply `json:"reply"`
	Stats CommentStats `json:"stats"`
}

type _ListedReply ListedReply

// NewListedReply instantiates a new ListedReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListedReply(owner OwnerInfo, reply Reply, stats CommentStats) *ListedReply {
	this := ListedReply{}
	this.Owner = owner
	this.Reply = reply
	this.Stats = stats
	return &this
}

// NewListedReplyWithDefaults instantiates a new ListedReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListedReplyWithDefaults() *ListedReply {
	this := ListedReply{}
	return &this
}

// GetOwner returns the Owner field value
func (o *ListedReply) GetOwner() OwnerInfo {
	if o == nil {
		var ret OwnerInfo
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *ListedReply) GetOwnerOk() (*OwnerInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *ListedReply) SetOwner(v OwnerInfo) {
	o.Owner = v
}

// GetReply returns the Reply field value
func (o *ListedReply) GetReply() Reply {
	if o == nil {
		var ret Reply
		return ret
	}

	return o.Reply
}

// GetReplyOk returns a tuple with the Reply field value
// and a boolean to check if the value has been set.
func (o *ListedReply) GetReplyOk() (*Reply, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reply, true
}

// SetReply sets field value
func (o *ListedReply) SetReply(v Reply) {
	o.Reply = v
}

// GetStats returns the Stats field value
func (o *ListedReply) GetStats() CommentStats {
	if o == nil {
		var ret CommentStats
		return ret
	}

	return o.Stats
}

// GetStatsOk returns a tuple with the Stats field value
// and a boolean to check if the value has been set.
func (o *ListedReply) GetStatsOk() (*CommentStats, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stats, true
}

// SetStats sets field value
func (o *ListedReply) SetStats(v CommentStats) {
	o.Stats = v
}

func (o ListedReply) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListedReply) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["owner"] = o.Owner
	toSerialize["reply"] = o.Reply
	toSerialize["stats"] = o.Stats
	return toSerialize, nil
}

func (o *ListedReply) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"owner",
		"reply",
		"stats",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListedReply := _ListedReply{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListedReply)

	if err != nil {
		return err
	}

	*o = ListedReply(varListedReply)

	return err
}

type NullableListedReply struct {
	value *ListedReply
	isSet bool
}

func (v NullableListedReply) Get() *ListedReply {
	return v.value
}

func (v *NullableListedReply) Set(val *ListedReply) {
	v.value = val
	v.isSet = true
}

func (v NullableListedReply) IsSet() bool {
	return v.isSet
}

func (v *NullableListedReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListedReply(val *ListedReply) *NullableListedReply {
	return &NullableListedReply{value: val, isSet: true}
}

func (v NullableListedReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListedReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


