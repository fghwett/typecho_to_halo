/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package console_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type IndicesV1alpha1ConsoleAPI interface {

	/*
	BuildPostIndices Method for BuildPostIndices

	Build or rebuild post indices for full text search. This method is deprecated, please use POST /indices/-/rebuild instead.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiBuildPostIndicesRequest

	Deprecated
	*/
	BuildPostIndices(ctx context.Context) ApiBuildPostIndicesRequest

	// BuildPostIndicesExecute executes the request
	// Deprecated
	BuildPostIndicesExecute(r ApiBuildPostIndicesRequest) (*http.Response, error)

	/*
	RebuildAllIndices Method for RebuildAllIndices

	Rebuild all indices

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiRebuildAllIndicesRequest
	*/
	RebuildAllIndices(ctx context.Context) ApiRebuildAllIndicesRequest

	// RebuildAllIndicesExecute executes the request
	RebuildAllIndicesExecute(r ApiRebuildAllIndicesRequest) (*http.Response, error)
}

// IndicesV1alpha1ConsoleAPIService IndicesV1alpha1ConsoleAPI service
type IndicesV1alpha1ConsoleAPIService service

type ApiBuildPostIndicesRequest struct {
	ctx context.Context
	ApiService IndicesV1alpha1ConsoleAPI
}

func (r ApiBuildPostIndicesRequest) Execute() (*http.Response, error) {
	return r.ApiService.BuildPostIndicesExecute(r)
}

/*
BuildPostIndices Method for BuildPostIndices

Build or rebuild post indices for full text search. This method is deprecated, please use POST /indices/-/rebuild instead.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBuildPostIndicesRequest

Deprecated
*/
func (a *IndicesV1alpha1ConsoleAPIService) BuildPostIndices(ctx context.Context) ApiBuildPostIndicesRequest {
	return ApiBuildPostIndicesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
// Deprecated
func (a *IndicesV1alpha1ConsoleAPIService) BuildPostIndicesExecute(r ApiBuildPostIndicesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IndicesV1alpha1ConsoleAPIService.BuildPostIndices")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.console.halo.run/v1alpha1/indices/post"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiRebuildAllIndicesRequest struct {
	ctx context.Context
	ApiService IndicesV1alpha1ConsoleAPI
}

func (r ApiRebuildAllIndicesRequest) Execute() (*http.Response, error) {
	return r.ApiService.RebuildAllIndicesExecute(r)
}

/*
RebuildAllIndices Method for RebuildAllIndices

Rebuild all indices

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRebuildAllIndicesRequest
*/
func (a *IndicesV1alpha1ConsoleAPIService) RebuildAllIndices(ctx context.Context) ApiRebuildAllIndicesRequest {
	return ApiRebuildAllIndicesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *IndicesV1alpha1ConsoleAPIService) RebuildAllIndicesExecute(r ApiRebuildAllIndicesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IndicesV1alpha1ConsoleAPIService.RebuildAllIndices")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.console.halo.run/v1alpha1/indices/-/rebuild"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
