/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package console_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type SinglePageV1alpha1ConsoleAPI interface {

	/*
	DeleteSinglePageContent Method for DeleteSinglePageContent

	Delete a content for post.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name
	@return ApiDeleteSinglePageContentRequest
	*/
	DeleteSinglePageContent(ctx context.Context, name string) ApiDeleteSinglePageContentRequest

	// DeleteSinglePageContentExecute executes the request
	//  @return ContentWrapper
	DeleteSinglePageContentExecute(r ApiDeleteSinglePageContentRequest) (*ContentWrapper, *http.Response, error)

	/*
	DraftSinglePage Method for DraftSinglePage

	Draft a single page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDraftSinglePageRequest
	*/
	DraftSinglePage(ctx context.Context) ApiDraftSinglePageRequest

	// DraftSinglePageExecute executes the request
	//  @return SinglePage
	DraftSinglePageExecute(r ApiDraftSinglePageRequest) (*SinglePage, *http.Response, error)

	/*
	FetchSinglePageContent Method for FetchSinglePageContent

	Fetch content of single page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name
	@return ApiFetchSinglePageContentRequest
	*/
	FetchSinglePageContent(ctx context.Context, name string) ApiFetchSinglePageContentRequest

	// FetchSinglePageContentExecute executes the request
	//  @return ContentWrapper
	FetchSinglePageContentExecute(r ApiFetchSinglePageContentRequest) (*ContentWrapper, *http.Response, error)

	/*
	FetchSinglePageHeadContent Method for FetchSinglePageHeadContent

	Fetch head content of single page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name
	@return ApiFetchSinglePageHeadContentRequest
	*/
	FetchSinglePageHeadContent(ctx context.Context, name string) ApiFetchSinglePageHeadContentRequest

	// FetchSinglePageHeadContentExecute executes the request
	//  @return ContentWrapper
	FetchSinglePageHeadContentExecute(r ApiFetchSinglePageHeadContentRequest) (*ContentWrapper, *http.Response, error)

	/*
	FetchSinglePageReleaseContent Method for FetchSinglePageReleaseContent

	Fetch release content of single page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name
	@return ApiFetchSinglePageReleaseContentRequest
	*/
	FetchSinglePageReleaseContent(ctx context.Context, name string) ApiFetchSinglePageReleaseContentRequest

	// FetchSinglePageReleaseContentExecute executes the request
	//  @return ContentWrapper
	FetchSinglePageReleaseContentExecute(r ApiFetchSinglePageReleaseContentRequest) (*ContentWrapper, *http.Response, error)

	/*
	ListSinglePageSnapshots Method for ListSinglePageSnapshots

	List all snapshots for single page content.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name
	@return ApiListSinglePageSnapshotsRequest
	*/
	ListSinglePageSnapshots(ctx context.Context, name string) ApiListSinglePageSnapshotsRequest

	// ListSinglePageSnapshotsExecute executes the request
	//  @return []ListedSnapshotDto
	ListSinglePageSnapshotsExecute(r ApiListSinglePageSnapshotsRequest) ([]ListedSnapshotDto, *http.Response, error)

	/*
	ListSinglePages Method for ListSinglePages

	List single pages.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListSinglePagesRequest
	*/
	ListSinglePages(ctx context.Context) ApiListSinglePagesRequest

	// ListSinglePagesExecute executes the request
	//  @return ListedSinglePageList
	ListSinglePagesExecute(r ApiListSinglePagesRequest) (*ListedSinglePageList, *http.Response, error)

	/*
	PublishSinglePage Method for PublishSinglePage

	Publish a single page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name
	@return ApiPublishSinglePageRequest
	*/
	PublishSinglePage(ctx context.Context, name string) ApiPublishSinglePageRequest

	// PublishSinglePageExecute executes the request
	//  @return SinglePage
	PublishSinglePageExecute(r ApiPublishSinglePageRequest) (*SinglePage, *http.Response, error)

	/*
	RevertToSpecifiedSnapshotForSinglePage Method for RevertToSpecifiedSnapshotForSinglePage

	Revert to specified snapshot for single page content.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name
	@return ApiRevertToSpecifiedSnapshotForSinglePageRequest
	*/
	RevertToSpecifiedSnapshotForSinglePage(ctx context.Context, name string) ApiRevertToSpecifiedSnapshotForSinglePageRequest

	// RevertToSpecifiedSnapshotForSinglePageExecute executes the request
	//  @return Post
	RevertToSpecifiedSnapshotForSinglePageExecute(r ApiRevertToSpecifiedSnapshotForSinglePageRequest) (*Post, *http.Response, error)

	/*
	UpdateDraftSinglePage Method for UpdateDraftSinglePage

	Update a single page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name
	@return ApiUpdateDraftSinglePageRequest
	*/
	UpdateDraftSinglePage(ctx context.Context, name string) ApiUpdateDraftSinglePageRequest

	// UpdateDraftSinglePageExecute executes the request
	//  @return SinglePage
	UpdateDraftSinglePageExecute(r ApiUpdateDraftSinglePageRequest) (*SinglePage, *http.Response, error)

	/*
	UpdateSinglePageContent Method for UpdateSinglePageContent

	Update a single page's content.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name
	@return ApiUpdateSinglePageContentRequest
	*/
	UpdateSinglePageContent(ctx context.Context, name string) ApiUpdateSinglePageContentRequest

	// UpdateSinglePageContentExecute executes the request
	//  @return Post
	UpdateSinglePageContentExecute(r ApiUpdateSinglePageContentRequest) (*Post, *http.Response, error)
}

// SinglePageV1alpha1ConsoleAPIService SinglePageV1alpha1ConsoleAPI service
type SinglePageV1alpha1ConsoleAPIService service

type ApiDeleteSinglePageContentRequest struct {
	ctx context.Context
	ApiService SinglePageV1alpha1ConsoleAPI
	name string
	snapshotName *string
}

func (r ApiDeleteSinglePageContentRequest) SnapshotName(snapshotName string) ApiDeleteSinglePageContentRequest {
	r.snapshotName = &snapshotName
	return r
}

func (r ApiDeleteSinglePageContentRequest) Execute() (*ContentWrapper, *http.Response, error) {
	return r.ApiService.DeleteSinglePageContentExecute(r)
}

/*
DeleteSinglePageContent Method for DeleteSinglePageContent

Delete a content for post.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiDeleteSinglePageContentRequest
*/
func (a *SinglePageV1alpha1ConsoleAPIService) DeleteSinglePageContent(ctx context.Context, name string) ApiDeleteSinglePageContentRequest {
	return ApiDeleteSinglePageContentRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return ContentWrapper
func (a *SinglePageV1alpha1ConsoleAPIService) DeleteSinglePageContentExecute(r ApiDeleteSinglePageContentRequest) (*ContentWrapper, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContentWrapper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SinglePageV1alpha1ConsoleAPIService.DeleteSinglePageContent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.console.halo.run/v1alpha1/singlepages/{name}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.snapshotName == nil {
		return localVarReturnValue, nil, reportError("snapshotName is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "snapshotName", r.snapshotName, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ContentWrapper
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDraftSinglePageRequest struct {
	ctx context.Context
	ApiService SinglePageV1alpha1ConsoleAPI
	singlePageRequest *SinglePageRequest
}

func (r ApiDraftSinglePageRequest) SinglePageRequest(singlePageRequest SinglePageRequest) ApiDraftSinglePageRequest {
	r.singlePageRequest = &singlePageRequest
	return r
}

func (r ApiDraftSinglePageRequest) Execute() (*SinglePage, *http.Response, error) {
	return r.ApiService.DraftSinglePageExecute(r)
}

/*
DraftSinglePage Method for DraftSinglePage

Draft a single page.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDraftSinglePageRequest
*/
func (a *SinglePageV1alpha1ConsoleAPIService) DraftSinglePage(ctx context.Context) ApiDraftSinglePageRequest {
	return ApiDraftSinglePageRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SinglePage
func (a *SinglePageV1alpha1ConsoleAPIService) DraftSinglePageExecute(r ApiDraftSinglePageRequest) (*SinglePage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SinglePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SinglePageV1alpha1ConsoleAPIService.DraftSinglePage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.console.halo.run/v1alpha1/singlepages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.singlePageRequest == nil {
		return localVarReturnValue, nil, reportError("singlePageRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.singlePageRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SinglePage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchSinglePageContentRequest struct {
	ctx context.Context
	ApiService SinglePageV1alpha1ConsoleAPI
	name string
	snapshotName *string
}

func (r ApiFetchSinglePageContentRequest) SnapshotName(snapshotName string) ApiFetchSinglePageContentRequest {
	r.snapshotName = &snapshotName
	return r
}

func (r ApiFetchSinglePageContentRequest) Execute() (*ContentWrapper, *http.Response, error) {
	return r.ApiService.FetchSinglePageContentExecute(r)
}

/*
FetchSinglePageContent Method for FetchSinglePageContent

Fetch content of single page.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiFetchSinglePageContentRequest
*/
func (a *SinglePageV1alpha1ConsoleAPIService) FetchSinglePageContent(ctx context.Context, name string) ApiFetchSinglePageContentRequest {
	return ApiFetchSinglePageContentRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return ContentWrapper
func (a *SinglePageV1alpha1ConsoleAPIService) FetchSinglePageContentExecute(r ApiFetchSinglePageContentRequest) (*ContentWrapper, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContentWrapper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SinglePageV1alpha1ConsoleAPIService.FetchSinglePageContent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.console.halo.run/v1alpha1/singlepages/{name}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.snapshotName == nil {
		return localVarReturnValue, nil, reportError("snapshotName is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "snapshotName", r.snapshotName, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ContentWrapper
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchSinglePageHeadContentRequest struct {
	ctx context.Context
	ApiService SinglePageV1alpha1ConsoleAPI
	name string
}

func (r ApiFetchSinglePageHeadContentRequest) Execute() (*ContentWrapper, *http.Response, error) {
	return r.ApiService.FetchSinglePageHeadContentExecute(r)
}

/*
FetchSinglePageHeadContent Method for FetchSinglePageHeadContent

Fetch head content of single page.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiFetchSinglePageHeadContentRequest
*/
func (a *SinglePageV1alpha1ConsoleAPIService) FetchSinglePageHeadContent(ctx context.Context, name string) ApiFetchSinglePageHeadContentRequest {
	return ApiFetchSinglePageHeadContentRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return ContentWrapper
func (a *SinglePageV1alpha1ConsoleAPIService) FetchSinglePageHeadContentExecute(r ApiFetchSinglePageHeadContentRequest) (*ContentWrapper, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContentWrapper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SinglePageV1alpha1ConsoleAPIService.FetchSinglePageHeadContent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.console.halo.run/v1alpha1/singlepages/{name}/head-content"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ContentWrapper
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchSinglePageReleaseContentRequest struct {
	ctx context.Context
	ApiService SinglePageV1alpha1ConsoleAPI
	name string
}

func (r ApiFetchSinglePageReleaseContentRequest) Execute() (*ContentWrapper, *http.Response, error) {
	return r.ApiService.FetchSinglePageReleaseContentExecute(r)
}

/*
FetchSinglePageReleaseContent Method for FetchSinglePageReleaseContent

Fetch release content of single page.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiFetchSinglePageReleaseContentRequest
*/
func (a *SinglePageV1alpha1ConsoleAPIService) FetchSinglePageReleaseContent(ctx context.Context, name string) ApiFetchSinglePageReleaseContentRequest {
	return ApiFetchSinglePageReleaseContentRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return ContentWrapper
func (a *SinglePageV1alpha1ConsoleAPIService) FetchSinglePageReleaseContentExecute(r ApiFetchSinglePageReleaseContentRequest) (*ContentWrapper, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContentWrapper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SinglePageV1alpha1ConsoleAPIService.FetchSinglePageReleaseContent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.console.halo.run/v1alpha1/singlepages/{name}/release-content"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ContentWrapper
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListSinglePageSnapshotsRequest struct {
	ctx context.Context
	ApiService SinglePageV1alpha1ConsoleAPI
	name string
}

func (r ApiListSinglePageSnapshotsRequest) Execute() ([]ListedSnapshotDto, *http.Response, error) {
	return r.ApiService.ListSinglePageSnapshotsExecute(r)
}

/*
ListSinglePageSnapshots Method for ListSinglePageSnapshots

List all snapshots for single page content.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiListSinglePageSnapshotsRequest
*/
func (a *SinglePageV1alpha1ConsoleAPIService) ListSinglePageSnapshots(ctx context.Context, name string) ApiListSinglePageSnapshotsRequest {
	return ApiListSinglePageSnapshotsRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return []ListedSnapshotDto
func (a *SinglePageV1alpha1ConsoleAPIService) ListSinglePageSnapshotsExecute(r ApiListSinglePageSnapshotsRequest) ([]ListedSnapshotDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ListedSnapshotDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SinglePageV1alpha1ConsoleAPIService.ListSinglePageSnapshots")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.console.halo.run/v1alpha1/singlepages/{name}/snapshot"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v []ListedSnapshotDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListSinglePagesRequest struct {
	ctx context.Context
	ApiService SinglePageV1alpha1ConsoleAPI
	page *int32
	size *int32
	labelSelector *[]string
	fieldSelector *[]string
	sort *[]string
	contributor *[]string
	publishPhase *string
	visible *string
	keyword *string
}

// Page number. Default is 0.
func (r ApiListSinglePagesRequest) Page(page int32) ApiListSinglePagesRequest {
	r.page = &page
	return r
}

// Size number. Default is 0.
func (r ApiListSinglePagesRequest) Size(size int32) ApiListSinglePagesRequest {
	r.size = &size
	return r
}

// Label selector. e.g.: hidden!&#x3D;true
func (r ApiListSinglePagesRequest) LabelSelector(labelSelector []string) ApiListSinglePagesRequest {
	r.labelSelector = &labelSelector
	return r
}

// Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
func (r ApiListSinglePagesRequest) FieldSelector(fieldSelector []string) ApiListSinglePagesRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListSinglePagesRequest) Sort(sort []string) ApiListSinglePagesRequest {
	r.sort = &sort
	return r
}

// SinglePages filtered by contributor.
func (r ApiListSinglePagesRequest) Contributor(contributor []string) ApiListSinglePagesRequest {
	r.contributor = &contributor
	return r
}

// SinglePages filtered by publish phase.
func (r ApiListSinglePagesRequest) PublishPhase(publishPhase string) ApiListSinglePagesRequest {
	r.publishPhase = &publishPhase
	return r
}

// SinglePages filtered by visibility.
func (r ApiListSinglePagesRequest) Visible(visible string) ApiListSinglePagesRequest {
	r.visible = &visible
	return r
}

// SinglePages filtered by keyword.
func (r ApiListSinglePagesRequest) Keyword(keyword string) ApiListSinglePagesRequest {
	r.keyword = &keyword
	return r
}

func (r ApiListSinglePagesRequest) Execute() (*ListedSinglePageList, *http.Response, error) {
	return r.ApiService.ListSinglePagesExecute(r)
}

/*
ListSinglePages Method for ListSinglePages

List single pages.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListSinglePagesRequest
*/
func (a *SinglePageV1alpha1ConsoleAPIService) ListSinglePages(ctx context.Context) ApiListSinglePagesRequest {
	return ApiListSinglePagesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListedSinglePageList
func (a *SinglePageV1alpha1ConsoleAPIService) ListSinglePagesExecute(r ApiListSinglePagesRequest) (*ListedSinglePageList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListedSinglePageList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SinglePageV1alpha1ConsoleAPIService.ListSinglePages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.console.halo.run/v1alpha1/singlepages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.labelSelector != nil {
		t := *r.labelSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", t, "form", "multi")
		}
	}
	if r.fieldSelector != nil {
		t := *r.fieldSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", t, "form", "multi")
		}
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	if r.contributor != nil {
		t := *r.contributor
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contributor", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contributor", t, "form", "multi")
		}
	}
	if r.publishPhase != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "publishPhase", r.publishPhase, "form", "")
	}
	if r.visible != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "visible", r.visible, "form", "")
	}
	if r.keyword != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "keyword", r.keyword, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ListedSinglePageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPublishSinglePageRequest struct {
	ctx context.Context
	ApiService SinglePageV1alpha1ConsoleAPI
	name string
}

func (r ApiPublishSinglePageRequest) Execute() (*SinglePage, *http.Response, error) {
	return r.ApiService.PublishSinglePageExecute(r)
}

/*
PublishSinglePage Method for PublishSinglePage

Publish a single page.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiPublishSinglePageRequest
*/
func (a *SinglePageV1alpha1ConsoleAPIService) PublishSinglePage(ctx context.Context, name string) ApiPublishSinglePageRequest {
	return ApiPublishSinglePageRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return SinglePage
func (a *SinglePageV1alpha1ConsoleAPIService) PublishSinglePageExecute(r ApiPublishSinglePageRequest) (*SinglePage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SinglePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SinglePageV1alpha1ConsoleAPIService.PublishSinglePage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.console.halo.run/v1alpha1/singlepages/{name}/publish"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SinglePage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRevertToSpecifiedSnapshotForSinglePageRequest struct {
	ctx context.Context
	ApiService SinglePageV1alpha1ConsoleAPI
	name string
	revertSnapshotForSingleParam *RevertSnapshotForSingleParam
}

func (r ApiRevertToSpecifiedSnapshotForSinglePageRequest) RevertSnapshotForSingleParam(revertSnapshotForSingleParam RevertSnapshotForSingleParam) ApiRevertToSpecifiedSnapshotForSinglePageRequest {
	r.revertSnapshotForSingleParam = &revertSnapshotForSingleParam
	return r
}

func (r ApiRevertToSpecifiedSnapshotForSinglePageRequest) Execute() (*Post, *http.Response, error) {
	return r.ApiService.RevertToSpecifiedSnapshotForSinglePageExecute(r)
}

/*
RevertToSpecifiedSnapshotForSinglePage Method for RevertToSpecifiedSnapshotForSinglePage

Revert to specified snapshot for single page content.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiRevertToSpecifiedSnapshotForSinglePageRequest
*/
func (a *SinglePageV1alpha1ConsoleAPIService) RevertToSpecifiedSnapshotForSinglePage(ctx context.Context, name string) ApiRevertToSpecifiedSnapshotForSinglePageRequest {
	return ApiRevertToSpecifiedSnapshotForSinglePageRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return Post
func (a *SinglePageV1alpha1ConsoleAPIService) RevertToSpecifiedSnapshotForSinglePageExecute(r ApiRevertToSpecifiedSnapshotForSinglePageRequest) (*Post, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Post
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SinglePageV1alpha1ConsoleAPIService.RevertToSpecifiedSnapshotForSinglePage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.console.halo.run/v1alpha1/singlepages/{name}/revert-content"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.revertSnapshotForSingleParam == nil {
		return localVarReturnValue, nil, reportError("revertSnapshotForSingleParam is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.revertSnapshotForSingleParam
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Post
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateDraftSinglePageRequest struct {
	ctx context.Context
	ApiService SinglePageV1alpha1ConsoleAPI
	name string
	singlePageRequest *SinglePageRequest
}

func (r ApiUpdateDraftSinglePageRequest) SinglePageRequest(singlePageRequest SinglePageRequest) ApiUpdateDraftSinglePageRequest {
	r.singlePageRequest = &singlePageRequest
	return r
}

func (r ApiUpdateDraftSinglePageRequest) Execute() (*SinglePage, *http.Response, error) {
	return r.ApiService.UpdateDraftSinglePageExecute(r)
}

/*
UpdateDraftSinglePage Method for UpdateDraftSinglePage

Update a single page.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiUpdateDraftSinglePageRequest
*/
func (a *SinglePageV1alpha1ConsoleAPIService) UpdateDraftSinglePage(ctx context.Context, name string) ApiUpdateDraftSinglePageRequest {
	return ApiUpdateDraftSinglePageRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return SinglePage
func (a *SinglePageV1alpha1ConsoleAPIService) UpdateDraftSinglePageExecute(r ApiUpdateDraftSinglePageRequest) (*SinglePage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SinglePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SinglePageV1alpha1ConsoleAPIService.UpdateDraftSinglePage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.console.halo.run/v1alpha1/singlepages/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.singlePageRequest == nil {
		return localVarReturnValue, nil, reportError("singlePageRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.singlePageRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SinglePage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateSinglePageContentRequest struct {
	ctx context.Context
	ApiService SinglePageV1alpha1ConsoleAPI
	name string
	content *Content
}

func (r ApiUpdateSinglePageContentRequest) Content(content Content) ApiUpdateSinglePageContentRequest {
	r.content = &content
	return r
}

func (r ApiUpdateSinglePageContentRequest) Execute() (*Post, *http.Response, error) {
	return r.ApiService.UpdateSinglePageContentExecute(r)
}

/*
UpdateSinglePageContent Method for UpdateSinglePageContent

Update a single page's content.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiUpdateSinglePageContentRequest
*/
func (a *SinglePageV1alpha1ConsoleAPIService) UpdateSinglePageContent(ctx context.Context, name string) ApiUpdateSinglePageContentRequest {
	return ApiUpdateSinglePageContentRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return Post
func (a *SinglePageV1alpha1ConsoleAPIService) UpdateSinglePageContentExecute(r ApiUpdateSinglePageContentRequest) (*Post, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Post
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SinglePageV1alpha1ConsoleAPIService.UpdateSinglePageContent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.console.halo.run/v1alpha1/singlepages/{name}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.content == nil {
		return localVarReturnValue, nil, reportError("content is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.content
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Post
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
