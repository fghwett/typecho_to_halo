/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package console_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
	"os"
)


type AttachmentV1alpha1ConsoleAPI interface {

	/*
	ExternalTransferAttachment Method for ExternalTransferAttachment

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExternalTransferAttachmentRequest
	*/
	ExternalTransferAttachment(ctx context.Context) ApiExternalTransferAttachmentRequest

	// ExternalTransferAttachmentExecute executes the request
	//  @return Attachment
	ExternalTransferAttachmentExecute(r ApiExternalTransferAttachmentRequest) (*Attachment, *http.Response, error)

	/*
	SearchAttachments Method for SearchAttachments

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSearchAttachmentsRequest
	*/
	SearchAttachments(ctx context.Context) ApiSearchAttachmentsRequest

	// SearchAttachmentsExecute executes the request
	//  @return AttachmentList
	SearchAttachmentsExecute(r ApiSearchAttachmentsRequest) (*AttachmentList, *http.Response, error)

	/*
	UploadAttachment Method for UploadAttachment

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiUploadAttachmentRequest
	*/
	UploadAttachment(ctx context.Context) ApiUploadAttachmentRequest

	// UploadAttachmentExecute executes the request
	//  @return Attachment
	UploadAttachmentExecute(r ApiUploadAttachmentRequest) (*Attachment, *http.Response, error)
}

// AttachmentV1alpha1ConsoleAPIService AttachmentV1alpha1ConsoleAPI service
type AttachmentV1alpha1ConsoleAPIService service

type ApiExternalTransferAttachmentRequest struct {
	ctx context.Context
	ApiService AttachmentV1alpha1ConsoleAPI
	uploadFromUrlRequest *UploadFromUrlRequest
}

func (r ApiExternalTransferAttachmentRequest) UploadFromUrlRequest(uploadFromUrlRequest UploadFromUrlRequest) ApiExternalTransferAttachmentRequest {
	r.uploadFromUrlRequest = &uploadFromUrlRequest
	return r
}

func (r ApiExternalTransferAttachmentRequest) Execute() (*Attachment, *http.Response, error) {
	return r.ApiService.ExternalTransferAttachmentExecute(r)
}

/*
ExternalTransferAttachment Method for ExternalTransferAttachment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExternalTransferAttachmentRequest
*/
func (a *AttachmentV1alpha1ConsoleAPIService) ExternalTransferAttachment(ctx context.Context) ApiExternalTransferAttachmentRequest {
	return ApiExternalTransferAttachmentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Attachment
func (a *AttachmentV1alpha1ConsoleAPIService) ExternalTransferAttachmentExecute(r ApiExternalTransferAttachmentRequest) (*Attachment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Attachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AttachmentV1alpha1ConsoleAPIService.ExternalTransferAttachment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.console.halo.run/v1alpha1/attachments/-/upload-from-url"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.uploadFromUrlRequest == nil {
		return localVarReturnValue, nil, reportError("uploadFromUrlRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.uploadFromUrlRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Attachment
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchAttachmentsRequest struct {
	ctx context.Context
	ApiService AttachmentV1alpha1ConsoleAPI
	page *int32
	size *int32
	labelSelector *[]string
	fieldSelector *[]string
	sort *[]string
	ungrouped *bool
	keyword *string
	accepts *[]string
}

// Page number. Default is 0.
func (r ApiSearchAttachmentsRequest) Page(page int32) ApiSearchAttachmentsRequest {
	r.page = &page
	return r
}

// Size number. Default is 0.
func (r ApiSearchAttachmentsRequest) Size(size int32) ApiSearchAttachmentsRequest {
	r.size = &size
	return r
}

// Label selector. e.g.: hidden!&#x3D;true
func (r ApiSearchAttachmentsRequest) LabelSelector(labelSelector []string) ApiSearchAttachmentsRequest {
	r.labelSelector = &labelSelector
	return r
}

// Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
func (r ApiSearchAttachmentsRequest) FieldSelector(fieldSelector []string) ApiSearchAttachmentsRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiSearchAttachmentsRequest) Sort(sort []string) ApiSearchAttachmentsRequest {
	r.sort = &sort
	return r
}

// Filter attachments without group. This parameter will ignore group parameter.
func (r ApiSearchAttachmentsRequest) Ungrouped(ungrouped bool) ApiSearchAttachmentsRequest {
	r.ungrouped = &ungrouped
	return r
}

// Keyword for searching.
func (r ApiSearchAttachmentsRequest) Keyword(keyword string) ApiSearchAttachmentsRequest {
	r.keyword = &keyword
	return r
}

// Acceptable media types.
func (r ApiSearchAttachmentsRequest) Accepts(accepts []string) ApiSearchAttachmentsRequest {
	r.accepts = &accepts
	return r
}

func (r ApiSearchAttachmentsRequest) Execute() (*AttachmentList, *http.Response, error) {
	return r.ApiService.SearchAttachmentsExecute(r)
}

/*
SearchAttachments Method for SearchAttachments

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchAttachmentsRequest
*/
func (a *AttachmentV1alpha1ConsoleAPIService) SearchAttachments(ctx context.Context) ApiSearchAttachmentsRequest {
	return ApiSearchAttachmentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AttachmentList
func (a *AttachmentV1alpha1ConsoleAPIService) SearchAttachmentsExecute(r ApiSearchAttachmentsRequest) (*AttachmentList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AttachmentList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AttachmentV1alpha1ConsoleAPIService.SearchAttachments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.console.halo.run/v1alpha1/attachments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.labelSelector != nil {
		t := *r.labelSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", t, "form", "multi")
		}
	}
	if r.fieldSelector != nil {
		t := *r.fieldSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", t, "form", "multi")
		}
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	if r.ungrouped != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ungrouped", r.ungrouped, "form", "")
	}
	if r.keyword != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "keyword", r.keyword, "form", "")
	}
	if r.accepts != nil {
		t := *r.accepts
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "accepts", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "accepts", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AttachmentList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUploadAttachmentRequest struct {
	ctx context.Context
	ApiService AttachmentV1alpha1ConsoleAPI
	file *os.File
	policyName *string
	groupName *string
}

func (r ApiUploadAttachmentRequest) File(file *os.File) ApiUploadAttachmentRequest {
	r.file = file
	return r
}

// Storage policy name
func (r ApiUploadAttachmentRequest) PolicyName(policyName string) ApiUploadAttachmentRequest {
	r.policyName = &policyName
	return r
}

// The name of the group to which the attachment belongs
func (r ApiUploadAttachmentRequest) GroupName(groupName string) ApiUploadAttachmentRequest {
	r.groupName = &groupName
	return r
}

func (r ApiUploadAttachmentRequest) Execute() (*Attachment, *http.Response, error) {
	return r.ApiService.UploadAttachmentExecute(r)
}

/*
UploadAttachment Method for UploadAttachment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUploadAttachmentRequest
*/
func (a *AttachmentV1alpha1ConsoleAPIService) UploadAttachment(ctx context.Context) ApiUploadAttachmentRequest {
	return ApiUploadAttachmentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Attachment
func (a *AttachmentV1alpha1ConsoleAPIService) UploadAttachmentExecute(r ApiUploadAttachmentRequest) (*Attachment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Attachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AttachmentV1alpha1ConsoleAPIService.UploadAttachment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.console.halo.run/v1alpha1/attachments/upload"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.file == nil {
		return localVarReturnValue, nil, reportError("file is required and must be specified")
	}
	if r.policyName == nil {
		return localVarReturnValue, nil, reportError("policyName is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var fileLocalVarFormFileName string
	var fileLocalVarFileName     string
	var fileLocalVarFileBytes    []byte

	fileLocalVarFormFileName = "file"
	fileLocalVarFile := r.file

	if fileLocalVarFile != nil {
		fbs, _ := io.ReadAll(fileLocalVarFile)

		fileLocalVarFileBytes = fbs
		fileLocalVarFileName = fileLocalVarFile.Name()
		fileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: fileLocalVarFileBytes, fileName: fileLocalVarFileName, formFileName: fileLocalVarFormFileName})
	}
	if r.groupName != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "groupName", r.groupName, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "policyName", r.policyName, "", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Attachment
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
