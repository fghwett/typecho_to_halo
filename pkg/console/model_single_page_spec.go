/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package console_sdk

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the SinglePageSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SinglePageSpec{}

// SinglePageSpec struct for SinglePageSpec
type SinglePageSpec struct {
	AllowComment bool `json:"allowComment"`
	BaseSnapshot *string `json:"baseSnapshot,omitempty"`
	Cover *string `json:"cover,omitempty"`
	Deleted bool `json:"deleted"`
	Excerpt Excerpt `json:"excerpt"`
	HeadSnapshot *string `json:"headSnapshot,omitempty"`
	HtmlMetas []map[string]string `json:"htmlMetas,omitempty"`
	Owner *string `json:"owner,omitempty"`
	Pinned bool `json:"pinned"`
	Priority int32 `json:"priority"`
	Publish bool `json:"publish"`
	PublishTime *time.Time `json:"publishTime,omitempty"`
	ReleaseSnapshot *string `json:"releaseSnapshot,omitempty"`
	Slug string `json:"slug"`
	Template *string `json:"template,omitempty"`
	Title string `json:"title"`
	Visible string `json:"visible"`
}

type _SinglePageSpec SinglePageSpec

// NewSinglePageSpec instantiates a new SinglePageSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSinglePageSpec(allowComment bool, deleted bool, excerpt Excerpt, pinned bool, priority int32, publish bool, slug string, title string, visible string) *SinglePageSpec {
	this := SinglePageSpec{}
	this.AllowComment = allowComment
	this.Deleted = deleted
	this.Excerpt = excerpt
	this.Pinned = pinned
	this.Priority = priority
	this.Publish = publish
	this.Slug = slug
	this.Title = title
	this.Visible = visible
	return &this
}

// NewSinglePageSpecWithDefaults instantiates a new SinglePageSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSinglePageSpecWithDefaults() *SinglePageSpec {
	this := SinglePageSpec{}
	var allowComment bool = true
	this.AllowComment = allowComment
	var deleted bool = false
	this.Deleted = deleted
	var pinned bool = false
	this.Pinned = pinned
	var priority int32 = 0
	this.Priority = priority
	var publish bool = false
	this.Publish = publish
	var visible string = "PUBLIC"
	this.Visible = visible
	return &this
}

// GetAllowComment returns the AllowComment field value
func (o *SinglePageSpec) GetAllowComment() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowComment
}

// GetAllowCommentOk returns a tuple with the AllowComment field value
// and a boolean to check if the value has been set.
func (o *SinglePageSpec) GetAllowCommentOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowComment, true
}

// SetAllowComment sets field value
func (o *SinglePageSpec) SetAllowComment(v bool) {
	o.AllowComment = v
}

// GetBaseSnapshot returns the BaseSnapshot field value if set, zero value otherwise.
func (o *SinglePageSpec) GetBaseSnapshot() string {
	if o == nil || IsNil(o.BaseSnapshot) {
		var ret string
		return ret
	}
	return *o.BaseSnapshot
}

// GetBaseSnapshotOk returns a tuple with the BaseSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SinglePageSpec) GetBaseSnapshotOk() (*string, bool) {
	if o == nil || IsNil(o.BaseSnapshot) {
		return nil, false
	}
	return o.BaseSnapshot, true
}

// HasBaseSnapshot returns a boolean if a field has been set.
func (o *SinglePageSpec) HasBaseSnapshot() bool {
	if o != nil && !IsNil(o.BaseSnapshot) {
		return true
	}

	return false
}

// SetBaseSnapshot gets a reference to the given string and assigns it to the BaseSnapshot field.
func (o *SinglePageSpec) SetBaseSnapshot(v string) {
	o.BaseSnapshot = &v
}

// GetCover returns the Cover field value if set, zero value otherwise.
func (o *SinglePageSpec) GetCover() string {
	if o == nil || IsNil(o.Cover) {
		var ret string
		return ret
	}
	return *o.Cover
}

// GetCoverOk returns a tuple with the Cover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SinglePageSpec) GetCoverOk() (*string, bool) {
	if o == nil || IsNil(o.Cover) {
		return nil, false
	}
	return o.Cover, true
}

// HasCover returns a boolean if a field has been set.
func (o *SinglePageSpec) HasCover() bool {
	if o != nil && !IsNil(o.Cover) {
		return true
	}

	return false
}

// SetCover gets a reference to the given string and assigns it to the Cover field.
func (o *SinglePageSpec) SetCover(v string) {
	o.Cover = &v
}

// GetDeleted returns the Deleted field value
func (o *SinglePageSpec) GetDeleted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value
// and a boolean to check if the value has been set.
func (o *SinglePageSpec) GetDeletedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deleted, true
}

// SetDeleted sets field value
func (o *SinglePageSpec) SetDeleted(v bool) {
	o.Deleted = v
}

// GetExcerpt returns the Excerpt field value
func (o *SinglePageSpec) GetExcerpt() Excerpt {
	if o == nil {
		var ret Excerpt
		return ret
	}

	return o.Excerpt
}

// GetExcerptOk returns a tuple with the Excerpt field value
// and a boolean to check if the value has been set.
func (o *SinglePageSpec) GetExcerptOk() (*Excerpt, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Excerpt, true
}

// SetExcerpt sets field value
func (o *SinglePageSpec) SetExcerpt(v Excerpt) {
	o.Excerpt = v
}

// GetHeadSnapshot returns the HeadSnapshot field value if set, zero value otherwise.
func (o *SinglePageSpec) GetHeadSnapshot() string {
	if o == nil || IsNil(o.HeadSnapshot) {
		var ret string
		return ret
	}
	return *o.HeadSnapshot
}

// GetHeadSnapshotOk returns a tuple with the HeadSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SinglePageSpec) GetHeadSnapshotOk() (*string, bool) {
	if o == nil || IsNil(o.HeadSnapshot) {
		return nil, false
	}
	return o.HeadSnapshot, true
}

// HasHeadSnapshot returns a boolean if a field has been set.
func (o *SinglePageSpec) HasHeadSnapshot() bool {
	if o != nil && !IsNil(o.HeadSnapshot) {
		return true
	}

	return false
}

// SetHeadSnapshot gets a reference to the given string and assigns it to the HeadSnapshot field.
func (o *SinglePageSpec) SetHeadSnapshot(v string) {
	o.HeadSnapshot = &v
}

// GetHtmlMetas returns the HtmlMetas field value if set, zero value otherwise.
func (o *SinglePageSpec) GetHtmlMetas() []map[string]string {
	if o == nil || IsNil(o.HtmlMetas) {
		var ret []map[string]string
		return ret
	}
	return o.HtmlMetas
}

// GetHtmlMetasOk returns a tuple with the HtmlMetas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SinglePageSpec) GetHtmlMetasOk() ([]map[string]string, bool) {
	if o == nil || IsNil(o.HtmlMetas) {
		return nil, false
	}
	return o.HtmlMetas, true
}

// HasHtmlMetas returns a boolean if a field has been set.
func (o *SinglePageSpec) HasHtmlMetas() bool {
	if o != nil && !IsNil(o.HtmlMetas) {
		return true
	}

	return false
}

// SetHtmlMetas gets a reference to the given []map[string]string and assigns it to the HtmlMetas field.
func (o *SinglePageSpec) SetHtmlMetas(v []map[string]string) {
	o.HtmlMetas = v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *SinglePageSpec) GetOwner() string {
	if o == nil || IsNil(o.Owner) {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SinglePageSpec) GetOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *SinglePageSpec) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *SinglePageSpec) SetOwner(v string) {
	o.Owner = &v
}

// GetPinned returns the Pinned field value
func (o *SinglePageSpec) GetPinned() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Pinned
}

// GetPinnedOk returns a tuple with the Pinned field value
// and a boolean to check if the value has been set.
func (o *SinglePageSpec) GetPinnedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pinned, true
}

// SetPinned sets field value
func (o *SinglePageSpec) SetPinned(v bool) {
	o.Pinned = v
}

// GetPriority returns the Priority field value
func (o *SinglePageSpec) GetPriority() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value
// and a boolean to check if the value has been set.
func (o *SinglePageSpec) GetPriorityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Priority, true
}

// SetPriority sets field value
func (o *SinglePageSpec) SetPriority(v int32) {
	o.Priority = v
}

// GetPublish returns the Publish field value
func (o *SinglePageSpec) GetPublish() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Publish
}

// GetPublishOk returns a tuple with the Publish field value
// and a boolean to check if the value has been set.
func (o *SinglePageSpec) GetPublishOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Publish, true
}

// SetPublish sets field value
func (o *SinglePageSpec) SetPublish(v bool) {
	o.Publish = v
}

// GetPublishTime returns the PublishTime field value if set, zero value otherwise.
func (o *SinglePageSpec) GetPublishTime() time.Time {
	if o == nil || IsNil(o.PublishTime) {
		var ret time.Time
		return ret
	}
	return *o.PublishTime
}

// GetPublishTimeOk returns a tuple with the PublishTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SinglePageSpec) GetPublishTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PublishTime) {
		return nil, false
	}
	return o.PublishTime, true
}

// HasPublishTime returns a boolean if a field has been set.
func (o *SinglePageSpec) HasPublishTime() bool {
	if o != nil && !IsNil(o.PublishTime) {
		return true
	}

	return false
}

// SetPublishTime gets a reference to the given time.Time and assigns it to the PublishTime field.
func (o *SinglePageSpec) SetPublishTime(v time.Time) {
	o.PublishTime = &v
}

// GetReleaseSnapshot returns the ReleaseSnapshot field value if set, zero value otherwise.
func (o *SinglePageSpec) GetReleaseSnapshot() string {
	if o == nil || IsNil(o.ReleaseSnapshot) {
		var ret string
		return ret
	}
	return *o.ReleaseSnapshot
}

// GetReleaseSnapshotOk returns a tuple with the ReleaseSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SinglePageSpec) GetReleaseSnapshotOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseSnapshot) {
		return nil, false
	}
	return o.ReleaseSnapshot, true
}

// HasReleaseSnapshot returns a boolean if a field has been set.
func (o *SinglePageSpec) HasReleaseSnapshot() bool {
	if o != nil && !IsNil(o.ReleaseSnapshot) {
		return true
	}

	return false
}

// SetReleaseSnapshot gets a reference to the given string and assigns it to the ReleaseSnapshot field.
func (o *SinglePageSpec) SetReleaseSnapshot(v string) {
	o.ReleaseSnapshot = &v
}

// GetSlug returns the Slug field value
func (o *SinglePageSpec) GetSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slug
}

// GetSlugOk returns a tuple with the Slug field value
// and a boolean to check if the value has been set.
func (o *SinglePageSpec) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slug, true
}

// SetSlug sets field value
func (o *SinglePageSpec) SetSlug(v string) {
	o.Slug = v
}

// GetTemplate returns the Template field value if set, zero value otherwise.
func (o *SinglePageSpec) GetTemplate() string {
	if o == nil || IsNil(o.Template) {
		var ret string
		return ret
	}
	return *o.Template
}

// GetTemplateOk returns a tuple with the Template field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SinglePageSpec) GetTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.Template) {
		return nil, false
	}
	return o.Template, true
}

// HasTemplate returns a boolean if a field has been set.
func (o *SinglePageSpec) HasTemplate() bool {
	if o != nil && !IsNil(o.Template) {
		return true
	}

	return false
}

// SetTemplate gets a reference to the given string and assigns it to the Template field.
func (o *SinglePageSpec) SetTemplate(v string) {
	o.Template = &v
}

// GetTitle returns the Title field value
func (o *SinglePageSpec) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *SinglePageSpec) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *SinglePageSpec) SetTitle(v string) {
	o.Title = v
}

// GetVisible returns the Visible field value
func (o *SinglePageSpec) GetVisible() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Visible
}

// GetVisibleOk returns a tuple with the Visible field value
// and a boolean to check if the value has been set.
func (o *SinglePageSpec) GetVisibleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Visible, true
}

// SetVisible sets field value
func (o *SinglePageSpec) SetVisible(v string) {
	o.Visible = v
}

func (o SinglePageSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SinglePageSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["allowComment"] = o.AllowComment
	if !IsNil(o.BaseSnapshot) {
		toSerialize["baseSnapshot"] = o.BaseSnapshot
	}
	if !IsNil(o.Cover) {
		toSerialize["cover"] = o.Cover
	}
	toSerialize["deleted"] = o.Deleted
	toSerialize["excerpt"] = o.Excerpt
	if !IsNil(o.HeadSnapshot) {
		toSerialize["headSnapshot"] = o.HeadSnapshot
	}
	if !IsNil(o.HtmlMetas) {
		toSerialize["htmlMetas"] = o.HtmlMetas
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	toSerialize["pinned"] = o.Pinned
	toSerialize["priority"] = o.Priority
	toSerialize["publish"] = o.Publish
	if !IsNil(o.PublishTime) {
		toSerialize["publishTime"] = o.PublishTime
	}
	if !IsNil(o.ReleaseSnapshot) {
		toSerialize["releaseSnapshot"] = o.ReleaseSnapshot
	}
	toSerialize["slug"] = o.Slug
	if !IsNil(o.Template) {
		toSerialize["template"] = o.Template
	}
	toSerialize["title"] = o.Title
	toSerialize["visible"] = o.Visible
	return toSerialize, nil
}

func (o *SinglePageSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"allowComment",
		"deleted",
		"excerpt",
		"pinned",
		"priority",
		"publish",
		"slug",
		"title",
		"visible",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSinglePageSpec := _SinglePageSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSinglePageSpec)

	if err != nil {
		return err
	}

	*o = SinglePageSpec(varSinglePageSpec)

	return err
}

type NullableSinglePageSpec struct {
	value *SinglePageSpec
	isSet bool
}

func (v NullableSinglePageSpec) Get() *SinglePageSpec {
	return v.value
}

func (v *NullableSinglePageSpec) Set(val *SinglePageSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableSinglePageSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableSinglePageSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSinglePageSpec(val *SinglePageSpec) *NullableSinglePageSpec {
	return &NullableSinglePageSpec{value: val, isSet: true}
}

func (v NullableSinglePageSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSinglePageSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


