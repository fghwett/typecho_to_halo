/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package console_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListedSinglePage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListedSinglePage{}

// ListedSinglePage A chunk of items.
type ListedSinglePage struct {
	Contributors []Contributor `json:"contributors"`
	Owner Contributor `json:"owner"`
	Page SinglePage `json:"page"`
	Stats Stats `json:"stats"`
}

type _ListedSinglePage ListedSinglePage

// NewListedSinglePage instantiates a new ListedSinglePage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListedSinglePage(contributors []Contributor, owner Contributor, page SinglePage, stats Stats) *ListedSinglePage {
	this := ListedSinglePage{}
	this.Contributors = contributors
	this.Owner = owner
	this.Page = page
	this.Stats = stats
	return &this
}

// NewListedSinglePageWithDefaults instantiates a new ListedSinglePage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListedSinglePageWithDefaults() *ListedSinglePage {
	this := ListedSinglePage{}
	return &this
}

// GetContributors returns the Contributors field value
func (o *ListedSinglePage) GetContributors() []Contributor {
	if o == nil {
		var ret []Contributor
		return ret
	}

	return o.Contributors
}

// GetContributorsOk returns a tuple with the Contributors field value
// and a boolean to check if the value has been set.
func (o *ListedSinglePage) GetContributorsOk() ([]Contributor, bool) {
	if o == nil {
		return nil, false
	}
	return o.Contributors, true
}

// SetContributors sets field value
func (o *ListedSinglePage) SetContributors(v []Contributor) {
	o.Contributors = v
}

// GetOwner returns the Owner field value
func (o *ListedSinglePage) GetOwner() Contributor {
	if o == nil {
		var ret Contributor
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *ListedSinglePage) GetOwnerOk() (*Contributor, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *ListedSinglePage) SetOwner(v Contributor) {
	o.Owner = v
}

// GetPage returns the Page field value
func (o *ListedSinglePage) GetPage() SinglePage {
	if o == nil {
		var ret SinglePage
		return ret
	}

	return o.Page
}

// GetPageOk returns a tuple with the Page field value
// and a boolean to check if the value has been set.
func (o *ListedSinglePage) GetPageOk() (*SinglePage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Page, true
}

// SetPage sets field value
func (o *ListedSinglePage) SetPage(v SinglePage) {
	o.Page = v
}

// GetStats returns the Stats field value
func (o *ListedSinglePage) GetStats() Stats {
	if o == nil {
		var ret Stats
		return ret
	}

	return o.Stats
}

// GetStatsOk returns a tuple with the Stats field value
// and a boolean to check if the value has been set.
func (o *ListedSinglePage) GetStatsOk() (*Stats, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stats, true
}

// SetStats sets field value
func (o *ListedSinglePage) SetStats(v Stats) {
	o.Stats = v
}

func (o ListedSinglePage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListedSinglePage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["contributors"] = o.Contributors
	toSerialize["owner"] = o.Owner
	toSerialize["page"] = o.Page
	toSerialize["stats"] = o.Stats
	return toSerialize, nil
}

func (o *ListedSinglePage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"contributors",
		"owner",
		"page",
		"stats",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListedSinglePage := _ListedSinglePage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListedSinglePage)

	if err != nil {
		return err
	}

	*o = ListedSinglePage(varListedSinglePage)

	return err
}

type NullableListedSinglePage struct {
	value *ListedSinglePage
	isSet bool
}

func (v NullableListedSinglePage) Get() *ListedSinglePage {
	return v.value
}

func (v *NullableListedSinglePage) Set(val *ListedSinglePage) {
	v.value = val
	v.isSet = true
}

func (v NullableListedSinglePage) IsSet() bool {
	return v.isSet
}

func (v *NullableListedSinglePage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListedSinglePage(val *ListedSinglePage) *NullableListedSinglePage {
	return &NullableListedSinglePage{value: val, isSet: true}
}

func (v NullableListedSinglePage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListedSinglePage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


