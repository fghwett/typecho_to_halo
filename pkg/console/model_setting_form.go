/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package console_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SettingForm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SettingForm{}

// SettingForm struct for SettingForm
type SettingForm struct {
	FormSchema []map[string]interface{} `json:"formSchema"`
	Group string `json:"group"`
	Label *string `json:"label,omitempty"`
}

type _SettingForm SettingForm

// NewSettingForm instantiates a new SettingForm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingForm(formSchema []map[string]interface{}, group string) *SettingForm {
	this := SettingForm{}
	this.FormSchema = formSchema
	this.Group = group
	return &this
}

// NewSettingFormWithDefaults instantiates a new SettingForm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingFormWithDefaults() *SettingForm {
	this := SettingForm{}
	return &this
}

// GetFormSchema returns the FormSchema field value
func (o *SettingForm) GetFormSchema() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.FormSchema
}

// GetFormSchemaOk returns a tuple with the FormSchema field value
// and a boolean to check if the value has been set.
func (o *SettingForm) GetFormSchemaOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.FormSchema, true
}

// SetFormSchema sets field value
func (o *SettingForm) SetFormSchema(v []map[string]interface{}) {
	o.FormSchema = v
}

// GetGroup returns the Group field value
func (o *SettingForm) GetGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Group
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
func (o *SettingForm) GetGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Group, true
}

// SetGroup sets field value
func (o *SettingForm) SetGroup(v string) {
	o.Group = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *SettingForm) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingForm) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *SettingForm) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *SettingForm) SetLabel(v string) {
	o.Label = &v
}

func (o SettingForm) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SettingForm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["formSchema"] = o.FormSchema
	toSerialize["group"] = o.Group
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	return toSerialize, nil
}

func (o *SettingForm) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"formSchema",
		"group",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSettingForm := _SettingForm{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSettingForm)

	if err != nil {
		return err
	}

	*o = SettingForm(varSettingForm)

	return err
}

type NullableSettingForm struct {
	value *SettingForm
	isSet bool
}

func (v NullableSettingForm) Get() *SettingForm {
	return v.value
}

func (v *NullableSettingForm) Set(val *SettingForm) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingForm) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingForm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingForm(val *SettingForm) *NullableSettingForm {
	return &NullableSettingForm{value: val, isSet: true}
}

func (v NullableSettingForm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingForm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


