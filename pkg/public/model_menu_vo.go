/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package public_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MenuVo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MenuVo{}

// MenuVo struct for MenuVo
type MenuVo struct {
	MenuItems []MenuItemVo `json:"menuItems,omitempty"`
	Metadata Metadata `json:"metadata"`
	Spec *MenuSpec `json:"spec,omitempty"`
}

type _MenuVo MenuVo

// NewMenuVo instantiates a new MenuVo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMenuVo(metadata Metadata) *MenuVo {
	this := MenuVo{}
	this.Metadata = metadata
	return &this
}

// NewMenuVoWithDefaults instantiates a new MenuVo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMenuVoWithDefaults() *MenuVo {
	this := MenuVo{}
	return &this
}

// GetMenuItems returns the MenuItems field value if set, zero value otherwise.
func (o *MenuVo) GetMenuItems() []MenuItemVo {
	if o == nil || IsNil(o.MenuItems) {
		var ret []MenuItemVo
		return ret
	}
	return o.MenuItems
}

// GetMenuItemsOk returns a tuple with the MenuItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuVo) GetMenuItemsOk() ([]MenuItemVo, bool) {
	if o == nil || IsNil(o.MenuItems) {
		return nil, false
	}
	return o.MenuItems, true
}

// HasMenuItems returns a boolean if a field has been set.
func (o *MenuVo) HasMenuItems() bool {
	if o != nil && !IsNil(o.MenuItems) {
		return true
	}

	return false
}

// SetMenuItems gets a reference to the given []MenuItemVo and assigns it to the MenuItems field.
func (o *MenuVo) SetMenuItems(v []MenuItemVo) {
	o.MenuItems = v
}

// GetMetadata returns the Metadata field value
func (o *MenuVo) GetMetadata() Metadata {
	if o == nil {
		var ret Metadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *MenuVo) GetMetadataOk() (*Metadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *MenuVo) SetMetadata(v Metadata) {
	o.Metadata = v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *MenuVo) GetSpec() MenuSpec {
	if o == nil || IsNil(o.Spec) {
		var ret MenuSpec
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuVo) GetSpecOk() (*MenuSpec, bool) {
	if o == nil || IsNil(o.Spec) {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *MenuVo) HasSpec() bool {
	if o != nil && !IsNil(o.Spec) {
		return true
	}

	return false
}

// SetSpec gets a reference to the given MenuSpec and assigns it to the Spec field.
func (o *MenuVo) SetSpec(v MenuSpec) {
	o.Spec = &v
}

func (o MenuVo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MenuVo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MenuItems) {
		toSerialize["menuItems"] = o.MenuItems
	}
	toSerialize["metadata"] = o.Metadata
	if !IsNil(o.Spec) {
		toSerialize["spec"] = o.Spec
	}
	return toSerialize, nil
}

func (o *MenuVo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metadata",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMenuVo := _MenuVo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMenuVo)

	if err != nil {
		return err
	}

	*o = MenuVo(varMenuVo)

	return err
}

type NullableMenuVo struct {
	value *MenuVo
	isSet bool
}

func (v NullableMenuVo) Get() *MenuVo {
	return v.value
}

func (v *NullableMenuVo) Set(val *MenuVo) {
	v.value = val
	v.isSet = true
}

func (v NullableMenuVo) IsSet() bool {
	return v.isSet
}

func (v *NullableMenuVo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMenuVo(val *MenuVo) *NullableMenuVo {
	return &NullableMenuVo{value: val, isSet: true}
}

func (v NullableMenuVo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMenuVo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


