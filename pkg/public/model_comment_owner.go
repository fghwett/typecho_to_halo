/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package public_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CommentOwner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommentOwner{}

// CommentOwner struct for CommentOwner
type CommentOwner struct {
	Annotations *map[string]string `json:"annotations,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	Kind string `json:"kind"`
	Name string `json:"name"`
}

type _CommentOwner CommentOwner

// NewCommentOwner instantiates a new CommentOwner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommentOwner(kind string, name string) *CommentOwner {
	this := CommentOwner{}
	this.Kind = kind
	this.Name = name
	return &this
}

// NewCommentOwnerWithDefaults instantiates a new CommentOwner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentOwnerWithDefaults() *CommentOwner {
	this := CommentOwner{}
	return &this
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *CommentOwner) GetAnnotations() map[string]string {
	if o == nil || IsNil(o.Annotations) {
		var ret map[string]string
		return ret
	}
	return *o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentOwner) GetAnnotationsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Annotations) {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *CommentOwner) HasAnnotations() bool {
	if o != nil && !IsNil(o.Annotations) {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]string and assigns it to the Annotations field.
func (o *CommentOwner) SetAnnotations(v map[string]string) {
	o.Annotations = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *CommentOwner) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentOwner) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *CommentOwner) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *CommentOwner) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetKind returns the Kind field value
func (o *CommentOwner) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *CommentOwner) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *CommentOwner) SetKind(v string) {
	o.Kind = v
}

// GetName returns the Name field value
func (o *CommentOwner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CommentOwner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CommentOwner) SetName(v string) {
	o.Name = v
}

func (o CommentOwner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommentOwner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Annotations) {
		toSerialize["annotations"] = o.Annotations
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	toSerialize["kind"] = o.Kind
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *CommentOwner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"kind",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommentOwner := _CommentOwner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommentOwner)

	if err != nil {
		return err
	}

	*o = CommentOwner(varCommentOwner)

	return err
}

type NullableCommentOwner struct {
	value *CommentOwner
	isSet bool
}

func (v NullableCommentOwner) Get() *CommentOwner {
	return v.value
}

func (v *NullableCommentOwner) Set(val *CommentOwner) {
	v.value = val
	v.isSet = true
}

func (v NullableCommentOwner) IsSet() bool {
	return v.isSet
}

func (v *NullableCommentOwner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommentOwner(val *CommentOwner) *NullableCommentOwner {
	return &NullableCommentOwner{value: val, isSet: true}
}

func (v NullableCommentOwner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommentOwner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


