/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package public_sdk

import (
	"encoding/json"
)

// checks if the CounterRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CounterRequest{}

// CounterRequest struct for CounterRequest
type CounterRequest struct {
	Group *string `json:"group,omitempty"`
	Hostname *string `json:"hostname,omitempty"`
	Language *string `json:"language,omitempty"`
	Name *string `json:"name,omitempty"`
	Plural *string `json:"plural,omitempty"`
	Referrer *string `json:"referrer,omitempty"`
	Screen *string `json:"screen,omitempty"`
}

// NewCounterRequest instantiates a new CounterRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCounterRequest() *CounterRequest {
	this := CounterRequest{}
	return &this
}

// NewCounterRequestWithDefaults instantiates a new CounterRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCounterRequestWithDefaults() *CounterRequest {
	this := CounterRequest{}
	return &this
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *CounterRequest) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CounterRequest) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *CounterRequest) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *CounterRequest) SetGroup(v string) {
	o.Group = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *CounterRequest) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CounterRequest) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *CounterRequest) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *CounterRequest) SetHostname(v string) {
	o.Hostname = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *CounterRequest) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CounterRequest) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *CounterRequest) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *CounterRequest) SetLanguage(v string) {
	o.Language = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CounterRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CounterRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CounterRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CounterRequest) SetName(v string) {
	o.Name = &v
}

// GetPlural returns the Plural field value if set, zero value otherwise.
func (o *CounterRequest) GetPlural() string {
	if o == nil || IsNil(o.Plural) {
		var ret string
		return ret
	}
	return *o.Plural
}

// GetPluralOk returns a tuple with the Plural field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CounterRequest) GetPluralOk() (*string, bool) {
	if o == nil || IsNil(o.Plural) {
		return nil, false
	}
	return o.Plural, true
}

// HasPlural returns a boolean if a field has been set.
func (o *CounterRequest) HasPlural() bool {
	if o != nil && !IsNil(o.Plural) {
		return true
	}

	return false
}

// SetPlural gets a reference to the given string and assigns it to the Plural field.
func (o *CounterRequest) SetPlural(v string) {
	o.Plural = &v
}

// GetReferrer returns the Referrer field value if set, zero value otherwise.
func (o *CounterRequest) GetReferrer() string {
	if o == nil || IsNil(o.Referrer) {
		var ret string
		return ret
	}
	return *o.Referrer
}

// GetReferrerOk returns a tuple with the Referrer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CounterRequest) GetReferrerOk() (*string, bool) {
	if o == nil || IsNil(o.Referrer) {
		return nil, false
	}
	return o.Referrer, true
}

// HasReferrer returns a boolean if a field has been set.
func (o *CounterRequest) HasReferrer() bool {
	if o != nil && !IsNil(o.Referrer) {
		return true
	}

	return false
}

// SetReferrer gets a reference to the given string and assigns it to the Referrer field.
func (o *CounterRequest) SetReferrer(v string) {
	o.Referrer = &v
}

// GetScreen returns the Screen field value if set, zero value otherwise.
func (o *CounterRequest) GetScreen() string {
	if o == nil || IsNil(o.Screen) {
		var ret string
		return ret
	}
	return *o.Screen
}

// GetScreenOk returns a tuple with the Screen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CounterRequest) GetScreenOk() (*string, bool) {
	if o == nil || IsNil(o.Screen) {
		return nil, false
	}
	return o.Screen, true
}

// HasScreen returns a boolean if a field has been set.
func (o *CounterRequest) HasScreen() bool {
	if o != nil && !IsNil(o.Screen) {
		return true
	}

	return false
}

// SetScreen gets a reference to the given string and assigns it to the Screen field.
func (o *CounterRequest) SetScreen(v string) {
	o.Screen = &v
}

func (o CounterRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CounterRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Plural) {
		toSerialize["plural"] = o.Plural
	}
	if !IsNil(o.Referrer) {
		toSerialize["referrer"] = o.Referrer
	}
	if !IsNil(o.Screen) {
		toSerialize["screen"] = o.Screen
	}
	return toSerialize, nil
}

type NullableCounterRequest struct {
	value *CounterRequest
	isSet bool
}

func (v NullableCounterRequest) Get() *CounterRequest {
	return v.value
}

func (v *NullableCounterRequest) Set(val *CounterRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCounterRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCounterRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCounterRequest(val *CounterRequest) *NullableCounterRequest {
	return &NullableCounterRequest{value: val, isSet: true}
}

func (v NullableCounterRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCounterRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


