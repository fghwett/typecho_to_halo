/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package public_sdk

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the HaloDocument type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HaloDocument{}

// HaloDocument struct for HaloDocument
type HaloDocument struct {
	Annotations *map[string]string `json:"annotations,omitempty"`
	Categories []string `json:"categories,omitempty"`
	Content string `json:"content"`
	CreationTimestamp *time.Time `json:"creationTimestamp,omitempty"`
	Description *string `json:"description,omitempty"`
	Exposed *bool `json:"exposed,omitempty"`
	Id string `json:"id"`
	MetadataName string `json:"metadataName"`
	OwnerName string `json:"ownerName"`
	Permalink string `json:"permalink"`
	Published *bool `json:"published,omitempty"`
	Recycled *bool `json:"recycled,omitempty"`
	Tags []string `json:"tags,omitempty"`
	Title string `json:"title"`
	Type string `json:"type"`
	UpdateTimestamp *time.Time `json:"updateTimestamp,omitempty"`
}

type _HaloDocument HaloDocument

// NewHaloDocument instantiates a new HaloDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHaloDocument(content string, id string, metadataName string, ownerName string, permalink string, title string, type_ string) *HaloDocument {
	this := HaloDocument{}
	this.Content = content
	this.Id = id
	this.MetadataName = metadataName
	this.OwnerName = ownerName
	this.Permalink = permalink
	this.Title = title
	this.Type = type_
	return &this
}

// NewHaloDocumentWithDefaults instantiates a new HaloDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHaloDocumentWithDefaults() *HaloDocument {
	this := HaloDocument{}
	return &this
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *HaloDocument) GetAnnotations() map[string]string {
	if o == nil || IsNil(o.Annotations) {
		var ret map[string]string
		return ret
	}
	return *o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HaloDocument) GetAnnotationsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Annotations) {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *HaloDocument) HasAnnotations() bool {
	if o != nil && !IsNil(o.Annotations) {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]string and assigns it to the Annotations field.
func (o *HaloDocument) SetAnnotations(v map[string]string) {
	o.Annotations = &v
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *HaloDocument) GetCategories() []string {
	if o == nil || IsNil(o.Categories) {
		var ret []string
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HaloDocument) GetCategoriesOk() ([]string, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *HaloDocument) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []string and assigns it to the Categories field.
func (o *HaloDocument) SetCategories(v []string) {
	o.Categories = v
}

// GetContent returns the Content field value
func (o *HaloDocument) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *HaloDocument) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *HaloDocument) SetContent(v string) {
	o.Content = v
}

// GetCreationTimestamp returns the CreationTimestamp field value if set, zero value otherwise.
func (o *HaloDocument) GetCreationTimestamp() time.Time {
	if o == nil || IsNil(o.CreationTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.CreationTimestamp
}

// GetCreationTimestampOk returns a tuple with the CreationTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HaloDocument) GetCreationTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreationTimestamp) {
		return nil, false
	}
	return o.CreationTimestamp, true
}

// HasCreationTimestamp returns a boolean if a field has been set.
func (o *HaloDocument) HasCreationTimestamp() bool {
	if o != nil && !IsNil(o.CreationTimestamp) {
		return true
	}

	return false
}

// SetCreationTimestamp gets a reference to the given time.Time and assigns it to the CreationTimestamp field.
func (o *HaloDocument) SetCreationTimestamp(v time.Time) {
	o.CreationTimestamp = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *HaloDocument) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HaloDocument) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *HaloDocument) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *HaloDocument) SetDescription(v string) {
	o.Description = &v
}

// GetExposed returns the Exposed field value if set, zero value otherwise.
func (o *HaloDocument) GetExposed() bool {
	if o == nil || IsNil(o.Exposed) {
		var ret bool
		return ret
	}
	return *o.Exposed
}

// GetExposedOk returns a tuple with the Exposed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HaloDocument) GetExposedOk() (*bool, bool) {
	if o == nil || IsNil(o.Exposed) {
		return nil, false
	}
	return o.Exposed, true
}

// HasExposed returns a boolean if a field has been set.
func (o *HaloDocument) HasExposed() bool {
	if o != nil && !IsNil(o.Exposed) {
		return true
	}

	return false
}

// SetExposed gets a reference to the given bool and assigns it to the Exposed field.
func (o *HaloDocument) SetExposed(v bool) {
	o.Exposed = &v
}

// GetId returns the Id field value
func (o *HaloDocument) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *HaloDocument) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *HaloDocument) SetId(v string) {
	o.Id = v
}

// GetMetadataName returns the MetadataName field value
func (o *HaloDocument) GetMetadataName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetadataName
}

// GetMetadataNameOk returns a tuple with the MetadataName field value
// and a boolean to check if the value has been set.
func (o *HaloDocument) GetMetadataNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetadataName, true
}

// SetMetadataName sets field value
func (o *HaloDocument) SetMetadataName(v string) {
	o.MetadataName = v
}

// GetOwnerName returns the OwnerName field value
func (o *HaloDocument) GetOwnerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OwnerName
}

// GetOwnerNameOk returns a tuple with the OwnerName field value
// and a boolean to check if the value has been set.
func (o *HaloDocument) GetOwnerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OwnerName, true
}

// SetOwnerName sets field value
func (o *HaloDocument) SetOwnerName(v string) {
	o.OwnerName = v
}

// GetPermalink returns the Permalink field value
func (o *HaloDocument) GetPermalink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Permalink
}

// GetPermalinkOk returns a tuple with the Permalink field value
// and a boolean to check if the value has been set.
func (o *HaloDocument) GetPermalinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Permalink, true
}

// SetPermalink sets field value
func (o *HaloDocument) SetPermalink(v string) {
	o.Permalink = v
}

// GetPublished returns the Published field value if set, zero value otherwise.
func (o *HaloDocument) GetPublished() bool {
	if o == nil || IsNil(o.Published) {
		var ret bool
		return ret
	}
	return *o.Published
}

// GetPublishedOk returns a tuple with the Published field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HaloDocument) GetPublishedOk() (*bool, bool) {
	if o == nil || IsNil(o.Published) {
		return nil, false
	}
	return o.Published, true
}

// HasPublished returns a boolean if a field has been set.
func (o *HaloDocument) HasPublished() bool {
	if o != nil && !IsNil(o.Published) {
		return true
	}

	return false
}

// SetPublished gets a reference to the given bool and assigns it to the Published field.
func (o *HaloDocument) SetPublished(v bool) {
	o.Published = &v
}

// GetRecycled returns the Recycled field value if set, zero value otherwise.
func (o *HaloDocument) GetRecycled() bool {
	if o == nil || IsNil(o.Recycled) {
		var ret bool
		return ret
	}
	return *o.Recycled
}

// GetRecycledOk returns a tuple with the Recycled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HaloDocument) GetRecycledOk() (*bool, bool) {
	if o == nil || IsNil(o.Recycled) {
		return nil, false
	}
	return o.Recycled, true
}

// HasRecycled returns a boolean if a field has been set.
func (o *HaloDocument) HasRecycled() bool {
	if o != nil && !IsNil(o.Recycled) {
		return true
	}

	return false
}

// SetRecycled gets a reference to the given bool and assigns it to the Recycled field.
func (o *HaloDocument) SetRecycled(v bool) {
	o.Recycled = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *HaloDocument) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HaloDocument) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *HaloDocument) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *HaloDocument) SetTags(v []string) {
	o.Tags = v
}

// GetTitle returns the Title field value
func (o *HaloDocument) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *HaloDocument) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *HaloDocument) SetTitle(v string) {
	o.Title = v
}

// GetType returns the Type field value
func (o *HaloDocument) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *HaloDocument) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *HaloDocument) SetType(v string) {
	o.Type = v
}

// GetUpdateTimestamp returns the UpdateTimestamp field value if set, zero value otherwise.
func (o *HaloDocument) GetUpdateTimestamp() time.Time {
	if o == nil || IsNil(o.UpdateTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.UpdateTimestamp
}

// GetUpdateTimestampOk returns a tuple with the UpdateTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HaloDocument) GetUpdateTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdateTimestamp) {
		return nil, false
	}
	return o.UpdateTimestamp, true
}

// HasUpdateTimestamp returns a boolean if a field has been set.
func (o *HaloDocument) HasUpdateTimestamp() bool {
	if o != nil && !IsNil(o.UpdateTimestamp) {
		return true
	}

	return false
}

// SetUpdateTimestamp gets a reference to the given time.Time and assigns it to the UpdateTimestamp field.
func (o *HaloDocument) SetUpdateTimestamp(v time.Time) {
	o.UpdateTimestamp = &v
}

func (o HaloDocument) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HaloDocument) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Annotations) {
		toSerialize["annotations"] = o.Annotations
	}
	if !IsNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}
	toSerialize["content"] = o.Content
	if !IsNil(o.CreationTimestamp) {
		toSerialize["creationTimestamp"] = o.CreationTimestamp
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Exposed) {
		toSerialize["exposed"] = o.Exposed
	}
	toSerialize["id"] = o.Id
	toSerialize["metadataName"] = o.MetadataName
	toSerialize["ownerName"] = o.OwnerName
	toSerialize["permalink"] = o.Permalink
	if !IsNil(o.Published) {
		toSerialize["published"] = o.Published
	}
	if !IsNil(o.Recycled) {
		toSerialize["recycled"] = o.Recycled
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["title"] = o.Title
	toSerialize["type"] = o.Type
	if !IsNil(o.UpdateTimestamp) {
		toSerialize["updateTimestamp"] = o.UpdateTimestamp
	}
	return toSerialize, nil
}

func (o *HaloDocument) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"content",
		"id",
		"metadataName",
		"ownerName",
		"permalink",
		"title",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHaloDocument := _HaloDocument{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHaloDocument)

	if err != nil {
		return err
	}

	*o = HaloDocument(varHaloDocument)

	return err
}

type NullableHaloDocument struct {
	value *HaloDocument
	isSet bool
}

func (v NullableHaloDocument) Get() *HaloDocument {
	return v.value
}

func (v *NullableHaloDocument) Set(val *HaloDocument) {
	v.value = val
	v.isSet = true
}

func (v NullableHaloDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableHaloDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHaloDocument(val *HaloDocument) *NullableHaloDocument {
	return &NullableHaloDocument{value: val, isSet: true}
}

func (v NullableHaloDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHaloDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


