/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package public_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContributorVo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContributorVo{}

// ContributorVo struct for ContributorVo
type ContributorVo struct {
	Avatar *string `json:"avatar,omitempty"`
	Bio *string `json:"bio,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	Metadata Metadata `json:"metadata"`
	Name *string `json:"name,omitempty"`
	Permalink *string `json:"permalink,omitempty"`
}

type _ContributorVo ContributorVo

// NewContributorVo instantiates a new ContributorVo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContributorVo(metadata Metadata) *ContributorVo {
	this := ContributorVo{}
	this.Metadata = metadata
	return &this
}

// NewContributorVoWithDefaults instantiates a new ContributorVo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContributorVoWithDefaults() *ContributorVo {
	this := ContributorVo{}
	return &this
}

// GetAvatar returns the Avatar field value if set, zero value otherwise.
func (o *ContributorVo) GetAvatar() string {
	if o == nil || IsNil(o.Avatar) {
		var ret string
		return ret
	}
	return *o.Avatar
}

// GetAvatarOk returns a tuple with the Avatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContributorVo) GetAvatarOk() (*string, bool) {
	if o == nil || IsNil(o.Avatar) {
		return nil, false
	}
	return o.Avatar, true
}

// HasAvatar returns a boolean if a field has been set.
func (o *ContributorVo) HasAvatar() bool {
	if o != nil && !IsNil(o.Avatar) {
		return true
	}

	return false
}

// SetAvatar gets a reference to the given string and assigns it to the Avatar field.
func (o *ContributorVo) SetAvatar(v string) {
	o.Avatar = &v
}

// GetBio returns the Bio field value if set, zero value otherwise.
func (o *ContributorVo) GetBio() string {
	if o == nil || IsNil(o.Bio) {
		var ret string
		return ret
	}
	return *o.Bio
}

// GetBioOk returns a tuple with the Bio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContributorVo) GetBioOk() (*string, bool) {
	if o == nil || IsNil(o.Bio) {
		return nil, false
	}
	return o.Bio, true
}

// HasBio returns a boolean if a field has been set.
func (o *ContributorVo) HasBio() bool {
	if o != nil && !IsNil(o.Bio) {
		return true
	}

	return false
}

// SetBio gets a reference to the given string and assigns it to the Bio field.
func (o *ContributorVo) SetBio(v string) {
	o.Bio = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ContributorVo) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContributorVo) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ContributorVo) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ContributorVo) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetMetadata returns the Metadata field value
func (o *ContributorVo) GetMetadata() Metadata {
	if o == nil {
		var ret Metadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *ContributorVo) GetMetadataOk() (*Metadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *ContributorVo) SetMetadata(v Metadata) {
	o.Metadata = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ContributorVo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContributorVo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ContributorVo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ContributorVo) SetName(v string) {
	o.Name = &v
}

// GetPermalink returns the Permalink field value if set, zero value otherwise.
func (o *ContributorVo) GetPermalink() string {
	if o == nil || IsNil(o.Permalink) {
		var ret string
		return ret
	}
	return *o.Permalink
}

// GetPermalinkOk returns a tuple with the Permalink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContributorVo) GetPermalinkOk() (*string, bool) {
	if o == nil || IsNil(o.Permalink) {
		return nil, false
	}
	return o.Permalink, true
}

// HasPermalink returns a boolean if a field has been set.
func (o *ContributorVo) HasPermalink() bool {
	if o != nil && !IsNil(o.Permalink) {
		return true
	}

	return false
}

// SetPermalink gets a reference to the given string and assigns it to the Permalink field.
func (o *ContributorVo) SetPermalink(v string) {
	o.Permalink = &v
}

func (o ContributorVo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContributorVo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Avatar) {
		toSerialize["avatar"] = o.Avatar
	}
	if !IsNil(o.Bio) {
		toSerialize["bio"] = o.Bio
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	toSerialize["metadata"] = o.Metadata
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Permalink) {
		toSerialize["permalink"] = o.Permalink
	}
	return toSerialize, nil
}

func (o *ContributorVo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metadata",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContributorVo := _ContributorVo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContributorVo)

	if err != nil {
		return err
	}

	*o = ContributorVo(varContributorVo)

	return err
}

type NullableContributorVo struct {
	value *ContributorVo
	isSet bool
}

func (v NullableContributorVo) Get() *ContributorVo {
	return v.value
}

func (v *NullableContributorVo) Set(val *ContributorVo) {
	v.value = val
	v.isSet = true
}

func (v NullableContributorVo) IsSet() bool {
	return v.isSet
}

func (v *NullableContributorVo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContributorVo(val *ContributorVo) *NullableContributorVo {
	return &NullableContributorVo{value: val, isSet: true}
}

func (v NullableContributorVo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContributorVo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


