/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package public_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type IndexV1alpha1PublicAPI interface {

	/*
	IndicesSearch Method for IndicesSearch

	Search indices.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiIndicesSearchRequest
	*/
	IndicesSearch(ctx context.Context) ApiIndicesSearchRequest

	// IndicesSearchExecute executes the request
	//  @return SearchResult
	IndicesSearchExecute(r ApiIndicesSearchRequest) (*SearchResult, *http.Response, error)

	/*
	SearchPost Method for SearchPost

	Search posts with fuzzy query. This method is deprecated, please use POST /indices/-/search instead.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSearchPostRequest

	Deprecated
	*/
	SearchPost(ctx context.Context) ApiSearchPostRequest

	// SearchPostExecute executes the request
	//  @return SearchResult
	// Deprecated
	SearchPostExecute(r ApiSearchPostRequest) (*SearchResult, *http.Response, error)
}

// IndexV1alpha1PublicAPIService IndexV1alpha1PublicAPI service
type IndexV1alpha1PublicAPIService service

type ApiIndicesSearchRequest struct {
	ctx context.Context
	ApiService IndexV1alpha1PublicAPI
	searchOption *SearchOption
}

// Please note that the \&quot;filterPublished\&quot;, \&quot;filterExposed\&quot; and \&quot;filterRecycled\&quot; fields are ignored in this endpoint.
func (r ApiIndicesSearchRequest) SearchOption(searchOption SearchOption) ApiIndicesSearchRequest {
	r.searchOption = &searchOption
	return r
}

func (r ApiIndicesSearchRequest) Execute() (*SearchResult, *http.Response, error) {
	return r.ApiService.IndicesSearchExecute(r)
}

/*
IndicesSearch Method for IndicesSearch

Search indices.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIndicesSearchRequest
*/
func (a *IndexV1alpha1PublicAPIService) IndicesSearch(ctx context.Context) ApiIndicesSearchRequest {
	return ApiIndicesSearchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchResult
func (a *IndexV1alpha1PublicAPIService) IndicesSearchExecute(r ApiIndicesSearchRequest) (*SearchResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IndexV1alpha1PublicAPIService.IndicesSearch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.halo.run/v1alpha1/indices/-/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.searchOption
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SearchResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchPostRequest struct {
	ctx context.Context
	ApiService IndexV1alpha1PublicAPI
	keyword *string
	limit *int32
	highlightPreTag *string
	highlightPostTag *string
}

// Keyword to search
func (r ApiSearchPostRequest) Keyword(keyword string) ApiSearchPostRequest {
	r.keyword = &keyword
	return r
}

// Limit of search results
func (r ApiSearchPostRequest) Limit(limit int32) ApiSearchPostRequest {
	r.limit = &limit
	return r
}

// Highlight pre tag
func (r ApiSearchPostRequest) HighlightPreTag(highlightPreTag string) ApiSearchPostRequest {
	r.highlightPreTag = &highlightPreTag
	return r
}

// Highlight post tag
func (r ApiSearchPostRequest) HighlightPostTag(highlightPostTag string) ApiSearchPostRequest {
	r.highlightPostTag = &highlightPostTag
	return r
}

func (r ApiSearchPostRequest) Execute() (*SearchResult, *http.Response, error) {
	return r.ApiService.SearchPostExecute(r)
}

/*
SearchPost Method for SearchPost

Search posts with fuzzy query. This method is deprecated, please use POST /indices/-/search instead.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchPostRequest

Deprecated
*/
func (a *IndexV1alpha1PublicAPIService) SearchPost(ctx context.Context) ApiSearchPostRequest {
	return ApiSearchPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchResult
// Deprecated
func (a *IndexV1alpha1PublicAPIService) SearchPostExecute(r ApiSearchPostRequest) (*SearchResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IndexV1alpha1PublicAPIService.SearchPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.halo.run/v1alpha1/indices/post"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.keyword == nil {
		return localVarReturnValue, nil, reportError("keyword is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "keyword", r.keyword, "form", "")
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.highlightPreTag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "highlightPreTag", r.highlightPreTag, "form", "")
	}
	if r.highlightPostTag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "highlightPostTag", r.highlightPostTag, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v SearchResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
