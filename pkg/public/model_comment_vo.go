/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package public_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CommentVo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommentVo{}

// CommentVo A chunk of items.
type CommentVo struct {
	Metadata Metadata `json:"metadata"`
	Owner OwnerInfo `json:"owner"`
	Spec CommentSpec `json:"spec"`
	Stats CommentStatsVo `json:"stats"`
	Status *CommentStatus `json:"status,omitempty"`
}

type _CommentVo CommentVo

// NewCommentVo instantiates a new CommentVo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommentVo(metadata Metadata, owner OwnerInfo, spec CommentSpec, stats CommentStatsVo) *CommentVo {
	this := CommentVo{}
	this.Metadata = metadata
	this.Owner = owner
	this.Spec = spec
	this.Stats = stats
	return &this
}

// NewCommentVoWithDefaults instantiates a new CommentVo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentVoWithDefaults() *CommentVo {
	this := CommentVo{}
	return &this
}

// GetMetadata returns the Metadata field value
func (o *CommentVo) GetMetadata() Metadata {
	if o == nil {
		var ret Metadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *CommentVo) GetMetadataOk() (*Metadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *CommentVo) SetMetadata(v Metadata) {
	o.Metadata = v
}

// GetOwner returns the Owner field value
func (o *CommentVo) GetOwner() OwnerInfo {
	if o == nil {
		var ret OwnerInfo
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *CommentVo) GetOwnerOk() (*OwnerInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *CommentVo) SetOwner(v OwnerInfo) {
	o.Owner = v
}

// GetSpec returns the Spec field value
func (o *CommentVo) GetSpec() CommentSpec {
	if o == nil {
		var ret CommentSpec
		return ret
	}

	return o.Spec
}

// GetSpecOk returns a tuple with the Spec field value
// and a boolean to check if the value has been set.
func (o *CommentVo) GetSpecOk() (*CommentSpec, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Spec, true
}

// SetSpec sets field value
func (o *CommentVo) SetSpec(v CommentSpec) {
	o.Spec = v
}

// GetStats returns the Stats field value
func (o *CommentVo) GetStats() CommentStatsVo {
	if o == nil {
		var ret CommentStatsVo
		return ret
	}

	return o.Stats
}

// GetStatsOk returns a tuple with the Stats field value
// and a boolean to check if the value has been set.
func (o *CommentVo) GetStatsOk() (*CommentStatsVo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stats, true
}

// SetStats sets field value
func (o *CommentVo) SetStats(v CommentStatsVo) {
	o.Stats = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CommentVo) GetStatus() CommentStatus {
	if o == nil || IsNil(o.Status) {
		var ret CommentStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentVo) GetStatusOk() (*CommentStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CommentVo) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given CommentStatus and assigns it to the Status field.
func (o *CommentVo) SetStatus(v CommentStatus) {
	o.Status = &v
}

func (o CommentVo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommentVo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["metadata"] = o.Metadata
	toSerialize["owner"] = o.Owner
	toSerialize["spec"] = o.Spec
	toSerialize["stats"] = o.Stats
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

func (o *CommentVo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metadata",
		"owner",
		"spec",
		"stats",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommentVo := _CommentVo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommentVo)

	if err != nil {
		return err
	}

	*o = CommentVo(varCommentVo)

	return err
}

type NullableCommentVo struct {
	value *CommentVo
	isSet bool
}

func (v NullableCommentVo) Get() *CommentVo {
	return v.value
}

func (v *NullableCommentVo) Set(val *CommentVo) {
	v.value = val
	v.isSet = true
}

func (v NullableCommentVo) IsSet() bool {
	return v.isSet
}

func (v *NullableCommentVo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommentVo(val *CommentVo) *NullableCommentVo {
	return &NullableCommentVo{value: val, isSet: true}
}

func (v NullableCommentVo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommentVo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


