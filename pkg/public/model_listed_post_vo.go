/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package public_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListedPostVo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListedPostVo{}

// ListedPostVo struct for ListedPostVo
type ListedPostVo struct {
	Categories []CategoryVo `json:"categories,omitempty"`
	Contributors []ContributorVo `json:"contributors,omitempty"`
	Metadata Metadata `json:"metadata"`
	Owner *ContributorVo `json:"owner,omitempty"`
	Spec *PostSpec `json:"spec,omitempty"`
	Stats *StatsVo `json:"stats,omitempty"`
	Status *PostStatus `json:"status,omitempty"`
	Tags []TagVo `json:"tags,omitempty"`
}

type _ListedPostVo ListedPostVo

// NewListedPostVo instantiates a new ListedPostVo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListedPostVo(metadata Metadata) *ListedPostVo {
	this := ListedPostVo{}
	this.Metadata = metadata
	return &this
}

// NewListedPostVoWithDefaults instantiates a new ListedPostVo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListedPostVoWithDefaults() *ListedPostVo {
	this := ListedPostVo{}
	return &this
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *ListedPostVo) GetCategories() []CategoryVo {
	if o == nil || IsNil(o.Categories) {
		var ret []CategoryVo
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListedPostVo) GetCategoriesOk() ([]CategoryVo, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *ListedPostVo) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []CategoryVo and assigns it to the Categories field.
func (o *ListedPostVo) SetCategories(v []CategoryVo) {
	o.Categories = v
}

// GetContributors returns the Contributors field value if set, zero value otherwise.
func (o *ListedPostVo) GetContributors() []ContributorVo {
	if o == nil || IsNil(o.Contributors) {
		var ret []ContributorVo
		return ret
	}
	return o.Contributors
}

// GetContributorsOk returns a tuple with the Contributors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListedPostVo) GetContributorsOk() ([]ContributorVo, bool) {
	if o == nil || IsNil(o.Contributors) {
		return nil, false
	}
	return o.Contributors, true
}

// HasContributors returns a boolean if a field has been set.
func (o *ListedPostVo) HasContributors() bool {
	if o != nil && !IsNil(o.Contributors) {
		return true
	}

	return false
}

// SetContributors gets a reference to the given []ContributorVo and assigns it to the Contributors field.
func (o *ListedPostVo) SetContributors(v []ContributorVo) {
	o.Contributors = v
}

// GetMetadata returns the Metadata field value
func (o *ListedPostVo) GetMetadata() Metadata {
	if o == nil {
		var ret Metadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *ListedPostVo) GetMetadataOk() (*Metadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *ListedPostVo) SetMetadata(v Metadata) {
	o.Metadata = v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *ListedPostVo) GetOwner() ContributorVo {
	if o == nil || IsNil(o.Owner) {
		var ret ContributorVo
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListedPostVo) GetOwnerOk() (*ContributorVo, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *ListedPostVo) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given ContributorVo and assigns it to the Owner field.
func (o *ListedPostVo) SetOwner(v ContributorVo) {
	o.Owner = &v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *ListedPostVo) GetSpec() PostSpec {
	if o == nil || IsNil(o.Spec) {
		var ret PostSpec
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListedPostVo) GetSpecOk() (*PostSpec, bool) {
	if o == nil || IsNil(o.Spec) {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *ListedPostVo) HasSpec() bool {
	if o != nil && !IsNil(o.Spec) {
		return true
	}

	return false
}

// SetSpec gets a reference to the given PostSpec and assigns it to the Spec field.
func (o *ListedPostVo) SetSpec(v PostSpec) {
	o.Spec = &v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *ListedPostVo) GetStats() StatsVo {
	if o == nil || IsNil(o.Stats) {
		var ret StatsVo
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListedPostVo) GetStatsOk() (*StatsVo, bool) {
	if o == nil || IsNil(o.Stats) {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *ListedPostVo) HasStats() bool {
	if o != nil && !IsNil(o.Stats) {
		return true
	}

	return false
}

// SetStats gets a reference to the given StatsVo and assigns it to the Stats field.
func (o *ListedPostVo) SetStats(v StatsVo) {
	o.Stats = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ListedPostVo) GetStatus() PostStatus {
	if o == nil || IsNil(o.Status) {
		var ret PostStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListedPostVo) GetStatusOk() (*PostStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ListedPostVo) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given PostStatus and assigns it to the Status field.
func (o *ListedPostVo) SetStatus(v PostStatus) {
	o.Status = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ListedPostVo) GetTags() []TagVo {
	if o == nil || IsNil(o.Tags) {
		var ret []TagVo
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListedPostVo) GetTagsOk() ([]TagVo, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ListedPostVo) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TagVo and assigns it to the Tags field.
func (o *ListedPostVo) SetTags(v []TagVo) {
	o.Tags = v
}

func (o ListedPostVo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListedPostVo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}
	if !IsNil(o.Contributors) {
		toSerialize["contributors"] = o.Contributors
	}
	toSerialize["metadata"] = o.Metadata
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.Spec) {
		toSerialize["spec"] = o.Spec
	}
	if !IsNil(o.Stats) {
		toSerialize["stats"] = o.Stats
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

func (o *ListedPostVo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metadata",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListedPostVo := _ListedPostVo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListedPostVo)

	if err != nil {
		return err
	}

	*o = ListedPostVo(varListedPostVo)

	return err
}

type NullableListedPostVo struct {
	value *ListedPostVo
	isSet bool
}

func (v NullableListedPostVo) Get() *ListedPostVo {
	return v.value
}

func (v *NullableListedPostVo) Set(val *ListedPostVo) {
	v.value = val
	v.isSet = true
}

func (v NullableListedPostVo) IsSet() bool {
	return v.isSet
}

func (v *NullableListedPostVo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListedPostVo(val *ListedPostVo) *NullableListedPostVo {
	return &NullableListedPostVo{value: val, isSet: true}
}

func (v NullableListedPostVo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListedPostVo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


