/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package public_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MenuItemVo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MenuItemVo{}

// MenuItemVo struct for MenuItemVo
type MenuItemVo struct {
	DisplayName *string `json:"displayName,omitempty"`
	Metadata Metadata `json:"metadata"`
	ParentName *string `json:"parentName,omitempty"`
	Spec *MenuItemSpec `json:"spec,omitempty"`
	Status *MenuItemStatus `json:"status,omitempty"`
}

type _MenuItemVo MenuItemVo

// NewMenuItemVo instantiates a new MenuItemVo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMenuItemVo(metadata Metadata) *MenuItemVo {
	this := MenuItemVo{}
	this.Metadata = metadata
	return &this
}

// NewMenuItemVoWithDefaults instantiates a new MenuItemVo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMenuItemVoWithDefaults() *MenuItemVo {
	this := MenuItemVo{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *MenuItemVo) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuItemVo) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *MenuItemVo) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *MenuItemVo) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetMetadata returns the Metadata field value
func (o *MenuItemVo) GetMetadata() Metadata {
	if o == nil {
		var ret Metadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *MenuItemVo) GetMetadataOk() (*Metadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *MenuItemVo) SetMetadata(v Metadata) {
	o.Metadata = v
}

// GetParentName returns the ParentName field value if set, zero value otherwise.
func (o *MenuItemVo) GetParentName() string {
	if o == nil || IsNil(o.ParentName) {
		var ret string
		return ret
	}
	return *o.ParentName
}

// GetParentNameOk returns a tuple with the ParentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuItemVo) GetParentNameOk() (*string, bool) {
	if o == nil || IsNil(o.ParentName) {
		return nil, false
	}
	return o.ParentName, true
}

// HasParentName returns a boolean if a field has been set.
func (o *MenuItemVo) HasParentName() bool {
	if o != nil && !IsNil(o.ParentName) {
		return true
	}

	return false
}

// SetParentName gets a reference to the given string and assigns it to the ParentName field.
func (o *MenuItemVo) SetParentName(v string) {
	o.ParentName = &v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *MenuItemVo) GetSpec() MenuItemSpec {
	if o == nil || IsNil(o.Spec) {
		var ret MenuItemSpec
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuItemVo) GetSpecOk() (*MenuItemSpec, bool) {
	if o == nil || IsNil(o.Spec) {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *MenuItemVo) HasSpec() bool {
	if o != nil && !IsNil(o.Spec) {
		return true
	}

	return false
}

// SetSpec gets a reference to the given MenuItemSpec and assigns it to the Spec field.
func (o *MenuItemVo) SetSpec(v MenuItemSpec) {
	o.Spec = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *MenuItemVo) GetStatus() MenuItemStatus {
	if o == nil || IsNil(o.Status) {
		var ret MenuItemStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuItemVo) GetStatusOk() (*MenuItemStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *MenuItemVo) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given MenuItemStatus and assigns it to the Status field.
func (o *MenuItemVo) SetStatus(v MenuItemStatus) {
	o.Status = &v
}

func (o MenuItemVo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MenuItemVo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	toSerialize["metadata"] = o.Metadata
	if !IsNil(o.ParentName) {
		toSerialize["parentName"] = o.ParentName
	}
	if !IsNil(o.Spec) {
		toSerialize["spec"] = o.Spec
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

func (o *MenuItemVo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metadata",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMenuItemVo := _MenuItemVo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMenuItemVo)

	if err != nil {
		return err
	}

	*o = MenuItemVo(varMenuItemVo)

	return err
}

type NullableMenuItemVo struct {
	value *MenuItemVo
	isSet bool
}

func (v NullableMenuItemVo) Get() *MenuItemVo {
	return v.value
}

func (v *NullableMenuItemVo) Set(val *MenuItemVo) {
	v.value = val
	v.isSet = true
}

func (v NullableMenuItemVo) IsSet() bool {
	return v.isSet
}

func (v *NullableMenuItemVo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMenuItemVo(val *MenuItemVo) *NullableMenuItemVo {
	return &NullableMenuItemVo{value: val, isSet: true}
}

func (v NullableMenuItemVo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMenuItemVo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


