/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package public_sdk

import (
	"encoding/json"
)

// checks if the StatsVo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatsVo{}

// StatsVo struct for StatsVo
type StatsVo struct {
	Comment *int32 `json:"comment,omitempty"`
	Upvote *int32 `json:"upvote,omitempty"`
	Visit *int32 `json:"visit,omitempty"`
}

// NewStatsVo instantiates a new StatsVo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatsVo() *StatsVo {
	this := StatsVo{}
	return &this
}

// NewStatsVoWithDefaults instantiates a new StatsVo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatsVoWithDefaults() *StatsVo {
	this := StatsVo{}
	return &this
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *StatsVo) GetComment() int32 {
	if o == nil || IsNil(o.Comment) {
		var ret int32
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsVo) GetCommentOk() (*int32, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *StatsVo) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given int32 and assigns it to the Comment field.
func (o *StatsVo) SetComment(v int32) {
	o.Comment = &v
}

// GetUpvote returns the Upvote field value if set, zero value otherwise.
func (o *StatsVo) GetUpvote() int32 {
	if o == nil || IsNil(o.Upvote) {
		var ret int32
		return ret
	}
	return *o.Upvote
}

// GetUpvoteOk returns a tuple with the Upvote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsVo) GetUpvoteOk() (*int32, bool) {
	if o == nil || IsNil(o.Upvote) {
		return nil, false
	}
	return o.Upvote, true
}

// HasUpvote returns a boolean if a field has been set.
func (o *StatsVo) HasUpvote() bool {
	if o != nil && !IsNil(o.Upvote) {
		return true
	}

	return false
}

// SetUpvote gets a reference to the given int32 and assigns it to the Upvote field.
func (o *StatsVo) SetUpvote(v int32) {
	o.Upvote = &v
}

// GetVisit returns the Visit field value if set, zero value otherwise.
func (o *StatsVo) GetVisit() int32 {
	if o == nil || IsNil(o.Visit) {
		var ret int32
		return ret
	}
	return *o.Visit
}

// GetVisitOk returns a tuple with the Visit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsVo) GetVisitOk() (*int32, bool) {
	if o == nil || IsNil(o.Visit) {
		return nil, false
	}
	return o.Visit, true
}

// HasVisit returns a boolean if a field has been set.
func (o *StatsVo) HasVisit() bool {
	if o != nil && !IsNil(o.Visit) {
		return true
	}

	return false
}

// SetVisit gets a reference to the given int32 and assigns it to the Visit field.
func (o *StatsVo) SetVisit(v int32) {
	o.Visit = &v
}

func (o StatsVo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatsVo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Upvote) {
		toSerialize["upvote"] = o.Upvote
	}
	if !IsNil(o.Visit) {
		toSerialize["visit"] = o.Visit
	}
	return toSerialize, nil
}

type NullableStatsVo struct {
	value *StatsVo
	isSet bool
}

func (v NullableStatsVo) Get() *StatsVo {
	return v.value
}

func (v *NullableStatsVo) Set(val *StatsVo) {
	v.value = val
	v.isSet = true
}

func (v NullableStatsVo) IsSet() bool {
	return v.isSet
}

func (v *NullableStatsVo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatsVo(val *StatsVo) *NullableStatsVo {
	return &NullableStatsVo{value: val, isSet: true}
}

func (v NullableStatsVo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatsVo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


