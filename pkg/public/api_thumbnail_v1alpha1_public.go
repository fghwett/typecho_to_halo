/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package public_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
)


type ThumbnailV1alpha1PublicAPI interface {

	/*
	GetThumbnailByUri Method for GetThumbnailByUri

	Get thumbnail by URI

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetThumbnailByUriRequest
	*/
	GetThumbnailByUri(ctx context.Context) ApiGetThumbnailByUriRequest

	// GetThumbnailByUriExecute executes the request
	//  @return *os.File
	GetThumbnailByUriExecute(r ApiGetThumbnailByUriRequest) (**os.File, *http.Response, error)
}

// ThumbnailV1alpha1PublicAPIService ThumbnailV1alpha1PublicAPI service
type ThumbnailV1alpha1PublicAPIService service

type ApiGetThumbnailByUriRequest struct {
	ctx context.Context
	ApiService ThumbnailV1alpha1PublicAPI
	uri *string
	size *string
}

// The URI of the image
func (r ApiGetThumbnailByUriRequest) Uri(uri string) ApiGetThumbnailByUriRequest {
	r.uri = &uri
	return r
}

// The size of the thumbnail,available values are s,m,l,xl
func (r ApiGetThumbnailByUriRequest) Size(size string) ApiGetThumbnailByUriRequest {
	r.size = &size
	return r
}

func (r ApiGetThumbnailByUriRequest) Execute() (**os.File, *http.Response, error) {
	return r.ApiService.GetThumbnailByUriExecute(r)
}

/*
GetThumbnailByUri Method for GetThumbnailByUri

Get thumbnail by URI

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetThumbnailByUriRequest
*/
func (a *ThumbnailV1alpha1PublicAPIService) GetThumbnailByUri(ctx context.Context) ApiGetThumbnailByUriRequest {
	return ApiGetThumbnailByUriRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return *os.File
func (a *ThumbnailV1alpha1PublicAPIService) GetThumbnailByUriExecute(r ApiGetThumbnailByUriRequest) (**os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  **os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbnailV1alpha1PublicAPIService.GetThumbnailByUri")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.storage.halo.run/v1alpha1/thumbnails/-/via-uri"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.uri == nil {
		return localVarReturnValue, nil, reportError("uri is required and must be specified")
	}
	if r.size == nil {
		return localVarReturnValue, nil, reportError("size is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "uri", r.uri, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v *os.File
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
