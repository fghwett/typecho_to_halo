/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package public_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type MetricsV1alpha1PublicAPI interface {

	/*
	Count Method for Count

	Count an extension resource visits.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCountRequest
	*/
	Count(ctx context.Context) ApiCountRequest

	// CountExecute executes the request
	CountExecute(r ApiCountRequest) (*http.Response, error)

	/*
	Downvote Method for Downvote

	Downvote an extension resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDownvoteRequest
	*/
	Downvote(ctx context.Context) ApiDownvoteRequest

	// DownvoteExecute executes the request
	DownvoteExecute(r ApiDownvoteRequest) (*http.Response, error)

	/*
	Upvote Method for Upvote

	Upvote an extension resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiUpvoteRequest
	*/
	Upvote(ctx context.Context) ApiUpvoteRequest

	// UpvoteExecute executes the request
	UpvoteExecute(r ApiUpvoteRequest) (*http.Response, error)
}

// MetricsV1alpha1PublicAPIService MetricsV1alpha1PublicAPI service
type MetricsV1alpha1PublicAPIService service

type ApiCountRequest struct {
	ctx context.Context
	ApiService MetricsV1alpha1PublicAPI
	counterRequest *CounterRequest
}

func (r ApiCountRequest) CounterRequest(counterRequest CounterRequest) ApiCountRequest {
	r.counterRequest = &counterRequest
	return r
}

func (r ApiCountRequest) Execute() (*http.Response, error) {
	return r.ApiService.CountExecute(r)
}

/*
Count Method for Count

Count an extension resource visits.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCountRequest
*/
func (a *MetricsV1alpha1PublicAPIService) Count(ctx context.Context) ApiCountRequest {
	return ApiCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *MetricsV1alpha1PublicAPIService) CountExecute(r ApiCountRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsV1alpha1PublicAPIService.Count")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.halo.run/v1alpha1/trackers/counter"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.counterRequest == nil {
		return nil, reportError("counterRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.counterRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDownvoteRequest struct {
	ctx context.Context
	ApiService MetricsV1alpha1PublicAPI
	voteRequest *VoteRequest
}

func (r ApiDownvoteRequest) VoteRequest(voteRequest VoteRequest) ApiDownvoteRequest {
	r.voteRequest = &voteRequest
	return r
}

func (r ApiDownvoteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DownvoteExecute(r)
}

/*
Downvote Method for Downvote

Downvote an extension resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDownvoteRequest
*/
func (a *MetricsV1alpha1PublicAPIService) Downvote(ctx context.Context) ApiDownvoteRequest {
	return ApiDownvoteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *MetricsV1alpha1PublicAPIService) DownvoteExecute(r ApiDownvoteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsV1alpha1PublicAPIService.Downvote")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.halo.run/v1alpha1/trackers/downvote"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.voteRequest == nil {
		return nil, reportError("voteRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.voteRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpvoteRequest struct {
	ctx context.Context
	ApiService MetricsV1alpha1PublicAPI
	voteRequest *VoteRequest
}

func (r ApiUpvoteRequest) VoteRequest(voteRequest VoteRequest) ApiUpvoteRequest {
	r.voteRequest = &voteRequest
	return r
}

func (r ApiUpvoteRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpvoteExecute(r)
}

/*
Upvote Method for Upvote

Upvote an extension resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUpvoteRequest
*/
func (a *MetricsV1alpha1PublicAPIService) Upvote(ctx context.Context) ApiUpvoteRequest {
	return ApiUpvoteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *MetricsV1alpha1PublicAPIService) UpvoteExecute(r ApiUpvoteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsV1alpha1PublicAPIService.Upvote")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.halo.run/v1alpha1/trackers/upvote"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.voteRequest == nil {
		return nil, reportError("voteRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.voteRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
