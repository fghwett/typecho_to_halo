/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package public_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SearchOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchOption{}

// SearchOption struct for SearchOption
type SearchOption struct {
	Annotations *map[string]string `json:"annotations,omitempty"`
	FilterExposed *bool `json:"filterExposed,omitempty"`
	FilterPublished *bool `json:"filterPublished,omitempty"`
	FilterRecycled *bool `json:"filterRecycled,omitempty"`
	HighlightPostTag *string `json:"highlightPostTag,omitempty"`
	HighlightPreTag *string `json:"highlightPreTag,omitempty"`
	IncludeCategoryNames []string `json:"includeCategoryNames,omitempty"`
	IncludeOwnerNames []string `json:"includeOwnerNames,omitempty"`
	IncludeTagNames []string `json:"includeTagNames,omitempty"`
	IncludeTypes []string `json:"includeTypes,omitempty"`
	Keyword string `json:"keyword"`
	Limit *int32 `json:"limit,omitempty"`
}

type _SearchOption SearchOption

// NewSearchOption instantiates a new SearchOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchOption(keyword string) *SearchOption {
	this := SearchOption{}
	this.Keyword = keyword
	return &this
}

// NewSearchOptionWithDefaults instantiates a new SearchOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchOptionWithDefaults() *SearchOption {
	this := SearchOption{}
	return &this
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *SearchOption) GetAnnotations() map[string]string {
	if o == nil || IsNil(o.Annotations) {
		var ret map[string]string
		return ret
	}
	return *o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchOption) GetAnnotationsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Annotations) {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *SearchOption) HasAnnotations() bool {
	if o != nil && !IsNil(o.Annotations) {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]string and assigns it to the Annotations field.
func (o *SearchOption) SetAnnotations(v map[string]string) {
	o.Annotations = &v
}

// GetFilterExposed returns the FilterExposed field value if set, zero value otherwise.
func (o *SearchOption) GetFilterExposed() bool {
	if o == nil || IsNil(o.FilterExposed) {
		var ret bool
		return ret
	}
	return *o.FilterExposed
}

// GetFilterExposedOk returns a tuple with the FilterExposed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchOption) GetFilterExposedOk() (*bool, bool) {
	if o == nil || IsNil(o.FilterExposed) {
		return nil, false
	}
	return o.FilterExposed, true
}

// HasFilterExposed returns a boolean if a field has been set.
func (o *SearchOption) HasFilterExposed() bool {
	if o != nil && !IsNil(o.FilterExposed) {
		return true
	}

	return false
}

// SetFilterExposed gets a reference to the given bool and assigns it to the FilterExposed field.
func (o *SearchOption) SetFilterExposed(v bool) {
	o.FilterExposed = &v
}

// GetFilterPublished returns the FilterPublished field value if set, zero value otherwise.
func (o *SearchOption) GetFilterPublished() bool {
	if o == nil || IsNil(o.FilterPublished) {
		var ret bool
		return ret
	}
	return *o.FilterPublished
}

// GetFilterPublishedOk returns a tuple with the FilterPublished field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchOption) GetFilterPublishedOk() (*bool, bool) {
	if o == nil || IsNil(o.FilterPublished) {
		return nil, false
	}
	return o.FilterPublished, true
}

// HasFilterPublished returns a boolean if a field has been set.
func (o *SearchOption) HasFilterPublished() bool {
	if o != nil && !IsNil(o.FilterPublished) {
		return true
	}

	return false
}

// SetFilterPublished gets a reference to the given bool and assigns it to the FilterPublished field.
func (o *SearchOption) SetFilterPublished(v bool) {
	o.FilterPublished = &v
}

// GetFilterRecycled returns the FilterRecycled field value if set, zero value otherwise.
func (o *SearchOption) GetFilterRecycled() bool {
	if o == nil || IsNil(o.FilterRecycled) {
		var ret bool
		return ret
	}
	return *o.FilterRecycled
}

// GetFilterRecycledOk returns a tuple with the FilterRecycled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchOption) GetFilterRecycledOk() (*bool, bool) {
	if o == nil || IsNil(o.FilterRecycled) {
		return nil, false
	}
	return o.FilterRecycled, true
}

// HasFilterRecycled returns a boolean if a field has been set.
func (o *SearchOption) HasFilterRecycled() bool {
	if o != nil && !IsNil(o.FilterRecycled) {
		return true
	}

	return false
}

// SetFilterRecycled gets a reference to the given bool and assigns it to the FilterRecycled field.
func (o *SearchOption) SetFilterRecycled(v bool) {
	o.FilterRecycled = &v
}

// GetHighlightPostTag returns the HighlightPostTag field value if set, zero value otherwise.
func (o *SearchOption) GetHighlightPostTag() string {
	if o == nil || IsNil(o.HighlightPostTag) {
		var ret string
		return ret
	}
	return *o.HighlightPostTag
}

// GetHighlightPostTagOk returns a tuple with the HighlightPostTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchOption) GetHighlightPostTagOk() (*string, bool) {
	if o == nil || IsNil(o.HighlightPostTag) {
		return nil, false
	}
	return o.HighlightPostTag, true
}

// HasHighlightPostTag returns a boolean if a field has been set.
func (o *SearchOption) HasHighlightPostTag() bool {
	if o != nil && !IsNil(o.HighlightPostTag) {
		return true
	}

	return false
}

// SetHighlightPostTag gets a reference to the given string and assigns it to the HighlightPostTag field.
func (o *SearchOption) SetHighlightPostTag(v string) {
	o.HighlightPostTag = &v
}

// GetHighlightPreTag returns the HighlightPreTag field value if set, zero value otherwise.
func (o *SearchOption) GetHighlightPreTag() string {
	if o == nil || IsNil(o.HighlightPreTag) {
		var ret string
		return ret
	}
	return *o.HighlightPreTag
}

// GetHighlightPreTagOk returns a tuple with the HighlightPreTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchOption) GetHighlightPreTagOk() (*string, bool) {
	if o == nil || IsNil(o.HighlightPreTag) {
		return nil, false
	}
	return o.HighlightPreTag, true
}

// HasHighlightPreTag returns a boolean if a field has been set.
func (o *SearchOption) HasHighlightPreTag() bool {
	if o != nil && !IsNil(o.HighlightPreTag) {
		return true
	}

	return false
}

// SetHighlightPreTag gets a reference to the given string and assigns it to the HighlightPreTag field.
func (o *SearchOption) SetHighlightPreTag(v string) {
	o.HighlightPreTag = &v
}

// GetIncludeCategoryNames returns the IncludeCategoryNames field value if set, zero value otherwise.
func (o *SearchOption) GetIncludeCategoryNames() []string {
	if o == nil || IsNil(o.IncludeCategoryNames) {
		var ret []string
		return ret
	}
	return o.IncludeCategoryNames
}

// GetIncludeCategoryNamesOk returns a tuple with the IncludeCategoryNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchOption) GetIncludeCategoryNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludeCategoryNames) {
		return nil, false
	}
	return o.IncludeCategoryNames, true
}

// HasIncludeCategoryNames returns a boolean if a field has been set.
func (o *SearchOption) HasIncludeCategoryNames() bool {
	if o != nil && !IsNil(o.IncludeCategoryNames) {
		return true
	}

	return false
}

// SetIncludeCategoryNames gets a reference to the given []string and assigns it to the IncludeCategoryNames field.
func (o *SearchOption) SetIncludeCategoryNames(v []string) {
	o.IncludeCategoryNames = v
}

// GetIncludeOwnerNames returns the IncludeOwnerNames field value if set, zero value otherwise.
func (o *SearchOption) GetIncludeOwnerNames() []string {
	if o == nil || IsNil(o.IncludeOwnerNames) {
		var ret []string
		return ret
	}
	return o.IncludeOwnerNames
}

// GetIncludeOwnerNamesOk returns a tuple with the IncludeOwnerNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchOption) GetIncludeOwnerNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludeOwnerNames) {
		return nil, false
	}
	return o.IncludeOwnerNames, true
}

// HasIncludeOwnerNames returns a boolean if a field has been set.
func (o *SearchOption) HasIncludeOwnerNames() bool {
	if o != nil && !IsNil(o.IncludeOwnerNames) {
		return true
	}

	return false
}

// SetIncludeOwnerNames gets a reference to the given []string and assigns it to the IncludeOwnerNames field.
func (o *SearchOption) SetIncludeOwnerNames(v []string) {
	o.IncludeOwnerNames = v
}

// GetIncludeTagNames returns the IncludeTagNames field value if set, zero value otherwise.
func (o *SearchOption) GetIncludeTagNames() []string {
	if o == nil || IsNil(o.IncludeTagNames) {
		var ret []string
		return ret
	}
	return o.IncludeTagNames
}

// GetIncludeTagNamesOk returns a tuple with the IncludeTagNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchOption) GetIncludeTagNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludeTagNames) {
		return nil, false
	}
	return o.IncludeTagNames, true
}

// HasIncludeTagNames returns a boolean if a field has been set.
func (o *SearchOption) HasIncludeTagNames() bool {
	if o != nil && !IsNil(o.IncludeTagNames) {
		return true
	}

	return false
}

// SetIncludeTagNames gets a reference to the given []string and assigns it to the IncludeTagNames field.
func (o *SearchOption) SetIncludeTagNames(v []string) {
	o.IncludeTagNames = v
}

// GetIncludeTypes returns the IncludeTypes field value if set, zero value otherwise.
func (o *SearchOption) GetIncludeTypes() []string {
	if o == nil || IsNil(o.IncludeTypes) {
		var ret []string
		return ret
	}
	return o.IncludeTypes
}

// GetIncludeTypesOk returns a tuple with the IncludeTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchOption) GetIncludeTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludeTypes) {
		return nil, false
	}
	return o.IncludeTypes, true
}

// HasIncludeTypes returns a boolean if a field has been set.
func (o *SearchOption) HasIncludeTypes() bool {
	if o != nil && !IsNil(o.IncludeTypes) {
		return true
	}

	return false
}

// SetIncludeTypes gets a reference to the given []string and assigns it to the IncludeTypes field.
func (o *SearchOption) SetIncludeTypes(v []string) {
	o.IncludeTypes = v
}

// GetKeyword returns the Keyword field value
func (o *SearchOption) GetKeyword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Keyword
}

// GetKeywordOk returns a tuple with the Keyword field value
// and a boolean to check if the value has been set.
func (o *SearchOption) GetKeywordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Keyword, true
}

// SetKeyword sets field value
func (o *SearchOption) SetKeyword(v string) {
	o.Keyword = v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *SearchOption) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchOption) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *SearchOption) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *SearchOption) SetLimit(v int32) {
	o.Limit = &v
}

func (o SearchOption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Annotations) {
		toSerialize["annotations"] = o.Annotations
	}
	if !IsNil(o.FilterExposed) {
		toSerialize["filterExposed"] = o.FilterExposed
	}
	if !IsNil(o.FilterPublished) {
		toSerialize["filterPublished"] = o.FilterPublished
	}
	if !IsNil(o.FilterRecycled) {
		toSerialize["filterRecycled"] = o.FilterRecycled
	}
	if !IsNil(o.HighlightPostTag) {
		toSerialize["highlightPostTag"] = o.HighlightPostTag
	}
	if !IsNil(o.HighlightPreTag) {
		toSerialize["highlightPreTag"] = o.HighlightPreTag
	}
	if !IsNil(o.IncludeCategoryNames) {
		toSerialize["includeCategoryNames"] = o.IncludeCategoryNames
	}
	if !IsNil(o.IncludeOwnerNames) {
		toSerialize["includeOwnerNames"] = o.IncludeOwnerNames
	}
	if !IsNil(o.IncludeTagNames) {
		toSerialize["includeTagNames"] = o.IncludeTagNames
	}
	if !IsNil(o.IncludeTypes) {
		toSerialize["includeTypes"] = o.IncludeTypes
	}
	toSerialize["keyword"] = o.Keyword
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	return toSerialize, nil
}

func (o *SearchOption) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"keyword",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchOption := _SearchOption{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSearchOption)

	if err != nil {
		return err
	}

	*o = SearchOption(varSearchOption)

	return err
}

type NullableSearchOption struct {
	value *SearchOption
	isSet bool
}

func (v NullableSearchOption) Get() *SearchOption {
	return v.value
}

func (v *NullableSearchOption) Set(val *SearchOption) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchOption) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchOption(val *SearchOption) *NullableSearchOption {
	return &NullableSearchOption{value: val, isSet: true}
}

func (v NullableSearchOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


