/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package public_sdk

import (
	"encoding/json"
)

// checks if the MenuItemStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MenuItemStatus{}

// MenuItemStatus struct for MenuItemStatus
type MenuItemStatus struct {
	// Calculated Display name of menu item.
	DisplayName *string `json:"displayName,omitempty"`
	// Calculated href of manu item.
	Href *string `json:"href,omitempty"`
}

// NewMenuItemStatus instantiates a new MenuItemStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMenuItemStatus() *MenuItemStatus {
	this := MenuItemStatus{}
	return &this
}

// NewMenuItemStatusWithDefaults instantiates a new MenuItemStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMenuItemStatusWithDefaults() *MenuItemStatus {
	this := MenuItemStatus{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *MenuItemStatus) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuItemStatus) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *MenuItemStatus) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *MenuItemStatus) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *MenuItemStatus) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuItemStatus) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *MenuItemStatus) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *MenuItemStatus) SetHref(v string) {
	o.Href = &v
}

func (o MenuItemStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MenuItemStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	return toSerialize, nil
}

type NullableMenuItemStatus struct {
	value *MenuItemStatus
	isSet bool
}

func (v NullableMenuItemStatus) Get() *MenuItemStatus {
	return v.value
}

func (v *NullableMenuItemStatus) Set(val *MenuItemStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableMenuItemStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableMenuItemStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMenuItemStatus(val *MenuItemStatus) *NullableMenuItemStatus {
	return &NullableMenuItemStatus{value: val, isSet: true}
}

func (v NullableMenuItemStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMenuItemStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


