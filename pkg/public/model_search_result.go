/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package public_sdk

import (
	"encoding/json"
)

// checks if the SearchResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchResult{}

// SearchResult struct for SearchResult
type SearchResult struct {
	Hits []HaloDocument `json:"hits,omitempty"`
	Keyword *string `json:"keyword,omitempty"`
	Limit *int32 `json:"limit,omitempty"`
	ProcessingTimeMillis *int64 `json:"processingTimeMillis,omitempty"`
	Total *int64 `json:"total,omitempty"`
}

// NewSearchResult instantiates a new SearchResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchResult() *SearchResult {
	this := SearchResult{}
	return &this
}

// NewSearchResultWithDefaults instantiates a new SearchResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchResultWithDefaults() *SearchResult {
	this := SearchResult{}
	return &this
}

// GetHits returns the Hits field value if set, zero value otherwise.
func (o *SearchResult) GetHits() []HaloDocument {
	if o == nil || IsNil(o.Hits) {
		var ret []HaloDocument
		return ret
	}
	return o.Hits
}

// GetHitsOk returns a tuple with the Hits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResult) GetHitsOk() ([]HaloDocument, bool) {
	if o == nil || IsNil(o.Hits) {
		return nil, false
	}
	return o.Hits, true
}

// HasHits returns a boolean if a field has been set.
func (o *SearchResult) HasHits() bool {
	if o != nil && !IsNil(o.Hits) {
		return true
	}

	return false
}

// SetHits gets a reference to the given []HaloDocument and assigns it to the Hits field.
func (o *SearchResult) SetHits(v []HaloDocument) {
	o.Hits = v
}

// GetKeyword returns the Keyword field value if set, zero value otherwise.
func (o *SearchResult) GetKeyword() string {
	if o == nil || IsNil(o.Keyword) {
		var ret string
		return ret
	}
	return *o.Keyword
}

// GetKeywordOk returns a tuple with the Keyword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResult) GetKeywordOk() (*string, bool) {
	if o == nil || IsNil(o.Keyword) {
		return nil, false
	}
	return o.Keyword, true
}

// HasKeyword returns a boolean if a field has been set.
func (o *SearchResult) HasKeyword() bool {
	if o != nil && !IsNil(o.Keyword) {
		return true
	}

	return false
}

// SetKeyword gets a reference to the given string and assigns it to the Keyword field.
func (o *SearchResult) SetKeyword(v string) {
	o.Keyword = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *SearchResult) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResult) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *SearchResult) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *SearchResult) SetLimit(v int32) {
	o.Limit = &v
}

// GetProcessingTimeMillis returns the ProcessingTimeMillis field value if set, zero value otherwise.
func (o *SearchResult) GetProcessingTimeMillis() int64 {
	if o == nil || IsNil(o.ProcessingTimeMillis) {
		var ret int64
		return ret
	}
	return *o.ProcessingTimeMillis
}

// GetProcessingTimeMillisOk returns a tuple with the ProcessingTimeMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResult) GetProcessingTimeMillisOk() (*int64, bool) {
	if o == nil || IsNil(o.ProcessingTimeMillis) {
		return nil, false
	}
	return o.ProcessingTimeMillis, true
}

// HasProcessingTimeMillis returns a boolean if a field has been set.
func (o *SearchResult) HasProcessingTimeMillis() bool {
	if o != nil && !IsNil(o.ProcessingTimeMillis) {
		return true
	}

	return false
}

// SetProcessingTimeMillis gets a reference to the given int64 and assigns it to the ProcessingTimeMillis field.
func (o *SearchResult) SetProcessingTimeMillis(v int64) {
	o.ProcessingTimeMillis = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *SearchResult) GetTotal() int64 {
	if o == nil || IsNil(o.Total) {
		var ret int64
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResult) GetTotalOk() (*int64, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *SearchResult) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int64 and assigns it to the Total field.
func (o *SearchResult) SetTotal(v int64) {
	o.Total = &v
}

func (o SearchResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hits) {
		toSerialize["hits"] = o.Hits
	}
	if !IsNil(o.Keyword) {
		toSerialize["keyword"] = o.Keyword
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.ProcessingTimeMillis) {
		toSerialize["processingTimeMillis"] = o.ProcessingTimeMillis
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	return toSerialize, nil
}

type NullableSearchResult struct {
	value *SearchResult
	isSet bool
}

func (v NullableSearchResult) Get() *SearchResult {
	return v.value
}

func (v *NullableSearchResult) Set(val *SearchResult) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchResult) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchResult(val *SearchResult) *NullableSearchResult {
	return &NullableSearchResult{value: val, isSet: true}
}

func (v NullableSearchResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


