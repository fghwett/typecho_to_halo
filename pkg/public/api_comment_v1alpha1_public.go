/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package public_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type CommentV1alpha1PublicAPI interface {

	/*
	CreateComment1 Method for CreateComment1

	Create a comment.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateComment1Request
	*/
	CreateComment1(ctx context.Context) ApiCreateComment1Request

	// CreateComment1Execute executes the request
	//  @return Comment
	CreateComment1Execute(r ApiCreateComment1Request) (*Comment, *http.Response, error)

	/*
	CreateReply1 Method for CreateReply1

	Create a reply.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name
	@return ApiCreateReply1Request
	*/
	CreateReply1(ctx context.Context, name string) ApiCreateReply1Request

	// CreateReply1Execute executes the request
	//  @return Reply
	CreateReply1Execute(r ApiCreateReply1Request) (*Reply, *http.Response, error)

	/*
	GetComment Method for GetComment

	Get a comment.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name
	@return ApiGetCommentRequest
	*/
	GetComment(ctx context.Context, name string) ApiGetCommentRequest

	// GetCommentExecute executes the request
	//  @return CommentVoList
	GetCommentExecute(r ApiGetCommentRequest) (*CommentVoList, *http.Response, error)

	/*
	ListCommentReplies Method for ListCommentReplies

	List comment replies.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name
	@return ApiListCommentRepliesRequest
	*/
	ListCommentReplies(ctx context.Context, name string) ApiListCommentRepliesRequest

	// ListCommentRepliesExecute executes the request
	//  @return ReplyVoList
	ListCommentRepliesExecute(r ApiListCommentRepliesRequest) (*ReplyVoList, *http.Response, error)

	/*
	ListComments1 Method for ListComments1

	List comments.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListComments1Request
	*/
	ListComments1(ctx context.Context) ApiListComments1Request

	// ListComments1Execute executes the request
	//  @return CommentWithReplyVoList
	ListComments1Execute(r ApiListComments1Request) (*CommentWithReplyVoList, *http.Response, error)
}

// CommentV1alpha1PublicAPIService CommentV1alpha1PublicAPI service
type CommentV1alpha1PublicAPIService service

type ApiCreateComment1Request struct {
	ctx context.Context
	ApiService CommentV1alpha1PublicAPI
	commentRequest *CommentRequest
}

func (r ApiCreateComment1Request) CommentRequest(commentRequest CommentRequest) ApiCreateComment1Request {
	r.commentRequest = &commentRequest
	return r
}

func (r ApiCreateComment1Request) Execute() (*Comment, *http.Response, error) {
	return r.ApiService.CreateComment1Execute(r)
}

/*
CreateComment1 Method for CreateComment1

Create a comment.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateComment1Request
*/
func (a *CommentV1alpha1PublicAPIService) CreateComment1(ctx context.Context) ApiCreateComment1Request {
	return ApiCreateComment1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Comment
func (a *CommentV1alpha1PublicAPIService) CreateComment1Execute(r ApiCreateComment1Request) (*Comment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Comment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommentV1alpha1PublicAPIService.CreateComment1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.halo.run/v1alpha1/comments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.commentRequest == nil {
		return localVarReturnValue, nil, reportError("commentRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.commentRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Comment
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateReply1Request struct {
	ctx context.Context
	ApiService CommentV1alpha1PublicAPI
	name string
	replyRequest *ReplyRequest
}

func (r ApiCreateReply1Request) ReplyRequest(replyRequest ReplyRequest) ApiCreateReply1Request {
	r.replyRequest = &replyRequest
	return r
}

func (r ApiCreateReply1Request) Execute() (*Reply, *http.Response, error) {
	return r.ApiService.CreateReply1Execute(r)
}

/*
CreateReply1 Method for CreateReply1

Create a reply.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiCreateReply1Request
*/
func (a *CommentV1alpha1PublicAPIService) CreateReply1(ctx context.Context, name string) ApiCreateReply1Request {
	return ApiCreateReply1Request{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return Reply
func (a *CommentV1alpha1PublicAPIService) CreateReply1Execute(r ApiCreateReply1Request) (*Reply, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Reply
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommentV1alpha1PublicAPIService.CreateReply1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.halo.run/v1alpha1/comments/{name}/reply"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.replyRequest == nil {
		return localVarReturnValue, nil, reportError("replyRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.replyRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Reply
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCommentRequest struct {
	ctx context.Context
	ApiService CommentV1alpha1PublicAPI
	name string
}

func (r ApiGetCommentRequest) Execute() (*CommentVoList, *http.Response, error) {
	return r.ApiService.GetCommentExecute(r)
}

/*
GetComment Method for GetComment

Get a comment.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiGetCommentRequest
*/
func (a *CommentV1alpha1PublicAPIService) GetComment(ctx context.Context, name string) ApiGetCommentRequest {
	return ApiGetCommentRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return CommentVoList
func (a *CommentV1alpha1PublicAPIService) GetCommentExecute(r ApiGetCommentRequest) (*CommentVoList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CommentVoList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommentV1alpha1PublicAPIService.GetComment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.halo.run/v1alpha1/comments/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v CommentVoList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListCommentRepliesRequest struct {
	ctx context.Context
	ApiService CommentV1alpha1PublicAPI
	name string
	page *int32
	size *int32
}

// Page number. Default is 0.
func (r ApiListCommentRepliesRequest) Page(page int32) ApiListCommentRepliesRequest {
	r.page = &page
	return r
}

// Size number. Default is 0.
func (r ApiListCommentRepliesRequest) Size(size int32) ApiListCommentRepliesRequest {
	r.size = &size
	return r
}

func (r ApiListCommentRepliesRequest) Execute() (*ReplyVoList, *http.Response, error) {
	return r.ApiService.ListCommentRepliesExecute(r)
}

/*
ListCommentReplies Method for ListCommentReplies

List comment replies.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiListCommentRepliesRequest
*/
func (a *CommentV1alpha1PublicAPIService) ListCommentReplies(ctx context.Context, name string) ApiListCommentRepliesRequest {
	return ApiListCommentRepliesRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return ReplyVoList
func (a *CommentV1alpha1PublicAPIService) ListCommentRepliesExecute(r ApiListCommentRepliesRequest) (*ReplyVoList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReplyVoList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommentV1alpha1PublicAPIService.ListCommentReplies")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.halo.run/v1alpha1/comments/{name}/reply"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ReplyVoList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListComments1Request struct {
	ctx context.Context
	ApiService CommentV1alpha1PublicAPI
	version *string
	kind *string
	name *string
	page *int32
	size *int32
	sort *[]string
	group *string
	withReplies *bool
	replySize *int32
}

// The comment subject version.
func (r ApiListComments1Request) Version(version string) ApiListComments1Request {
	r.version = &version
	return r
}

// The comment subject kind.
func (r ApiListComments1Request) Kind(kind string) ApiListComments1Request {
	r.kind = &kind
	return r
}

// The comment subject name.
func (r ApiListComments1Request) Name(name string) ApiListComments1Request {
	r.name = &name
	return r
}

// Page number. Default is 0.
func (r ApiListComments1Request) Page(page int32) ApiListComments1Request {
	r.page = &page
	return r
}

// Size number. Default is 0.
func (r ApiListComments1Request) Size(size int32) ApiListComments1Request {
	r.size = &size
	return r
}

// Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListComments1Request) Sort(sort []string) ApiListComments1Request {
	r.sort = &sort
	return r
}

// The comment subject group.
func (r ApiListComments1Request) Group(group string) ApiListComments1Request {
	r.group = &group
	return r
}

// Whether to include replies. Default is false.
func (r ApiListComments1Request) WithReplies(withReplies bool) ApiListComments1Request {
	r.withReplies = &withReplies
	return r
}

// Reply size of the comment, default is 10, only works when withReplies is true.
func (r ApiListComments1Request) ReplySize(replySize int32) ApiListComments1Request {
	r.replySize = &replySize
	return r
}

func (r ApiListComments1Request) Execute() (*CommentWithReplyVoList, *http.Response, error) {
	return r.ApiService.ListComments1Execute(r)
}

/*
ListComments1 Method for ListComments1

List comments.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListComments1Request
*/
func (a *CommentV1alpha1PublicAPIService) ListComments1(ctx context.Context) ApiListComments1Request {
	return ApiListComments1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CommentWithReplyVoList
func (a *CommentV1alpha1PublicAPIService) ListComments1Execute(r ApiListComments1Request) (*CommentWithReplyVoList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CommentWithReplyVoList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommentV1alpha1PublicAPIService.ListComments1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/api.halo.run/v1alpha1/comments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.version == nil {
		return localVarReturnValue, nil, reportError("version is required and must be specified")
	}
	if r.kind == nil {
		return localVarReturnValue, nil, reportError("kind is required and must be specified")
	}
	if r.name == nil {
		return localVarReturnValue, nil, reportError("name is required and must be specified")
	}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	if r.group != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "group", r.group, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "version", r.version, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "kind", r.kind, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	if r.withReplies != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withReplies", r.withReplies, "form", "")
	}
	if r.replySize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "replySize", r.replySize, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v CommentWithReplyVoList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
