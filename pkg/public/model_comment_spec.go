/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package public_sdk

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the CommentSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommentSpec{}

// CommentSpec struct for CommentSpec
type CommentSpec struct {
	AllowNotification bool `json:"allowNotification"`
	Approved bool `json:"approved"`
	ApprovedTime *time.Time `json:"approvedTime,omitempty"`
	Content string `json:"content"`
	CreationTime *time.Time `json:"creationTime,omitempty"`
	Hidden bool `json:"hidden"`
	IpAddress *string `json:"ipAddress,omitempty"`
	LastReadTime *time.Time `json:"lastReadTime,omitempty"`
	Owner CommentOwner `json:"owner"`
	Priority int32 `json:"priority"`
	Raw string `json:"raw"`
	SubjectRef Ref `json:"subjectRef"`
	Top bool `json:"top"`
	UserAgent *string `json:"userAgent,omitempty"`
}

type _CommentSpec CommentSpec

// NewCommentSpec instantiates a new CommentSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommentSpec(allowNotification bool, approved bool, content string, hidden bool, owner CommentOwner, priority int32, raw string, subjectRef Ref, top bool) *CommentSpec {
	this := CommentSpec{}
	this.AllowNotification = allowNotification
	this.Approved = approved
	this.Content = content
	this.Hidden = hidden
	this.Owner = owner
	this.Priority = priority
	this.Raw = raw
	this.SubjectRef = subjectRef
	this.Top = top
	return &this
}

// NewCommentSpecWithDefaults instantiates a new CommentSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentSpecWithDefaults() *CommentSpec {
	this := CommentSpec{}
	var allowNotification bool = true
	this.AllowNotification = allowNotification
	var approved bool = false
	this.Approved = approved
	var hidden bool = false
	this.Hidden = hidden
	var priority int32 = 0
	this.Priority = priority
	var top bool = false
	this.Top = top
	return &this
}

// GetAllowNotification returns the AllowNotification field value
func (o *CommentSpec) GetAllowNotification() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowNotification
}

// GetAllowNotificationOk returns a tuple with the AllowNotification field value
// and a boolean to check if the value has been set.
func (o *CommentSpec) GetAllowNotificationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowNotification, true
}

// SetAllowNotification sets field value
func (o *CommentSpec) SetAllowNotification(v bool) {
	o.AllowNotification = v
}

// GetApproved returns the Approved field value
func (o *CommentSpec) GetApproved() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Approved
}

// GetApprovedOk returns a tuple with the Approved field value
// and a boolean to check if the value has been set.
func (o *CommentSpec) GetApprovedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Approved, true
}

// SetApproved sets field value
func (o *CommentSpec) SetApproved(v bool) {
	o.Approved = v
}

// GetApprovedTime returns the ApprovedTime field value if set, zero value otherwise.
func (o *CommentSpec) GetApprovedTime() time.Time {
	if o == nil || IsNil(o.ApprovedTime) {
		var ret time.Time
		return ret
	}
	return *o.ApprovedTime
}

// GetApprovedTimeOk returns a tuple with the ApprovedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentSpec) GetApprovedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ApprovedTime) {
		return nil, false
	}
	return o.ApprovedTime, true
}

// HasApprovedTime returns a boolean if a field has been set.
func (o *CommentSpec) HasApprovedTime() bool {
	if o != nil && !IsNil(o.ApprovedTime) {
		return true
	}

	return false
}

// SetApprovedTime gets a reference to the given time.Time and assigns it to the ApprovedTime field.
func (o *CommentSpec) SetApprovedTime(v time.Time) {
	o.ApprovedTime = &v
}

// GetContent returns the Content field value
func (o *CommentSpec) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *CommentSpec) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *CommentSpec) SetContent(v string) {
	o.Content = v
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *CommentSpec) GetCreationTime() time.Time {
	if o == nil || IsNil(o.CreationTime) {
		var ret time.Time
		return ret
	}
	return *o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentSpec) GetCreationTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreationTime) {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *CommentSpec) HasCreationTime() bool {
	if o != nil && !IsNil(o.CreationTime) {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given time.Time and assigns it to the CreationTime field.
func (o *CommentSpec) SetCreationTime(v time.Time) {
	o.CreationTime = &v
}

// GetHidden returns the Hidden field value
func (o *CommentSpec) GetHidden() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Hidden
}

// GetHiddenOk returns a tuple with the Hidden field value
// and a boolean to check if the value has been set.
func (o *CommentSpec) GetHiddenOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hidden, true
}

// SetHidden sets field value
func (o *CommentSpec) SetHidden(v bool) {
	o.Hidden = v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *CommentSpec) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentSpec) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *CommentSpec) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *CommentSpec) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetLastReadTime returns the LastReadTime field value if set, zero value otherwise.
func (o *CommentSpec) GetLastReadTime() time.Time {
	if o == nil || IsNil(o.LastReadTime) {
		var ret time.Time
		return ret
	}
	return *o.LastReadTime
}

// GetLastReadTimeOk returns a tuple with the LastReadTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentSpec) GetLastReadTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastReadTime) {
		return nil, false
	}
	return o.LastReadTime, true
}

// HasLastReadTime returns a boolean if a field has been set.
func (o *CommentSpec) HasLastReadTime() bool {
	if o != nil && !IsNil(o.LastReadTime) {
		return true
	}

	return false
}

// SetLastReadTime gets a reference to the given time.Time and assigns it to the LastReadTime field.
func (o *CommentSpec) SetLastReadTime(v time.Time) {
	o.LastReadTime = &v
}

// GetOwner returns the Owner field value
func (o *CommentSpec) GetOwner() CommentOwner {
	if o == nil {
		var ret CommentOwner
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *CommentSpec) GetOwnerOk() (*CommentOwner, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *CommentSpec) SetOwner(v CommentOwner) {
	o.Owner = v
}

// GetPriority returns the Priority field value
func (o *CommentSpec) GetPriority() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value
// and a boolean to check if the value has been set.
func (o *CommentSpec) GetPriorityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Priority, true
}

// SetPriority sets field value
func (o *CommentSpec) SetPriority(v int32) {
	o.Priority = v
}

// GetRaw returns the Raw field value
func (o *CommentSpec) GetRaw() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Raw
}

// GetRawOk returns a tuple with the Raw field value
// and a boolean to check if the value has been set.
func (o *CommentSpec) GetRawOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Raw, true
}

// SetRaw sets field value
func (o *CommentSpec) SetRaw(v string) {
	o.Raw = v
}

// GetSubjectRef returns the SubjectRef field value
func (o *CommentSpec) GetSubjectRef() Ref {
	if o == nil {
		var ret Ref
		return ret
	}

	return o.SubjectRef
}

// GetSubjectRefOk returns a tuple with the SubjectRef field value
// and a boolean to check if the value has been set.
func (o *CommentSpec) GetSubjectRefOk() (*Ref, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubjectRef, true
}

// SetSubjectRef sets field value
func (o *CommentSpec) SetSubjectRef(v Ref) {
	o.SubjectRef = v
}

// GetTop returns the Top field value
func (o *CommentSpec) GetTop() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Top
}

// GetTopOk returns a tuple with the Top field value
// and a boolean to check if the value has been set.
func (o *CommentSpec) GetTopOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Top, true
}

// SetTop sets field value
func (o *CommentSpec) SetTop(v bool) {
	o.Top = v
}

// GetUserAgent returns the UserAgent field value if set, zero value otherwise.
func (o *CommentSpec) GetUserAgent() string {
	if o == nil || IsNil(o.UserAgent) {
		var ret string
		return ret
	}
	return *o.UserAgent
}

// GetUserAgentOk returns a tuple with the UserAgent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentSpec) GetUserAgentOk() (*string, bool) {
	if o == nil || IsNil(o.UserAgent) {
		return nil, false
	}
	return o.UserAgent, true
}

// HasUserAgent returns a boolean if a field has been set.
func (o *CommentSpec) HasUserAgent() bool {
	if o != nil && !IsNil(o.UserAgent) {
		return true
	}

	return false
}

// SetUserAgent gets a reference to the given string and assigns it to the UserAgent field.
func (o *CommentSpec) SetUserAgent(v string) {
	o.UserAgent = &v
}

func (o CommentSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommentSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["allowNotification"] = o.AllowNotification
	toSerialize["approved"] = o.Approved
	if !IsNil(o.ApprovedTime) {
		toSerialize["approvedTime"] = o.ApprovedTime
	}
	toSerialize["content"] = o.Content
	if !IsNil(o.CreationTime) {
		toSerialize["creationTime"] = o.CreationTime
	}
	toSerialize["hidden"] = o.Hidden
	if !IsNil(o.IpAddress) {
		toSerialize["ipAddress"] = o.IpAddress
	}
	if !IsNil(o.LastReadTime) {
		toSerialize["lastReadTime"] = o.LastReadTime
	}
	toSerialize["owner"] = o.Owner
	toSerialize["priority"] = o.Priority
	toSerialize["raw"] = o.Raw
	toSerialize["subjectRef"] = o.SubjectRef
	toSerialize["top"] = o.Top
	if !IsNil(o.UserAgent) {
		toSerialize["userAgent"] = o.UserAgent
	}
	return toSerialize, nil
}

func (o *CommentSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"allowNotification",
		"approved",
		"content",
		"hidden",
		"owner",
		"priority",
		"raw",
		"subjectRef",
		"top",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommentSpec := _CommentSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommentSpec)

	if err != nil {
		return err
	}

	*o = CommentSpec(varCommentSpec)

	return err
}

type NullableCommentSpec struct {
	value *CommentSpec
	isSet bool
}

func (v NullableCommentSpec) Get() *CommentSpec {
	return v.value
}

func (v *NullableCommentSpec) Set(val *CommentSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableCommentSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableCommentSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommentSpec(val *CommentSpec) *NullableCommentSpec {
	return &NullableCommentSpec{value: val, isSet: true}
}

func (v NullableCommentSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommentSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


