/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package public_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CommentRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommentRequest{}

// CommentRequest struct for CommentRequest
type CommentRequest struct {
	AllowNotification *bool `json:"allowNotification,omitempty"`
	Content string `json:"content"`
	Owner *CommentEmailOwner `json:"owner,omitempty"`
	Raw string `json:"raw"`
	SubjectRef Ref `json:"subjectRef"`
}

type _CommentRequest CommentRequest

// NewCommentRequest instantiates a new CommentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommentRequest(content string, raw string, subjectRef Ref) *CommentRequest {
	this := CommentRequest{}
	var allowNotification bool = false
	this.AllowNotification = &allowNotification
	this.Content = content
	this.Raw = raw
	this.SubjectRef = subjectRef
	return &this
}

// NewCommentRequestWithDefaults instantiates a new CommentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentRequestWithDefaults() *CommentRequest {
	this := CommentRequest{}
	var allowNotification bool = false
	this.AllowNotification = &allowNotification
	return &this
}

// GetAllowNotification returns the AllowNotification field value if set, zero value otherwise.
func (o *CommentRequest) GetAllowNotification() bool {
	if o == nil || IsNil(o.AllowNotification) {
		var ret bool
		return ret
	}
	return *o.AllowNotification
}

// GetAllowNotificationOk returns a tuple with the AllowNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentRequest) GetAllowNotificationOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowNotification) {
		return nil, false
	}
	return o.AllowNotification, true
}

// HasAllowNotification returns a boolean if a field has been set.
func (o *CommentRequest) HasAllowNotification() bool {
	if o != nil && !IsNil(o.AllowNotification) {
		return true
	}

	return false
}

// SetAllowNotification gets a reference to the given bool and assigns it to the AllowNotification field.
func (o *CommentRequest) SetAllowNotification(v bool) {
	o.AllowNotification = &v
}

// GetContent returns the Content field value
func (o *CommentRequest) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *CommentRequest) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *CommentRequest) SetContent(v string) {
	o.Content = v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *CommentRequest) GetOwner() CommentEmailOwner {
	if o == nil || IsNil(o.Owner) {
		var ret CommentEmailOwner
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentRequest) GetOwnerOk() (*CommentEmailOwner, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *CommentRequest) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given CommentEmailOwner and assigns it to the Owner field.
func (o *CommentRequest) SetOwner(v CommentEmailOwner) {
	o.Owner = &v
}

// GetRaw returns the Raw field value
func (o *CommentRequest) GetRaw() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Raw
}

// GetRawOk returns a tuple with the Raw field value
// and a boolean to check if the value has been set.
func (o *CommentRequest) GetRawOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Raw, true
}

// SetRaw sets field value
func (o *CommentRequest) SetRaw(v string) {
	o.Raw = v
}

// GetSubjectRef returns the SubjectRef field value
func (o *CommentRequest) GetSubjectRef() Ref {
	if o == nil {
		var ret Ref
		return ret
	}

	return o.SubjectRef
}

// GetSubjectRefOk returns a tuple with the SubjectRef field value
// and a boolean to check if the value has been set.
func (o *CommentRequest) GetSubjectRefOk() (*Ref, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubjectRef, true
}

// SetSubjectRef sets field value
func (o *CommentRequest) SetSubjectRef(v Ref) {
	o.SubjectRef = v
}

func (o CommentRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommentRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowNotification) {
		toSerialize["allowNotification"] = o.AllowNotification
	}
	toSerialize["content"] = o.Content
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	toSerialize["raw"] = o.Raw
	toSerialize["subjectRef"] = o.SubjectRef
	return toSerialize, nil
}

func (o *CommentRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"content",
		"raw",
		"subjectRef",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommentRequest := _CommentRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommentRequest)

	if err != nil {
		return err
	}

	*o = CommentRequest(varCommentRequest)

	return err
}

type NullableCommentRequest struct {
	value *CommentRequest
	isSet bool
}

func (v NullableCommentRequest) Get() *CommentRequest {
	return v.value
}

func (v *NullableCommentRequest) Set(val *CommentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCommentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCommentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommentRequest(val *CommentRequest) *NullableCommentRequest {
	return &NullableCommentRequest{value: val, isSet: true}
}

func (v NullableCommentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


