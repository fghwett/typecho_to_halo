/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package public_sdk

import (
	"encoding/json"
)

// checks if the TagStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TagStatus{}

// TagStatus struct for TagStatus
type TagStatus struct {
	ObservedVersion *int64 `json:"observedVersion,omitempty"`
	Permalink *string `json:"permalink,omitempty"`
	PostCount *int32 `json:"postCount,omitempty"`
	VisiblePostCount *int32 `json:"visiblePostCount,omitempty"`
}

// NewTagStatus instantiates a new TagStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagStatus() *TagStatus {
	this := TagStatus{}
	return &this
}

// NewTagStatusWithDefaults instantiates a new TagStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagStatusWithDefaults() *TagStatus {
	this := TagStatus{}
	return &this
}

// GetObservedVersion returns the ObservedVersion field value if set, zero value otherwise.
func (o *TagStatus) GetObservedVersion() int64 {
	if o == nil || IsNil(o.ObservedVersion) {
		var ret int64
		return ret
	}
	return *o.ObservedVersion
}

// GetObservedVersionOk returns a tuple with the ObservedVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagStatus) GetObservedVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.ObservedVersion) {
		return nil, false
	}
	return o.ObservedVersion, true
}

// HasObservedVersion returns a boolean if a field has been set.
func (o *TagStatus) HasObservedVersion() bool {
	if o != nil && !IsNil(o.ObservedVersion) {
		return true
	}

	return false
}

// SetObservedVersion gets a reference to the given int64 and assigns it to the ObservedVersion field.
func (o *TagStatus) SetObservedVersion(v int64) {
	o.ObservedVersion = &v
}

// GetPermalink returns the Permalink field value if set, zero value otherwise.
func (o *TagStatus) GetPermalink() string {
	if o == nil || IsNil(o.Permalink) {
		var ret string
		return ret
	}
	return *o.Permalink
}

// GetPermalinkOk returns a tuple with the Permalink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagStatus) GetPermalinkOk() (*string, bool) {
	if o == nil || IsNil(o.Permalink) {
		return nil, false
	}
	return o.Permalink, true
}

// HasPermalink returns a boolean if a field has been set.
func (o *TagStatus) HasPermalink() bool {
	if o != nil && !IsNil(o.Permalink) {
		return true
	}

	return false
}

// SetPermalink gets a reference to the given string and assigns it to the Permalink field.
func (o *TagStatus) SetPermalink(v string) {
	o.Permalink = &v
}

// GetPostCount returns the PostCount field value if set, zero value otherwise.
func (o *TagStatus) GetPostCount() int32 {
	if o == nil || IsNil(o.PostCount) {
		var ret int32
		return ret
	}
	return *o.PostCount
}

// GetPostCountOk returns a tuple with the PostCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagStatus) GetPostCountOk() (*int32, bool) {
	if o == nil || IsNil(o.PostCount) {
		return nil, false
	}
	return o.PostCount, true
}

// HasPostCount returns a boolean if a field has been set.
func (o *TagStatus) HasPostCount() bool {
	if o != nil && !IsNil(o.PostCount) {
		return true
	}

	return false
}

// SetPostCount gets a reference to the given int32 and assigns it to the PostCount field.
func (o *TagStatus) SetPostCount(v int32) {
	o.PostCount = &v
}

// GetVisiblePostCount returns the VisiblePostCount field value if set, zero value otherwise.
func (o *TagStatus) GetVisiblePostCount() int32 {
	if o == nil || IsNil(o.VisiblePostCount) {
		var ret int32
		return ret
	}
	return *o.VisiblePostCount
}

// GetVisiblePostCountOk returns a tuple with the VisiblePostCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagStatus) GetVisiblePostCountOk() (*int32, bool) {
	if o == nil || IsNil(o.VisiblePostCount) {
		return nil, false
	}
	return o.VisiblePostCount, true
}

// HasVisiblePostCount returns a boolean if a field has been set.
func (o *TagStatus) HasVisiblePostCount() bool {
	if o != nil && !IsNil(o.VisiblePostCount) {
		return true
	}

	return false
}

// SetVisiblePostCount gets a reference to the given int32 and assigns it to the VisiblePostCount field.
func (o *TagStatus) SetVisiblePostCount(v int32) {
	o.VisiblePostCount = &v
}

func (o TagStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TagStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ObservedVersion) {
		toSerialize["observedVersion"] = o.ObservedVersion
	}
	if !IsNil(o.Permalink) {
		toSerialize["permalink"] = o.Permalink
	}
	if !IsNil(o.PostCount) {
		toSerialize["postCount"] = o.PostCount
	}
	if !IsNil(o.VisiblePostCount) {
		toSerialize["visiblePostCount"] = o.VisiblePostCount
	}
	return toSerialize, nil
}

type NullableTagStatus struct {
	value *TagStatus
	isSet bool
}

func (v NullableTagStatus) Get() *TagStatus {
	return v.value
}

func (v *NullableTagStatus) Set(val *TagStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableTagStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableTagStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagStatus(val *TagStatus) *NullableTagStatus {
	return &NullableTagStatus{value: val, isSet: true}
}

func (v NullableTagStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


