/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package public_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReplyVo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplyVo{}

// ReplyVo A chunk of items.
type ReplyVo struct {
	Metadata Metadata `json:"metadata"`
	Owner OwnerInfo `json:"owner"`
	Spec ReplySpec `json:"spec"`
	Stats CommentStatsVo `json:"stats"`
}

type _ReplyVo ReplyVo

// NewReplyVo instantiates a new ReplyVo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplyVo(metadata Metadata, owner OwnerInfo, spec ReplySpec, stats CommentStatsVo) *ReplyVo {
	this := ReplyVo{}
	this.Metadata = metadata
	this.Owner = owner
	this.Spec = spec
	this.Stats = stats
	return &this
}

// NewReplyVoWithDefaults instantiates a new ReplyVo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplyVoWithDefaults() *ReplyVo {
	this := ReplyVo{}
	return &this
}

// GetMetadata returns the Metadata field value
func (o *ReplyVo) GetMetadata() Metadata {
	if o == nil {
		var ret Metadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *ReplyVo) GetMetadataOk() (*Metadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *ReplyVo) SetMetadata(v Metadata) {
	o.Metadata = v
}

// GetOwner returns the Owner field value
func (o *ReplyVo) GetOwner() OwnerInfo {
	if o == nil {
		var ret OwnerInfo
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *ReplyVo) GetOwnerOk() (*OwnerInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *ReplyVo) SetOwner(v OwnerInfo) {
	o.Owner = v
}

// GetSpec returns the Spec field value
func (o *ReplyVo) GetSpec() ReplySpec {
	if o == nil {
		var ret ReplySpec
		return ret
	}

	return o.Spec
}

// GetSpecOk returns a tuple with the Spec field value
// and a boolean to check if the value has been set.
func (o *ReplyVo) GetSpecOk() (*ReplySpec, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Spec, true
}

// SetSpec sets field value
func (o *ReplyVo) SetSpec(v ReplySpec) {
	o.Spec = v
}

// GetStats returns the Stats field value
func (o *ReplyVo) GetStats() CommentStatsVo {
	if o == nil {
		var ret CommentStatsVo
		return ret
	}

	return o.Stats
}

// GetStatsOk returns a tuple with the Stats field value
// and a boolean to check if the value has been set.
func (o *ReplyVo) GetStatsOk() (*CommentStatsVo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stats, true
}

// SetStats sets field value
func (o *ReplyVo) SetStats(v CommentStatsVo) {
	o.Stats = v
}

func (o ReplyVo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplyVo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["metadata"] = o.Metadata
	toSerialize["owner"] = o.Owner
	toSerialize["spec"] = o.Spec
	toSerialize["stats"] = o.Stats
	return toSerialize, nil
}

func (o *ReplyVo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metadata",
		"owner",
		"spec",
		"stats",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReplyVo := _ReplyVo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReplyVo)

	if err != nil {
		return err
	}

	*o = ReplyVo(varReplyVo)

	return err
}

type NullableReplyVo struct {
	value *ReplyVo
	isSet bool
}

func (v NullableReplyVo) Get() *ReplyVo {
	return v.value
}

func (v *NullableReplyVo) Set(val *ReplyVo) {
	v.value = val
	v.isSet = true
}

func (v NullableReplyVo) IsSet() bool {
	return v.isSet
}

func (v *NullableReplyVo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplyVo(val *ReplyVo) *NullableReplyVo {
	return &NullableReplyVo{value: val, isSet: true}
}

func (v NullableReplyVo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplyVo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


