/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package public_sdk

import (
	"encoding/json"
)

// checks if the VoteRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VoteRequest{}

// VoteRequest struct for VoteRequest
type VoteRequest struct {
	Group *string `json:"group,omitempty"`
	Name *string `json:"name,omitempty"`
	Plural *string `json:"plural,omitempty"`
}

// NewVoteRequest instantiates a new VoteRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVoteRequest() *VoteRequest {
	this := VoteRequest{}
	return &this
}

// NewVoteRequestWithDefaults instantiates a new VoteRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVoteRequestWithDefaults() *VoteRequest {
	this := VoteRequest{}
	return &this
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *VoteRequest) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoteRequest) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *VoteRequest) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *VoteRequest) SetGroup(v string) {
	o.Group = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VoteRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoteRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VoteRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VoteRequest) SetName(v string) {
	o.Name = &v
}

// GetPlural returns the Plural field value if set, zero value otherwise.
func (o *VoteRequest) GetPlural() string {
	if o == nil || IsNil(o.Plural) {
		var ret string
		return ret
	}
	return *o.Plural
}

// GetPluralOk returns a tuple with the Plural field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoteRequest) GetPluralOk() (*string, bool) {
	if o == nil || IsNil(o.Plural) {
		return nil, false
	}
	return o.Plural, true
}

// HasPlural returns a boolean if a field has been set.
func (o *VoteRequest) HasPlural() bool {
	if o != nil && !IsNil(o.Plural) {
		return true
	}

	return false
}

// SetPlural gets a reference to the given string and assigns it to the Plural field.
func (o *VoteRequest) SetPlural(v string) {
	o.Plural = &v
}

func (o VoteRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VoteRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Plural) {
		toSerialize["plural"] = o.Plural
	}
	return toSerialize, nil
}

type NullableVoteRequest struct {
	value *VoteRequest
	isSet bool
}

func (v NullableVoteRequest) Get() *VoteRequest {
	return v.value
}

func (v *NullableVoteRequest) Set(val *VoteRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableVoteRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableVoteRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVoteRequest(val *VoteRequest) *NullableVoteRequest {
	return &NullableVoteRequest{value: val, isSet: true}
}

func (v NullableVoteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVoteRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


