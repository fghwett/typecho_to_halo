// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fghwett/typecho-to-halo/pkg/typecho/model"
)

func newTypechoComments(db *gorm.DB, opts ...gen.DOOption) typechoComments {
	_typechoComments := typechoComments{}

	_typechoComments.typechoCommentsDo.UseDB(db, opts...)
	_typechoComments.typechoCommentsDo.UseModel(&model.TypechoComments{})

	tableName := _typechoComments.typechoCommentsDo.TableName()
	_typechoComments.ALL = field.NewAsterisk(tableName)
	_typechoComments.Coid = field.NewUint32(tableName, "coid")
	_typechoComments.Cid = field.NewUint32(tableName, "cid")
	_typechoComments.Created = field.NewUint32(tableName, "created")
	_typechoComments.Author = field.NewString(tableName, "author")
	_typechoComments.AuthorID = field.NewUint32(tableName, "authorId")
	_typechoComments.OwnerID = field.NewUint32(tableName, "ownerId")
	_typechoComments.Mail = field.NewString(tableName, "mail")
	_typechoComments.URL = field.NewString(tableName, "url")
	_typechoComments.IP = field.NewString(tableName, "ip")
	_typechoComments.Agent = field.NewString(tableName, "agent")
	_typechoComments.Text = field.NewString(tableName, "text")
	_typechoComments.Type = field.NewString(tableName, "type")
	_typechoComments.Status = field.NewString(tableName, "status")
	_typechoComments.Parent = field.NewUint32(tableName, "parent")

	_typechoComments.fillFieldMap()

	return _typechoComments
}

type typechoComments struct {
	typechoCommentsDo

	ALL      field.Asterisk
	Coid     field.Uint32
	Cid      field.Uint32
	Created  field.Uint32
	Author   field.String
	AuthorID field.Uint32
	OwnerID  field.Uint32
	Mail     field.String
	URL      field.String
	IP       field.String
	Agent    field.String
	Text     field.String
	Type     field.String
	Status   field.String
	Parent   field.Uint32

	fieldMap map[string]field.Expr
}

func (t typechoComments) Table(newTableName string) *typechoComments {
	t.typechoCommentsDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t typechoComments) As(alias string) *typechoComments {
	t.typechoCommentsDo.DO = *(t.typechoCommentsDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *typechoComments) updateTableName(table string) *typechoComments {
	t.ALL = field.NewAsterisk(table)
	t.Coid = field.NewUint32(table, "coid")
	t.Cid = field.NewUint32(table, "cid")
	t.Created = field.NewUint32(table, "created")
	t.Author = field.NewString(table, "author")
	t.AuthorID = field.NewUint32(table, "authorId")
	t.OwnerID = field.NewUint32(table, "ownerId")
	t.Mail = field.NewString(table, "mail")
	t.URL = field.NewString(table, "url")
	t.IP = field.NewString(table, "ip")
	t.Agent = field.NewString(table, "agent")
	t.Text = field.NewString(table, "text")
	t.Type = field.NewString(table, "type")
	t.Status = field.NewString(table, "status")
	t.Parent = field.NewUint32(table, "parent")

	t.fillFieldMap()

	return t
}

func (t *typechoComments) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *typechoComments) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 14)
	t.fieldMap["coid"] = t.Coid
	t.fieldMap["cid"] = t.Cid
	t.fieldMap["created"] = t.Created
	t.fieldMap["author"] = t.Author
	t.fieldMap["authorId"] = t.AuthorID
	t.fieldMap["ownerId"] = t.OwnerID
	t.fieldMap["mail"] = t.Mail
	t.fieldMap["url"] = t.URL
	t.fieldMap["ip"] = t.IP
	t.fieldMap["agent"] = t.Agent
	t.fieldMap["text"] = t.Text
	t.fieldMap["type"] = t.Type
	t.fieldMap["status"] = t.Status
	t.fieldMap["parent"] = t.Parent
}

func (t typechoComments) clone(db *gorm.DB) typechoComments {
	t.typechoCommentsDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t typechoComments) replaceDB(db *gorm.DB) typechoComments {
	t.typechoCommentsDo.ReplaceDB(db)
	return t
}

type typechoCommentsDo struct{ gen.DO }

type ITypechoCommentsDo interface {
	gen.SubQuery
	Debug() ITypechoCommentsDo
	WithContext(ctx context.Context) ITypechoCommentsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITypechoCommentsDo
	WriteDB() ITypechoCommentsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITypechoCommentsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITypechoCommentsDo
	Not(conds ...gen.Condition) ITypechoCommentsDo
	Or(conds ...gen.Condition) ITypechoCommentsDo
	Select(conds ...field.Expr) ITypechoCommentsDo
	Where(conds ...gen.Condition) ITypechoCommentsDo
	Order(conds ...field.Expr) ITypechoCommentsDo
	Distinct(cols ...field.Expr) ITypechoCommentsDo
	Omit(cols ...field.Expr) ITypechoCommentsDo
	Join(table schema.Tabler, on ...field.Expr) ITypechoCommentsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITypechoCommentsDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITypechoCommentsDo
	Group(cols ...field.Expr) ITypechoCommentsDo
	Having(conds ...gen.Condition) ITypechoCommentsDo
	Limit(limit int) ITypechoCommentsDo
	Offset(offset int) ITypechoCommentsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITypechoCommentsDo
	Unscoped() ITypechoCommentsDo
	Create(values ...*model.TypechoComments) error
	CreateInBatches(values []*model.TypechoComments, batchSize int) error
	Save(values ...*model.TypechoComments) error
	First() (*model.TypechoComments, error)
	Take() (*model.TypechoComments, error)
	Last() (*model.TypechoComments, error)
	Find() ([]*model.TypechoComments, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TypechoComments, err error)
	FindInBatches(result *[]*model.TypechoComments, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TypechoComments) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITypechoCommentsDo
	Assign(attrs ...field.AssignExpr) ITypechoCommentsDo
	Joins(fields ...field.RelationField) ITypechoCommentsDo
	Preload(fields ...field.RelationField) ITypechoCommentsDo
	FirstOrInit() (*model.TypechoComments, error)
	FirstOrCreate() (*model.TypechoComments, error)
	FindByPage(offset int, limit int) (result []*model.TypechoComments, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITypechoCommentsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t typechoCommentsDo) Debug() ITypechoCommentsDo {
	return t.withDO(t.DO.Debug())
}

func (t typechoCommentsDo) WithContext(ctx context.Context) ITypechoCommentsDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t typechoCommentsDo) ReadDB() ITypechoCommentsDo {
	return t.Clauses(dbresolver.Read)
}

func (t typechoCommentsDo) WriteDB() ITypechoCommentsDo {
	return t.Clauses(dbresolver.Write)
}

func (t typechoCommentsDo) Session(config *gorm.Session) ITypechoCommentsDo {
	return t.withDO(t.DO.Session(config))
}

func (t typechoCommentsDo) Clauses(conds ...clause.Expression) ITypechoCommentsDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t typechoCommentsDo) Returning(value interface{}, columns ...string) ITypechoCommentsDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t typechoCommentsDo) Not(conds ...gen.Condition) ITypechoCommentsDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t typechoCommentsDo) Or(conds ...gen.Condition) ITypechoCommentsDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t typechoCommentsDo) Select(conds ...field.Expr) ITypechoCommentsDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t typechoCommentsDo) Where(conds ...gen.Condition) ITypechoCommentsDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t typechoCommentsDo) Order(conds ...field.Expr) ITypechoCommentsDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t typechoCommentsDo) Distinct(cols ...field.Expr) ITypechoCommentsDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t typechoCommentsDo) Omit(cols ...field.Expr) ITypechoCommentsDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t typechoCommentsDo) Join(table schema.Tabler, on ...field.Expr) ITypechoCommentsDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t typechoCommentsDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITypechoCommentsDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t typechoCommentsDo) RightJoin(table schema.Tabler, on ...field.Expr) ITypechoCommentsDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t typechoCommentsDo) Group(cols ...field.Expr) ITypechoCommentsDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t typechoCommentsDo) Having(conds ...gen.Condition) ITypechoCommentsDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t typechoCommentsDo) Limit(limit int) ITypechoCommentsDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t typechoCommentsDo) Offset(offset int) ITypechoCommentsDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t typechoCommentsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITypechoCommentsDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t typechoCommentsDo) Unscoped() ITypechoCommentsDo {
	return t.withDO(t.DO.Unscoped())
}

func (t typechoCommentsDo) Create(values ...*model.TypechoComments) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t typechoCommentsDo) CreateInBatches(values []*model.TypechoComments, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t typechoCommentsDo) Save(values ...*model.TypechoComments) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t typechoCommentsDo) First() (*model.TypechoComments, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TypechoComments), nil
	}
}

func (t typechoCommentsDo) Take() (*model.TypechoComments, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TypechoComments), nil
	}
}

func (t typechoCommentsDo) Last() (*model.TypechoComments, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TypechoComments), nil
	}
}

func (t typechoCommentsDo) Find() ([]*model.TypechoComments, error) {
	result, err := t.DO.Find()
	return result.([]*model.TypechoComments), err
}

func (t typechoCommentsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TypechoComments, err error) {
	buf := make([]*model.TypechoComments, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t typechoCommentsDo) FindInBatches(result *[]*model.TypechoComments, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t typechoCommentsDo) Attrs(attrs ...field.AssignExpr) ITypechoCommentsDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t typechoCommentsDo) Assign(attrs ...field.AssignExpr) ITypechoCommentsDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t typechoCommentsDo) Joins(fields ...field.RelationField) ITypechoCommentsDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t typechoCommentsDo) Preload(fields ...field.RelationField) ITypechoCommentsDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t typechoCommentsDo) FirstOrInit() (*model.TypechoComments, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TypechoComments), nil
	}
}

func (t typechoCommentsDo) FirstOrCreate() (*model.TypechoComments, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TypechoComments), nil
	}
}

func (t typechoCommentsDo) FindByPage(offset int, limit int) (result []*model.TypechoComments, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t typechoCommentsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t typechoCommentsDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t typechoCommentsDo) Delete(models ...*model.TypechoComments) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *typechoCommentsDo) withDO(do gen.Dao) *typechoCommentsDo {
	t.DO = *do.(*gen.DO)
	return t
}
