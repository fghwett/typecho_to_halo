// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fghwett/typecho-to-halo/pkg/typecho/model"
)

func newTypechoOptions(db *gorm.DB, opts ...gen.DOOption) typechoOptions {
	_typechoOptions := typechoOptions{}

	_typechoOptions.typechoOptionsDo.UseDB(db, opts...)
	_typechoOptions.typechoOptionsDo.UseModel(&model.TypechoOptions{})

	tableName := _typechoOptions.typechoOptionsDo.TableName()
	_typechoOptions.ALL = field.NewAsterisk(tableName)
	_typechoOptions.Name = field.NewString(tableName, "name")
	_typechoOptions.User = field.NewUint32(tableName, "user")
	_typechoOptions.Value = field.NewString(tableName, "value")

	_typechoOptions.fillFieldMap()

	return _typechoOptions
}

type typechoOptions struct {
	typechoOptionsDo

	ALL   field.Asterisk
	Name  field.String
	User  field.Uint32
	Value field.String

	fieldMap map[string]field.Expr
}

func (t typechoOptions) Table(newTableName string) *typechoOptions {
	t.typechoOptionsDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t typechoOptions) As(alias string) *typechoOptions {
	t.typechoOptionsDo.DO = *(t.typechoOptionsDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *typechoOptions) updateTableName(table string) *typechoOptions {
	t.ALL = field.NewAsterisk(table)
	t.Name = field.NewString(table, "name")
	t.User = field.NewUint32(table, "user")
	t.Value = field.NewString(table, "value")

	t.fillFieldMap()

	return t
}

func (t *typechoOptions) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *typechoOptions) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 3)
	t.fieldMap["name"] = t.Name
	t.fieldMap["user"] = t.User
	t.fieldMap["value"] = t.Value
}

func (t typechoOptions) clone(db *gorm.DB) typechoOptions {
	t.typechoOptionsDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t typechoOptions) replaceDB(db *gorm.DB) typechoOptions {
	t.typechoOptionsDo.ReplaceDB(db)
	return t
}

type typechoOptionsDo struct{ gen.DO }

type ITypechoOptionsDo interface {
	gen.SubQuery
	Debug() ITypechoOptionsDo
	WithContext(ctx context.Context) ITypechoOptionsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITypechoOptionsDo
	WriteDB() ITypechoOptionsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITypechoOptionsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITypechoOptionsDo
	Not(conds ...gen.Condition) ITypechoOptionsDo
	Or(conds ...gen.Condition) ITypechoOptionsDo
	Select(conds ...field.Expr) ITypechoOptionsDo
	Where(conds ...gen.Condition) ITypechoOptionsDo
	Order(conds ...field.Expr) ITypechoOptionsDo
	Distinct(cols ...field.Expr) ITypechoOptionsDo
	Omit(cols ...field.Expr) ITypechoOptionsDo
	Join(table schema.Tabler, on ...field.Expr) ITypechoOptionsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITypechoOptionsDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITypechoOptionsDo
	Group(cols ...field.Expr) ITypechoOptionsDo
	Having(conds ...gen.Condition) ITypechoOptionsDo
	Limit(limit int) ITypechoOptionsDo
	Offset(offset int) ITypechoOptionsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITypechoOptionsDo
	Unscoped() ITypechoOptionsDo
	Create(values ...*model.TypechoOptions) error
	CreateInBatches(values []*model.TypechoOptions, batchSize int) error
	Save(values ...*model.TypechoOptions) error
	First() (*model.TypechoOptions, error)
	Take() (*model.TypechoOptions, error)
	Last() (*model.TypechoOptions, error)
	Find() ([]*model.TypechoOptions, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TypechoOptions, err error)
	FindInBatches(result *[]*model.TypechoOptions, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TypechoOptions) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITypechoOptionsDo
	Assign(attrs ...field.AssignExpr) ITypechoOptionsDo
	Joins(fields ...field.RelationField) ITypechoOptionsDo
	Preload(fields ...field.RelationField) ITypechoOptionsDo
	FirstOrInit() (*model.TypechoOptions, error)
	FirstOrCreate() (*model.TypechoOptions, error)
	FindByPage(offset int, limit int) (result []*model.TypechoOptions, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITypechoOptionsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t typechoOptionsDo) Debug() ITypechoOptionsDo {
	return t.withDO(t.DO.Debug())
}

func (t typechoOptionsDo) WithContext(ctx context.Context) ITypechoOptionsDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t typechoOptionsDo) ReadDB() ITypechoOptionsDo {
	return t.Clauses(dbresolver.Read)
}

func (t typechoOptionsDo) WriteDB() ITypechoOptionsDo {
	return t.Clauses(dbresolver.Write)
}

func (t typechoOptionsDo) Session(config *gorm.Session) ITypechoOptionsDo {
	return t.withDO(t.DO.Session(config))
}

func (t typechoOptionsDo) Clauses(conds ...clause.Expression) ITypechoOptionsDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t typechoOptionsDo) Returning(value interface{}, columns ...string) ITypechoOptionsDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t typechoOptionsDo) Not(conds ...gen.Condition) ITypechoOptionsDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t typechoOptionsDo) Or(conds ...gen.Condition) ITypechoOptionsDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t typechoOptionsDo) Select(conds ...field.Expr) ITypechoOptionsDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t typechoOptionsDo) Where(conds ...gen.Condition) ITypechoOptionsDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t typechoOptionsDo) Order(conds ...field.Expr) ITypechoOptionsDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t typechoOptionsDo) Distinct(cols ...field.Expr) ITypechoOptionsDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t typechoOptionsDo) Omit(cols ...field.Expr) ITypechoOptionsDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t typechoOptionsDo) Join(table schema.Tabler, on ...field.Expr) ITypechoOptionsDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t typechoOptionsDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITypechoOptionsDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t typechoOptionsDo) RightJoin(table schema.Tabler, on ...field.Expr) ITypechoOptionsDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t typechoOptionsDo) Group(cols ...field.Expr) ITypechoOptionsDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t typechoOptionsDo) Having(conds ...gen.Condition) ITypechoOptionsDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t typechoOptionsDo) Limit(limit int) ITypechoOptionsDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t typechoOptionsDo) Offset(offset int) ITypechoOptionsDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t typechoOptionsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITypechoOptionsDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t typechoOptionsDo) Unscoped() ITypechoOptionsDo {
	return t.withDO(t.DO.Unscoped())
}

func (t typechoOptionsDo) Create(values ...*model.TypechoOptions) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t typechoOptionsDo) CreateInBatches(values []*model.TypechoOptions, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t typechoOptionsDo) Save(values ...*model.TypechoOptions) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t typechoOptionsDo) First() (*model.TypechoOptions, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TypechoOptions), nil
	}
}

func (t typechoOptionsDo) Take() (*model.TypechoOptions, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TypechoOptions), nil
	}
}

func (t typechoOptionsDo) Last() (*model.TypechoOptions, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TypechoOptions), nil
	}
}

func (t typechoOptionsDo) Find() ([]*model.TypechoOptions, error) {
	result, err := t.DO.Find()
	return result.([]*model.TypechoOptions), err
}

func (t typechoOptionsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TypechoOptions, err error) {
	buf := make([]*model.TypechoOptions, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t typechoOptionsDo) FindInBatches(result *[]*model.TypechoOptions, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t typechoOptionsDo) Attrs(attrs ...field.AssignExpr) ITypechoOptionsDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t typechoOptionsDo) Assign(attrs ...field.AssignExpr) ITypechoOptionsDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t typechoOptionsDo) Joins(fields ...field.RelationField) ITypechoOptionsDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t typechoOptionsDo) Preload(fields ...field.RelationField) ITypechoOptionsDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t typechoOptionsDo) FirstOrInit() (*model.TypechoOptions, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TypechoOptions), nil
	}
}

func (t typechoOptionsDo) FirstOrCreate() (*model.TypechoOptions, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TypechoOptions), nil
	}
}

func (t typechoOptionsDo) FindByPage(offset int, limit int) (result []*model.TypechoOptions, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t typechoOptionsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t typechoOptionsDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t typechoOptionsDo) Delete(models ...*model.TypechoOptions) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *typechoOptionsDo) withDO(do gen.Dao) *typechoOptionsDo {
	t.DO = *do.(*gen.DO)
	return t
}
