// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                    = new(Query)
	TypechoComments      *typechoComments
	TypechoContents      *typechoContents
	TypechoFields        *typechoFields
	TypechoMetas         *typechoMetas
	TypechoOptions       *typechoOptions
	TypechoRelationships *typechoRelationships
	TypechoUsers         *typechoUsers
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	TypechoComments = &Q.TypechoComments
	TypechoContents = &Q.TypechoContents
	TypechoFields = &Q.TypechoFields
	TypechoMetas = &Q.TypechoMetas
	TypechoOptions = &Q.TypechoOptions
	TypechoRelationships = &Q.TypechoRelationships
	TypechoUsers = &Q.TypechoUsers
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                   db,
		TypechoComments:      newTypechoComments(db, opts...),
		TypechoContents:      newTypechoContents(db, opts...),
		TypechoFields:        newTypechoFields(db, opts...),
		TypechoMetas:         newTypechoMetas(db, opts...),
		TypechoOptions:       newTypechoOptions(db, opts...),
		TypechoRelationships: newTypechoRelationships(db, opts...),
		TypechoUsers:         newTypechoUsers(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	TypechoComments      typechoComments
	TypechoContents      typechoContents
	TypechoFields        typechoFields
	TypechoMetas         typechoMetas
	TypechoOptions       typechoOptions
	TypechoRelationships typechoRelationships
	TypechoUsers         typechoUsers
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                   db,
		TypechoComments:      q.TypechoComments.clone(db),
		TypechoContents:      q.TypechoContents.clone(db),
		TypechoFields:        q.TypechoFields.clone(db),
		TypechoMetas:         q.TypechoMetas.clone(db),
		TypechoOptions:       q.TypechoOptions.clone(db),
		TypechoRelationships: q.TypechoRelationships.clone(db),
		TypechoUsers:         q.TypechoUsers.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                   db,
		TypechoComments:      q.TypechoComments.replaceDB(db),
		TypechoContents:      q.TypechoContents.replaceDB(db),
		TypechoFields:        q.TypechoFields.replaceDB(db),
		TypechoMetas:         q.TypechoMetas.replaceDB(db),
		TypechoOptions:       q.TypechoOptions.replaceDB(db),
		TypechoRelationships: q.TypechoRelationships.replaceDB(db),
		TypechoUsers:         q.TypechoUsers.replaceDB(db),
	}
}

type queryCtx struct {
	TypechoComments      ITypechoCommentsDo
	TypechoContents      ITypechoContentsDo
	TypechoFields        ITypechoFieldsDo
	TypechoMetas         ITypechoMetasDo
	TypechoOptions       ITypechoOptionsDo
	TypechoRelationships ITypechoRelationshipsDo
	TypechoUsers         ITypechoUsersDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		TypechoComments:      q.TypechoComments.WithContext(ctx),
		TypechoContents:      q.TypechoContents.WithContext(ctx),
		TypechoFields:        q.TypechoFields.WithContext(ctx),
		TypechoMetas:         q.TypechoMetas.WithContext(ctx),
		TypechoOptions:       q.TypechoOptions.WithContext(ctx),
		TypechoRelationships: q.TypechoRelationships.WithContext(ctx),
		TypechoUsers:         q.TypechoUsers.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
