// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fghwett/typecho-to-halo/pkg/typecho/model"
)

func newTypechoContents(db *gorm.DB, opts ...gen.DOOption) typechoContents {
	_typechoContents := typechoContents{}

	_typechoContents.typechoContentsDo.UseDB(db, opts...)
	_typechoContents.typechoContentsDo.UseModel(&model.TypechoContents{})

	tableName := _typechoContents.typechoContentsDo.TableName()
	_typechoContents.ALL = field.NewAsterisk(tableName)
	_typechoContents.Cid = field.NewUint32(tableName, "cid")
	_typechoContents.Title = field.NewString(tableName, "title")
	_typechoContents.Slug = field.NewString(tableName, "slug")
	_typechoContents.Created = field.NewUint32(tableName, "created")
	_typechoContents.Modified = field.NewUint32(tableName, "modified")
	_typechoContents.Text = field.NewString(tableName, "text")
	_typechoContents.Order_ = field.NewUint32(tableName, "order")
	_typechoContents.AuthorID = field.NewUint32(tableName, "authorId")
	_typechoContents.Template = field.NewString(tableName, "template")
	_typechoContents.Type = field.NewString(tableName, "type")
	_typechoContents.Status = field.NewString(tableName, "status")
	_typechoContents.Password = field.NewString(tableName, "password")
	_typechoContents.CommentsNum = field.NewUint32(tableName, "commentsNum")
	_typechoContents.AllowComment = field.NewString(tableName, "allowComment")
	_typechoContents.AllowPing = field.NewString(tableName, "allowPing")
	_typechoContents.AllowFeed = field.NewString(tableName, "allowFeed")
	_typechoContents.Parent = field.NewUint32(tableName, "parent")

	_typechoContents.fillFieldMap()

	return _typechoContents
}

type typechoContents struct {
	typechoContentsDo

	ALL          field.Asterisk
	Cid          field.Uint32
	Title        field.String
	Slug         field.String
	Created      field.Uint32
	Modified     field.Uint32
	Text         field.String
	Order_       field.Uint32
	AuthorID     field.Uint32
	Template     field.String
	Type         field.String
	Status       field.String
	Password     field.String
	CommentsNum  field.Uint32
	AllowComment field.String
	AllowPing    field.String
	AllowFeed    field.String
	Parent       field.Uint32

	fieldMap map[string]field.Expr
}

func (t typechoContents) Table(newTableName string) *typechoContents {
	t.typechoContentsDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t typechoContents) As(alias string) *typechoContents {
	t.typechoContentsDo.DO = *(t.typechoContentsDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *typechoContents) updateTableName(table string) *typechoContents {
	t.ALL = field.NewAsterisk(table)
	t.Cid = field.NewUint32(table, "cid")
	t.Title = field.NewString(table, "title")
	t.Slug = field.NewString(table, "slug")
	t.Created = field.NewUint32(table, "created")
	t.Modified = field.NewUint32(table, "modified")
	t.Text = field.NewString(table, "text")
	t.Order_ = field.NewUint32(table, "order")
	t.AuthorID = field.NewUint32(table, "authorId")
	t.Template = field.NewString(table, "template")
	t.Type = field.NewString(table, "type")
	t.Status = field.NewString(table, "status")
	t.Password = field.NewString(table, "password")
	t.CommentsNum = field.NewUint32(table, "commentsNum")
	t.AllowComment = field.NewString(table, "allowComment")
	t.AllowPing = field.NewString(table, "allowPing")
	t.AllowFeed = field.NewString(table, "allowFeed")
	t.Parent = field.NewUint32(table, "parent")

	t.fillFieldMap()

	return t
}

func (t *typechoContents) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *typechoContents) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 17)
	t.fieldMap["cid"] = t.Cid
	t.fieldMap["title"] = t.Title
	t.fieldMap["slug"] = t.Slug
	t.fieldMap["created"] = t.Created
	t.fieldMap["modified"] = t.Modified
	t.fieldMap["text"] = t.Text
	t.fieldMap["order"] = t.Order_
	t.fieldMap["authorId"] = t.AuthorID
	t.fieldMap["template"] = t.Template
	t.fieldMap["type"] = t.Type
	t.fieldMap["status"] = t.Status
	t.fieldMap["password"] = t.Password
	t.fieldMap["commentsNum"] = t.CommentsNum
	t.fieldMap["allowComment"] = t.AllowComment
	t.fieldMap["allowPing"] = t.AllowPing
	t.fieldMap["allowFeed"] = t.AllowFeed
	t.fieldMap["parent"] = t.Parent
}

func (t typechoContents) clone(db *gorm.DB) typechoContents {
	t.typechoContentsDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t typechoContents) replaceDB(db *gorm.DB) typechoContents {
	t.typechoContentsDo.ReplaceDB(db)
	return t
}

type typechoContentsDo struct{ gen.DO }

type ITypechoContentsDo interface {
	gen.SubQuery
	Debug() ITypechoContentsDo
	WithContext(ctx context.Context) ITypechoContentsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITypechoContentsDo
	WriteDB() ITypechoContentsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITypechoContentsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITypechoContentsDo
	Not(conds ...gen.Condition) ITypechoContentsDo
	Or(conds ...gen.Condition) ITypechoContentsDo
	Select(conds ...field.Expr) ITypechoContentsDo
	Where(conds ...gen.Condition) ITypechoContentsDo
	Order(conds ...field.Expr) ITypechoContentsDo
	Distinct(cols ...field.Expr) ITypechoContentsDo
	Omit(cols ...field.Expr) ITypechoContentsDo
	Join(table schema.Tabler, on ...field.Expr) ITypechoContentsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITypechoContentsDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITypechoContentsDo
	Group(cols ...field.Expr) ITypechoContentsDo
	Having(conds ...gen.Condition) ITypechoContentsDo
	Limit(limit int) ITypechoContentsDo
	Offset(offset int) ITypechoContentsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITypechoContentsDo
	Unscoped() ITypechoContentsDo
	Create(values ...*model.TypechoContents) error
	CreateInBatches(values []*model.TypechoContents, batchSize int) error
	Save(values ...*model.TypechoContents) error
	First() (*model.TypechoContents, error)
	Take() (*model.TypechoContents, error)
	Last() (*model.TypechoContents, error)
	Find() ([]*model.TypechoContents, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TypechoContents, err error)
	FindInBatches(result *[]*model.TypechoContents, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TypechoContents) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITypechoContentsDo
	Assign(attrs ...field.AssignExpr) ITypechoContentsDo
	Joins(fields ...field.RelationField) ITypechoContentsDo
	Preload(fields ...field.RelationField) ITypechoContentsDo
	FirstOrInit() (*model.TypechoContents, error)
	FirstOrCreate() (*model.TypechoContents, error)
	FindByPage(offset int, limit int) (result []*model.TypechoContents, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITypechoContentsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t typechoContentsDo) Debug() ITypechoContentsDo {
	return t.withDO(t.DO.Debug())
}

func (t typechoContentsDo) WithContext(ctx context.Context) ITypechoContentsDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t typechoContentsDo) ReadDB() ITypechoContentsDo {
	return t.Clauses(dbresolver.Read)
}

func (t typechoContentsDo) WriteDB() ITypechoContentsDo {
	return t.Clauses(dbresolver.Write)
}

func (t typechoContentsDo) Session(config *gorm.Session) ITypechoContentsDo {
	return t.withDO(t.DO.Session(config))
}

func (t typechoContentsDo) Clauses(conds ...clause.Expression) ITypechoContentsDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t typechoContentsDo) Returning(value interface{}, columns ...string) ITypechoContentsDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t typechoContentsDo) Not(conds ...gen.Condition) ITypechoContentsDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t typechoContentsDo) Or(conds ...gen.Condition) ITypechoContentsDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t typechoContentsDo) Select(conds ...field.Expr) ITypechoContentsDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t typechoContentsDo) Where(conds ...gen.Condition) ITypechoContentsDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t typechoContentsDo) Order(conds ...field.Expr) ITypechoContentsDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t typechoContentsDo) Distinct(cols ...field.Expr) ITypechoContentsDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t typechoContentsDo) Omit(cols ...field.Expr) ITypechoContentsDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t typechoContentsDo) Join(table schema.Tabler, on ...field.Expr) ITypechoContentsDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t typechoContentsDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITypechoContentsDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t typechoContentsDo) RightJoin(table schema.Tabler, on ...field.Expr) ITypechoContentsDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t typechoContentsDo) Group(cols ...field.Expr) ITypechoContentsDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t typechoContentsDo) Having(conds ...gen.Condition) ITypechoContentsDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t typechoContentsDo) Limit(limit int) ITypechoContentsDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t typechoContentsDo) Offset(offset int) ITypechoContentsDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t typechoContentsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITypechoContentsDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t typechoContentsDo) Unscoped() ITypechoContentsDo {
	return t.withDO(t.DO.Unscoped())
}

func (t typechoContentsDo) Create(values ...*model.TypechoContents) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t typechoContentsDo) CreateInBatches(values []*model.TypechoContents, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t typechoContentsDo) Save(values ...*model.TypechoContents) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t typechoContentsDo) First() (*model.TypechoContents, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TypechoContents), nil
	}
}

func (t typechoContentsDo) Take() (*model.TypechoContents, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TypechoContents), nil
	}
}

func (t typechoContentsDo) Last() (*model.TypechoContents, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TypechoContents), nil
	}
}

func (t typechoContentsDo) Find() ([]*model.TypechoContents, error) {
	result, err := t.DO.Find()
	return result.([]*model.TypechoContents), err
}

func (t typechoContentsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TypechoContents, err error) {
	buf := make([]*model.TypechoContents, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t typechoContentsDo) FindInBatches(result *[]*model.TypechoContents, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t typechoContentsDo) Attrs(attrs ...field.AssignExpr) ITypechoContentsDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t typechoContentsDo) Assign(attrs ...field.AssignExpr) ITypechoContentsDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t typechoContentsDo) Joins(fields ...field.RelationField) ITypechoContentsDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t typechoContentsDo) Preload(fields ...field.RelationField) ITypechoContentsDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t typechoContentsDo) FirstOrInit() (*model.TypechoContents, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TypechoContents), nil
	}
}

func (t typechoContentsDo) FirstOrCreate() (*model.TypechoContents, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TypechoContents), nil
	}
}

func (t typechoContentsDo) FindByPage(offset int, limit int) (result []*model.TypechoContents, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t typechoContentsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t typechoContentsDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t typechoContentsDo) Delete(models ...*model.TypechoContents) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *typechoContentsDo) withDO(do gen.Dao) *typechoContentsDo {
	t.DO = *do.(*gen.DO)
	return t
}
