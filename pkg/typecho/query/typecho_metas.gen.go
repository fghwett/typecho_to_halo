// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fghwett/typecho-to-halo/pkg/typecho/model"
)

func newTypechoMetas(db *gorm.DB, opts ...gen.DOOption) typechoMetas {
	_typechoMetas := typechoMetas{}

	_typechoMetas.typechoMetasDo.UseDB(db, opts...)
	_typechoMetas.typechoMetasDo.UseModel(&model.TypechoMetas{})

	tableName := _typechoMetas.typechoMetasDo.TableName()
	_typechoMetas.ALL = field.NewAsterisk(tableName)
	_typechoMetas.Mid = field.NewUint32(tableName, "mid")
	_typechoMetas.Name = field.NewString(tableName, "name")
	_typechoMetas.Slug = field.NewString(tableName, "slug")
	_typechoMetas.Type = field.NewString(tableName, "type")
	_typechoMetas.Description = field.NewString(tableName, "description")
	_typechoMetas.Count_ = field.NewUint32(tableName, "count")
	_typechoMetas.Order_ = field.NewUint32(tableName, "order")
	_typechoMetas.Parent = field.NewUint32(tableName, "parent")

	_typechoMetas.fillFieldMap()

	return _typechoMetas
}

type typechoMetas struct {
	typechoMetasDo

	ALL         field.Asterisk
	Mid         field.Uint32
	Name        field.String
	Slug        field.String
	Type        field.String
	Description field.String
	Count_      field.Uint32
	Order_      field.Uint32
	Parent      field.Uint32

	fieldMap map[string]field.Expr
}

func (t typechoMetas) Table(newTableName string) *typechoMetas {
	t.typechoMetasDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t typechoMetas) As(alias string) *typechoMetas {
	t.typechoMetasDo.DO = *(t.typechoMetasDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *typechoMetas) updateTableName(table string) *typechoMetas {
	t.ALL = field.NewAsterisk(table)
	t.Mid = field.NewUint32(table, "mid")
	t.Name = field.NewString(table, "name")
	t.Slug = field.NewString(table, "slug")
	t.Type = field.NewString(table, "type")
	t.Description = field.NewString(table, "description")
	t.Count_ = field.NewUint32(table, "count")
	t.Order_ = field.NewUint32(table, "order")
	t.Parent = field.NewUint32(table, "parent")

	t.fillFieldMap()

	return t
}

func (t *typechoMetas) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *typechoMetas) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["mid"] = t.Mid
	t.fieldMap["name"] = t.Name
	t.fieldMap["slug"] = t.Slug
	t.fieldMap["type"] = t.Type
	t.fieldMap["description"] = t.Description
	t.fieldMap["count"] = t.Count_
	t.fieldMap["order"] = t.Order_
	t.fieldMap["parent"] = t.Parent
}

func (t typechoMetas) clone(db *gorm.DB) typechoMetas {
	t.typechoMetasDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t typechoMetas) replaceDB(db *gorm.DB) typechoMetas {
	t.typechoMetasDo.ReplaceDB(db)
	return t
}

type typechoMetasDo struct{ gen.DO }

type ITypechoMetasDo interface {
	gen.SubQuery
	Debug() ITypechoMetasDo
	WithContext(ctx context.Context) ITypechoMetasDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITypechoMetasDo
	WriteDB() ITypechoMetasDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITypechoMetasDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITypechoMetasDo
	Not(conds ...gen.Condition) ITypechoMetasDo
	Or(conds ...gen.Condition) ITypechoMetasDo
	Select(conds ...field.Expr) ITypechoMetasDo
	Where(conds ...gen.Condition) ITypechoMetasDo
	Order(conds ...field.Expr) ITypechoMetasDo
	Distinct(cols ...field.Expr) ITypechoMetasDo
	Omit(cols ...field.Expr) ITypechoMetasDo
	Join(table schema.Tabler, on ...field.Expr) ITypechoMetasDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITypechoMetasDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITypechoMetasDo
	Group(cols ...field.Expr) ITypechoMetasDo
	Having(conds ...gen.Condition) ITypechoMetasDo
	Limit(limit int) ITypechoMetasDo
	Offset(offset int) ITypechoMetasDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITypechoMetasDo
	Unscoped() ITypechoMetasDo
	Create(values ...*model.TypechoMetas) error
	CreateInBatches(values []*model.TypechoMetas, batchSize int) error
	Save(values ...*model.TypechoMetas) error
	First() (*model.TypechoMetas, error)
	Take() (*model.TypechoMetas, error)
	Last() (*model.TypechoMetas, error)
	Find() ([]*model.TypechoMetas, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TypechoMetas, err error)
	FindInBatches(result *[]*model.TypechoMetas, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TypechoMetas) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITypechoMetasDo
	Assign(attrs ...field.AssignExpr) ITypechoMetasDo
	Joins(fields ...field.RelationField) ITypechoMetasDo
	Preload(fields ...field.RelationField) ITypechoMetasDo
	FirstOrInit() (*model.TypechoMetas, error)
	FirstOrCreate() (*model.TypechoMetas, error)
	FindByPage(offset int, limit int) (result []*model.TypechoMetas, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITypechoMetasDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t typechoMetasDo) Debug() ITypechoMetasDo {
	return t.withDO(t.DO.Debug())
}

func (t typechoMetasDo) WithContext(ctx context.Context) ITypechoMetasDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t typechoMetasDo) ReadDB() ITypechoMetasDo {
	return t.Clauses(dbresolver.Read)
}

func (t typechoMetasDo) WriteDB() ITypechoMetasDo {
	return t.Clauses(dbresolver.Write)
}

func (t typechoMetasDo) Session(config *gorm.Session) ITypechoMetasDo {
	return t.withDO(t.DO.Session(config))
}

func (t typechoMetasDo) Clauses(conds ...clause.Expression) ITypechoMetasDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t typechoMetasDo) Returning(value interface{}, columns ...string) ITypechoMetasDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t typechoMetasDo) Not(conds ...gen.Condition) ITypechoMetasDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t typechoMetasDo) Or(conds ...gen.Condition) ITypechoMetasDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t typechoMetasDo) Select(conds ...field.Expr) ITypechoMetasDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t typechoMetasDo) Where(conds ...gen.Condition) ITypechoMetasDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t typechoMetasDo) Order(conds ...field.Expr) ITypechoMetasDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t typechoMetasDo) Distinct(cols ...field.Expr) ITypechoMetasDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t typechoMetasDo) Omit(cols ...field.Expr) ITypechoMetasDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t typechoMetasDo) Join(table schema.Tabler, on ...field.Expr) ITypechoMetasDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t typechoMetasDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITypechoMetasDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t typechoMetasDo) RightJoin(table schema.Tabler, on ...field.Expr) ITypechoMetasDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t typechoMetasDo) Group(cols ...field.Expr) ITypechoMetasDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t typechoMetasDo) Having(conds ...gen.Condition) ITypechoMetasDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t typechoMetasDo) Limit(limit int) ITypechoMetasDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t typechoMetasDo) Offset(offset int) ITypechoMetasDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t typechoMetasDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITypechoMetasDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t typechoMetasDo) Unscoped() ITypechoMetasDo {
	return t.withDO(t.DO.Unscoped())
}

func (t typechoMetasDo) Create(values ...*model.TypechoMetas) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t typechoMetasDo) CreateInBatches(values []*model.TypechoMetas, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t typechoMetasDo) Save(values ...*model.TypechoMetas) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t typechoMetasDo) First() (*model.TypechoMetas, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TypechoMetas), nil
	}
}

func (t typechoMetasDo) Take() (*model.TypechoMetas, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TypechoMetas), nil
	}
}

func (t typechoMetasDo) Last() (*model.TypechoMetas, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TypechoMetas), nil
	}
}

func (t typechoMetasDo) Find() ([]*model.TypechoMetas, error) {
	result, err := t.DO.Find()
	return result.([]*model.TypechoMetas), err
}

func (t typechoMetasDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TypechoMetas, err error) {
	buf := make([]*model.TypechoMetas, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t typechoMetasDo) FindInBatches(result *[]*model.TypechoMetas, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t typechoMetasDo) Attrs(attrs ...field.AssignExpr) ITypechoMetasDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t typechoMetasDo) Assign(attrs ...field.AssignExpr) ITypechoMetasDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t typechoMetasDo) Joins(fields ...field.RelationField) ITypechoMetasDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t typechoMetasDo) Preload(fields ...field.RelationField) ITypechoMetasDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t typechoMetasDo) FirstOrInit() (*model.TypechoMetas, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TypechoMetas), nil
	}
}

func (t typechoMetasDo) FirstOrCreate() (*model.TypechoMetas, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TypechoMetas), nil
	}
}

func (t typechoMetasDo) FindByPage(offset int, limit int) (result []*model.TypechoMetas, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t typechoMetasDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t typechoMetasDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t typechoMetasDo) Delete(models ...*model.TypechoMetas) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *typechoMetasDo) withDO(do gen.Dao) *typechoMetasDo {
	t.DO = *do.(*gen.DO)
	return t
}
