// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fghwett/typecho-to-halo/pkg/typecho/model"
)

func newTypechoRelationships(db *gorm.DB, opts ...gen.DOOption) typechoRelationships {
	_typechoRelationships := typechoRelationships{}

	_typechoRelationships.typechoRelationshipsDo.UseDB(db, opts...)
	_typechoRelationships.typechoRelationshipsDo.UseModel(&model.TypechoRelationships{})

	tableName := _typechoRelationships.typechoRelationshipsDo.TableName()
	_typechoRelationships.ALL = field.NewAsterisk(tableName)
	_typechoRelationships.Cid = field.NewUint32(tableName, "cid")
	_typechoRelationships.Mid = field.NewUint32(tableName, "mid")

	_typechoRelationships.fillFieldMap()

	return _typechoRelationships
}

type typechoRelationships struct {
	typechoRelationshipsDo

	ALL field.Asterisk
	Cid field.Uint32
	Mid field.Uint32

	fieldMap map[string]field.Expr
}

func (t typechoRelationships) Table(newTableName string) *typechoRelationships {
	t.typechoRelationshipsDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t typechoRelationships) As(alias string) *typechoRelationships {
	t.typechoRelationshipsDo.DO = *(t.typechoRelationshipsDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *typechoRelationships) updateTableName(table string) *typechoRelationships {
	t.ALL = field.NewAsterisk(table)
	t.Cid = field.NewUint32(table, "cid")
	t.Mid = field.NewUint32(table, "mid")

	t.fillFieldMap()

	return t
}

func (t *typechoRelationships) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *typechoRelationships) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 2)
	t.fieldMap["cid"] = t.Cid
	t.fieldMap["mid"] = t.Mid
}

func (t typechoRelationships) clone(db *gorm.DB) typechoRelationships {
	t.typechoRelationshipsDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t typechoRelationships) replaceDB(db *gorm.DB) typechoRelationships {
	t.typechoRelationshipsDo.ReplaceDB(db)
	return t
}

type typechoRelationshipsDo struct{ gen.DO }

type ITypechoRelationshipsDo interface {
	gen.SubQuery
	Debug() ITypechoRelationshipsDo
	WithContext(ctx context.Context) ITypechoRelationshipsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITypechoRelationshipsDo
	WriteDB() ITypechoRelationshipsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITypechoRelationshipsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITypechoRelationshipsDo
	Not(conds ...gen.Condition) ITypechoRelationshipsDo
	Or(conds ...gen.Condition) ITypechoRelationshipsDo
	Select(conds ...field.Expr) ITypechoRelationshipsDo
	Where(conds ...gen.Condition) ITypechoRelationshipsDo
	Order(conds ...field.Expr) ITypechoRelationshipsDo
	Distinct(cols ...field.Expr) ITypechoRelationshipsDo
	Omit(cols ...field.Expr) ITypechoRelationshipsDo
	Join(table schema.Tabler, on ...field.Expr) ITypechoRelationshipsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITypechoRelationshipsDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITypechoRelationshipsDo
	Group(cols ...field.Expr) ITypechoRelationshipsDo
	Having(conds ...gen.Condition) ITypechoRelationshipsDo
	Limit(limit int) ITypechoRelationshipsDo
	Offset(offset int) ITypechoRelationshipsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITypechoRelationshipsDo
	Unscoped() ITypechoRelationshipsDo
	Create(values ...*model.TypechoRelationships) error
	CreateInBatches(values []*model.TypechoRelationships, batchSize int) error
	Save(values ...*model.TypechoRelationships) error
	First() (*model.TypechoRelationships, error)
	Take() (*model.TypechoRelationships, error)
	Last() (*model.TypechoRelationships, error)
	Find() ([]*model.TypechoRelationships, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TypechoRelationships, err error)
	FindInBatches(result *[]*model.TypechoRelationships, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TypechoRelationships) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITypechoRelationshipsDo
	Assign(attrs ...field.AssignExpr) ITypechoRelationshipsDo
	Joins(fields ...field.RelationField) ITypechoRelationshipsDo
	Preload(fields ...field.RelationField) ITypechoRelationshipsDo
	FirstOrInit() (*model.TypechoRelationships, error)
	FirstOrCreate() (*model.TypechoRelationships, error)
	FindByPage(offset int, limit int) (result []*model.TypechoRelationships, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITypechoRelationshipsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t typechoRelationshipsDo) Debug() ITypechoRelationshipsDo {
	return t.withDO(t.DO.Debug())
}

func (t typechoRelationshipsDo) WithContext(ctx context.Context) ITypechoRelationshipsDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t typechoRelationshipsDo) ReadDB() ITypechoRelationshipsDo {
	return t.Clauses(dbresolver.Read)
}

func (t typechoRelationshipsDo) WriteDB() ITypechoRelationshipsDo {
	return t.Clauses(dbresolver.Write)
}

func (t typechoRelationshipsDo) Session(config *gorm.Session) ITypechoRelationshipsDo {
	return t.withDO(t.DO.Session(config))
}

func (t typechoRelationshipsDo) Clauses(conds ...clause.Expression) ITypechoRelationshipsDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t typechoRelationshipsDo) Returning(value interface{}, columns ...string) ITypechoRelationshipsDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t typechoRelationshipsDo) Not(conds ...gen.Condition) ITypechoRelationshipsDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t typechoRelationshipsDo) Or(conds ...gen.Condition) ITypechoRelationshipsDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t typechoRelationshipsDo) Select(conds ...field.Expr) ITypechoRelationshipsDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t typechoRelationshipsDo) Where(conds ...gen.Condition) ITypechoRelationshipsDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t typechoRelationshipsDo) Order(conds ...field.Expr) ITypechoRelationshipsDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t typechoRelationshipsDo) Distinct(cols ...field.Expr) ITypechoRelationshipsDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t typechoRelationshipsDo) Omit(cols ...field.Expr) ITypechoRelationshipsDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t typechoRelationshipsDo) Join(table schema.Tabler, on ...field.Expr) ITypechoRelationshipsDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t typechoRelationshipsDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITypechoRelationshipsDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t typechoRelationshipsDo) RightJoin(table schema.Tabler, on ...field.Expr) ITypechoRelationshipsDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t typechoRelationshipsDo) Group(cols ...field.Expr) ITypechoRelationshipsDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t typechoRelationshipsDo) Having(conds ...gen.Condition) ITypechoRelationshipsDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t typechoRelationshipsDo) Limit(limit int) ITypechoRelationshipsDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t typechoRelationshipsDo) Offset(offset int) ITypechoRelationshipsDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t typechoRelationshipsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITypechoRelationshipsDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t typechoRelationshipsDo) Unscoped() ITypechoRelationshipsDo {
	return t.withDO(t.DO.Unscoped())
}

func (t typechoRelationshipsDo) Create(values ...*model.TypechoRelationships) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t typechoRelationshipsDo) CreateInBatches(values []*model.TypechoRelationships, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t typechoRelationshipsDo) Save(values ...*model.TypechoRelationships) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t typechoRelationshipsDo) First() (*model.TypechoRelationships, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TypechoRelationships), nil
	}
}

func (t typechoRelationshipsDo) Take() (*model.TypechoRelationships, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TypechoRelationships), nil
	}
}

func (t typechoRelationshipsDo) Last() (*model.TypechoRelationships, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TypechoRelationships), nil
	}
}

func (t typechoRelationshipsDo) Find() ([]*model.TypechoRelationships, error) {
	result, err := t.DO.Find()
	return result.([]*model.TypechoRelationships), err
}

func (t typechoRelationshipsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TypechoRelationships, err error) {
	buf := make([]*model.TypechoRelationships, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t typechoRelationshipsDo) FindInBatches(result *[]*model.TypechoRelationships, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t typechoRelationshipsDo) Attrs(attrs ...field.AssignExpr) ITypechoRelationshipsDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t typechoRelationshipsDo) Assign(attrs ...field.AssignExpr) ITypechoRelationshipsDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t typechoRelationshipsDo) Joins(fields ...field.RelationField) ITypechoRelationshipsDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t typechoRelationshipsDo) Preload(fields ...field.RelationField) ITypechoRelationshipsDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t typechoRelationshipsDo) FirstOrInit() (*model.TypechoRelationships, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TypechoRelationships), nil
	}
}

func (t typechoRelationshipsDo) FirstOrCreate() (*model.TypechoRelationships, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TypechoRelationships), nil
	}
}

func (t typechoRelationshipsDo) FindByPage(offset int, limit int) (result []*model.TypechoRelationships, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t typechoRelationshipsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t typechoRelationshipsDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t typechoRelationshipsDo) Delete(models ...*model.TypechoRelationships) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *typechoRelationshipsDo) withDO(do gen.Dao) *typechoRelationshipsDo {
	t.DO = *do.(*gen.DO)
	return t
}
