// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

const TableNameTypechoComments = "typecho_comments"

// TypechoComments mapped from table <typecho_comments>
type TypechoComments struct {
	Coid     uint32  `gorm:"column:coid;type:int(10) unsigned;primaryKey;autoIncrement:true" json:"coid"`
	Cid      *uint32 `gorm:"column:cid;type:int(10) unsigned;index:cid,priority:1" json:"cid"`
	Created  *uint32 `gorm:"column:created;type:int(10) unsigned;index:created,priority:1" json:"created"`
	Author   *string `gorm:"column:author;type:varchar(150)" json:"author"`
	AuthorID *uint32 `gorm:"column:authorId;type:int(10) unsigned" json:"authorId"`
	OwnerID  *uint32 `gorm:"column:ownerId;type:int(10) unsigned" json:"ownerId"`
	Mail     *string `gorm:"column:mail;type:varchar(150)" json:"mail"`
	URL      *string `gorm:"column:url;type:varchar(255)" json:"url"`
	IP       *string `gorm:"column:ip;type:varchar(64)" json:"ip"`
	Agent    *string `gorm:"column:agent;type:varchar(511)" json:"agent"`
	Text     *string `gorm:"column:text;type:text" json:"text"`
	Type     *string `gorm:"column:type;type:varchar(16);default:comment" json:"type"`
	Status   *string `gorm:"column:status;type:varchar(16);default:approved" json:"status"`
	Parent   *uint32 `gorm:"column:parent;type:int(10) unsigned" json:"parent"`
}

// TableName TypechoComments's table name
func (*TypechoComments) TableName() string {
	return TableNameTypechoComments
}
