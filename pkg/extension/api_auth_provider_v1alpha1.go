/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type AuthProviderV1alpha1API interface {

	/*
	CreateAuthProvider Method for CreateAuthProvider

	Create AuthProvider

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateAuthProviderRequest
	*/
	CreateAuthProvider(ctx context.Context) ApiCreateAuthProviderRequest

	// CreateAuthProviderExecute executes the request
	//  @return AuthProvider
	CreateAuthProviderExecute(r ApiCreateAuthProviderRequest) (*AuthProvider, *http.Response, error)

	/*
	DeleteAuthProvider Method for DeleteAuthProvider

	Delete AuthProvider

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of authprovider
	@return ApiDeleteAuthProviderRequest
	*/
	DeleteAuthProvider(ctx context.Context, name string) ApiDeleteAuthProviderRequest

	// DeleteAuthProviderExecute executes the request
	DeleteAuthProviderExecute(r ApiDeleteAuthProviderRequest) (*http.Response, error)

	/*
	GetAuthProvider Method for GetAuthProvider

	Get AuthProvider

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of authprovider
	@return ApiGetAuthProviderRequest
	*/
	GetAuthProvider(ctx context.Context, name string) ApiGetAuthProviderRequest

	// GetAuthProviderExecute executes the request
	//  @return AuthProvider
	GetAuthProviderExecute(r ApiGetAuthProviderRequest) (*AuthProvider, *http.Response, error)

	/*
	ListAuthProvider Method for ListAuthProvider

	List AuthProvider

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListAuthProviderRequest
	*/
	ListAuthProvider(ctx context.Context) ApiListAuthProviderRequest

	// ListAuthProviderExecute executes the request
	//  @return AuthProviderList
	ListAuthProviderExecute(r ApiListAuthProviderRequest) (*AuthProviderList, *http.Response, error)

	/*
	PatchAuthProvider Method for PatchAuthProvider

	Patch AuthProvider

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of authprovider
	@return ApiPatchAuthProviderRequest
	*/
	PatchAuthProvider(ctx context.Context, name string) ApiPatchAuthProviderRequest

	// PatchAuthProviderExecute executes the request
	//  @return AuthProvider
	PatchAuthProviderExecute(r ApiPatchAuthProviderRequest) (*AuthProvider, *http.Response, error)

	/*
	UpdateAuthProvider Method for UpdateAuthProvider

	Update AuthProvider

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of authprovider
	@return ApiUpdateAuthProviderRequest
	*/
	UpdateAuthProvider(ctx context.Context, name string) ApiUpdateAuthProviderRequest

	// UpdateAuthProviderExecute executes the request
	//  @return AuthProvider
	UpdateAuthProviderExecute(r ApiUpdateAuthProviderRequest) (*AuthProvider, *http.Response, error)
}

// AuthProviderV1alpha1APIService AuthProviderV1alpha1API service
type AuthProviderV1alpha1APIService service

type ApiCreateAuthProviderRequest struct {
	ctx context.Context
	ApiService AuthProviderV1alpha1API
	authProvider *AuthProvider
}

// Fresh authprovider
func (r ApiCreateAuthProviderRequest) AuthProvider(authProvider AuthProvider) ApiCreateAuthProviderRequest {
	r.authProvider = &authProvider
	return r
}

func (r ApiCreateAuthProviderRequest) Execute() (*AuthProvider, *http.Response, error) {
	return r.ApiService.CreateAuthProviderExecute(r)
}

/*
CreateAuthProvider Method for CreateAuthProvider

Create AuthProvider

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateAuthProviderRequest
*/
func (a *AuthProviderV1alpha1APIService) CreateAuthProvider(ctx context.Context) ApiCreateAuthProviderRequest {
	return ApiCreateAuthProviderRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AuthProvider
func (a *AuthProviderV1alpha1APIService) CreateAuthProviderExecute(r ApiCreateAuthProviderRequest) (*AuthProvider, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuthProvider
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthProviderV1alpha1APIService.CreateAuthProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/auth.halo.run/v1alpha1/authproviders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.authProvider
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteAuthProviderRequest struct {
	ctx context.Context
	ApiService AuthProviderV1alpha1API
	name string
}

func (r ApiDeleteAuthProviderRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteAuthProviderExecute(r)
}

/*
DeleteAuthProvider Method for DeleteAuthProvider

Delete AuthProvider

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of authprovider
 @return ApiDeleteAuthProviderRequest
*/
func (a *AuthProviderV1alpha1APIService) DeleteAuthProvider(ctx context.Context, name string) ApiDeleteAuthProviderRequest {
	return ApiDeleteAuthProviderRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
func (a *AuthProviderV1alpha1APIService) DeleteAuthProviderExecute(r ApiDeleteAuthProviderRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthProviderV1alpha1APIService.DeleteAuthProvider")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/auth.halo.run/v1alpha1/authproviders/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAuthProviderRequest struct {
	ctx context.Context
	ApiService AuthProviderV1alpha1API
	name string
}

func (r ApiGetAuthProviderRequest) Execute() (*AuthProvider, *http.Response, error) {
	return r.ApiService.GetAuthProviderExecute(r)
}

/*
GetAuthProvider Method for GetAuthProvider

Get AuthProvider

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of authprovider
 @return ApiGetAuthProviderRequest
*/
func (a *AuthProviderV1alpha1APIService) GetAuthProvider(ctx context.Context, name string) ApiGetAuthProviderRequest {
	return ApiGetAuthProviderRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return AuthProvider
func (a *AuthProviderV1alpha1APIService) GetAuthProviderExecute(r ApiGetAuthProviderRequest) (*AuthProvider, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuthProvider
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthProviderV1alpha1APIService.GetAuthProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/auth.halo.run/v1alpha1/authproviders/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListAuthProviderRequest struct {
	ctx context.Context
	ApiService AuthProviderV1alpha1API
	page *int32
	size *int32
	labelSelector *[]string
	fieldSelector *[]string
	sort *[]string
}

// Page number. Default is 0.
func (r ApiListAuthProviderRequest) Page(page int32) ApiListAuthProviderRequest {
	r.page = &page
	return r
}

// Size number. Default is 0.
func (r ApiListAuthProviderRequest) Size(size int32) ApiListAuthProviderRequest {
	r.size = &size
	return r
}

// Label selector. e.g.: hidden!&#x3D;true
func (r ApiListAuthProviderRequest) LabelSelector(labelSelector []string) ApiListAuthProviderRequest {
	r.labelSelector = &labelSelector
	return r
}

// Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
func (r ApiListAuthProviderRequest) FieldSelector(fieldSelector []string) ApiListAuthProviderRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListAuthProviderRequest) Sort(sort []string) ApiListAuthProviderRequest {
	r.sort = &sort
	return r
}

func (r ApiListAuthProviderRequest) Execute() (*AuthProviderList, *http.Response, error) {
	return r.ApiService.ListAuthProviderExecute(r)
}

/*
ListAuthProvider Method for ListAuthProvider

List AuthProvider

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListAuthProviderRequest
*/
func (a *AuthProviderV1alpha1APIService) ListAuthProvider(ctx context.Context) ApiListAuthProviderRequest {
	return ApiListAuthProviderRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AuthProviderList
func (a *AuthProviderV1alpha1APIService) ListAuthProviderExecute(r ApiListAuthProviderRequest) (*AuthProviderList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuthProviderList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthProviderV1alpha1APIService.ListAuthProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/auth.halo.run/v1alpha1/authproviders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.labelSelector != nil {
		t := *r.labelSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", t, "form", "multi")
		}
	}
	if r.fieldSelector != nil {
		t := *r.fieldSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", t, "form", "multi")
		}
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchAuthProviderRequest struct {
	ctx context.Context
	ApiService AuthProviderV1alpha1API
	name string
	jsonPatchInner *[]JsonPatchInner
}

func (r ApiPatchAuthProviderRequest) JsonPatchInner(jsonPatchInner []JsonPatchInner) ApiPatchAuthProviderRequest {
	r.jsonPatchInner = &jsonPatchInner
	return r
}

func (r ApiPatchAuthProviderRequest) Execute() (*AuthProvider, *http.Response, error) {
	return r.ApiService.PatchAuthProviderExecute(r)
}

/*
PatchAuthProvider Method for PatchAuthProvider

Patch AuthProvider

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of authprovider
 @return ApiPatchAuthProviderRequest
*/
func (a *AuthProviderV1alpha1APIService) PatchAuthProvider(ctx context.Context, name string) ApiPatchAuthProviderRequest {
	return ApiPatchAuthProviderRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return AuthProvider
func (a *AuthProviderV1alpha1APIService) PatchAuthProviderExecute(r ApiPatchAuthProviderRequest) (*AuthProvider, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuthProvider
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthProviderV1alpha1APIService.PatchAuthProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/auth.halo.run/v1alpha1/authproviders/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jsonPatchInner
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateAuthProviderRequest struct {
	ctx context.Context
	ApiService AuthProviderV1alpha1API
	name string
	authProvider *AuthProvider
}

// Updated authprovider
func (r ApiUpdateAuthProviderRequest) AuthProvider(authProvider AuthProvider) ApiUpdateAuthProviderRequest {
	r.authProvider = &authProvider
	return r
}

func (r ApiUpdateAuthProviderRequest) Execute() (*AuthProvider, *http.Response, error) {
	return r.ApiService.UpdateAuthProviderExecute(r)
}

/*
UpdateAuthProvider Method for UpdateAuthProvider

Update AuthProvider

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of authprovider
 @return ApiUpdateAuthProviderRequest
*/
func (a *AuthProviderV1alpha1APIService) UpdateAuthProvider(ctx context.Context, name string) ApiUpdateAuthProviderRequest {
	return ApiUpdateAuthProviderRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return AuthProvider
func (a *AuthProviderV1alpha1APIService) UpdateAuthProviderExecute(r ApiUpdateAuthProviderRequest) (*AuthProvider, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuthProvider
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthProviderV1alpha1APIService.UpdateAuthProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/auth.halo.run/v1alpha1/authproviders/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.authProvider
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
