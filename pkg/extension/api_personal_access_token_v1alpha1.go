/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type PersonalAccessTokenV1alpha1API interface {

	/*
	CreatePersonalAccessToken Method for CreatePersonalAccessToken

	Create PersonalAccessToken

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreatePersonalAccessTokenRequest
	*/
	CreatePersonalAccessToken(ctx context.Context) ApiCreatePersonalAccessTokenRequest

	// CreatePersonalAccessTokenExecute executes the request
	//  @return PersonalAccessToken
	CreatePersonalAccessTokenExecute(r ApiCreatePersonalAccessTokenRequest) (*PersonalAccessToken, *http.Response, error)

	/*
	DeletePersonalAccessToken Method for DeletePersonalAccessToken

	Delete PersonalAccessToken

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of personalaccesstoken
	@return ApiDeletePersonalAccessTokenRequest
	*/
	DeletePersonalAccessToken(ctx context.Context, name string) ApiDeletePersonalAccessTokenRequest

	// DeletePersonalAccessTokenExecute executes the request
	DeletePersonalAccessTokenExecute(r ApiDeletePersonalAccessTokenRequest) (*http.Response, error)

	/*
	GetPersonalAccessToken Method for GetPersonalAccessToken

	Get PersonalAccessToken

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of personalaccesstoken
	@return ApiGetPersonalAccessTokenRequest
	*/
	GetPersonalAccessToken(ctx context.Context, name string) ApiGetPersonalAccessTokenRequest

	// GetPersonalAccessTokenExecute executes the request
	//  @return PersonalAccessToken
	GetPersonalAccessTokenExecute(r ApiGetPersonalAccessTokenRequest) (*PersonalAccessToken, *http.Response, error)

	/*
	ListPersonalAccessToken Method for ListPersonalAccessToken

	List PersonalAccessToken

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListPersonalAccessTokenRequest
	*/
	ListPersonalAccessToken(ctx context.Context) ApiListPersonalAccessTokenRequest

	// ListPersonalAccessTokenExecute executes the request
	//  @return PersonalAccessTokenList
	ListPersonalAccessTokenExecute(r ApiListPersonalAccessTokenRequest) (*PersonalAccessTokenList, *http.Response, error)

	/*
	PatchPersonalAccessToken Method for PatchPersonalAccessToken

	Patch PersonalAccessToken

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of personalaccesstoken
	@return ApiPatchPersonalAccessTokenRequest
	*/
	PatchPersonalAccessToken(ctx context.Context, name string) ApiPatchPersonalAccessTokenRequest

	// PatchPersonalAccessTokenExecute executes the request
	//  @return PersonalAccessToken
	PatchPersonalAccessTokenExecute(r ApiPatchPersonalAccessTokenRequest) (*PersonalAccessToken, *http.Response, error)

	/*
	UpdatePersonalAccessToken Method for UpdatePersonalAccessToken

	Update PersonalAccessToken

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of personalaccesstoken
	@return ApiUpdatePersonalAccessTokenRequest
	*/
	UpdatePersonalAccessToken(ctx context.Context, name string) ApiUpdatePersonalAccessTokenRequest

	// UpdatePersonalAccessTokenExecute executes the request
	//  @return PersonalAccessToken
	UpdatePersonalAccessTokenExecute(r ApiUpdatePersonalAccessTokenRequest) (*PersonalAccessToken, *http.Response, error)
}

// PersonalAccessTokenV1alpha1APIService PersonalAccessTokenV1alpha1API service
type PersonalAccessTokenV1alpha1APIService service

type ApiCreatePersonalAccessTokenRequest struct {
	ctx context.Context
	ApiService PersonalAccessTokenV1alpha1API
	personalAccessToken *PersonalAccessToken
}

// Fresh personalaccesstoken
func (r ApiCreatePersonalAccessTokenRequest) PersonalAccessToken(personalAccessToken PersonalAccessToken) ApiCreatePersonalAccessTokenRequest {
	r.personalAccessToken = &personalAccessToken
	return r
}

func (r ApiCreatePersonalAccessTokenRequest) Execute() (*PersonalAccessToken, *http.Response, error) {
	return r.ApiService.CreatePersonalAccessTokenExecute(r)
}

/*
CreatePersonalAccessToken Method for CreatePersonalAccessToken

Create PersonalAccessToken

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreatePersonalAccessTokenRequest
*/
func (a *PersonalAccessTokenV1alpha1APIService) CreatePersonalAccessToken(ctx context.Context) ApiCreatePersonalAccessTokenRequest {
	return ApiCreatePersonalAccessTokenRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PersonalAccessToken
func (a *PersonalAccessTokenV1alpha1APIService) CreatePersonalAccessTokenExecute(r ApiCreatePersonalAccessTokenRequest) (*PersonalAccessToken, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PersonalAccessToken
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PersonalAccessTokenV1alpha1APIService.CreatePersonalAccessToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/security.halo.run/v1alpha1/personalaccesstokens"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.personalAccessToken
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeletePersonalAccessTokenRequest struct {
	ctx context.Context
	ApiService PersonalAccessTokenV1alpha1API
	name string
}

func (r ApiDeletePersonalAccessTokenRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeletePersonalAccessTokenExecute(r)
}

/*
DeletePersonalAccessToken Method for DeletePersonalAccessToken

Delete PersonalAccessToken

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of personalaccesstoken
 @return ApiDeletePersonalAccessTokenRequest
*/
func (a *PersonalAccessTokenV1alpha1APIService) DeletePersonalAccessToken(ctx context.Context, name string) ApiDeletePersonalAccessTokenRequest {
	return ApiDeletePersonalAccessTokenRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
func (a *PersonalAccessTokenV1alpha1APIService) DeletePersonalAccessTokenExecute(r ApiDeletePersonalAccessTokenRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PersonalAccessTokenV1alpha1APIService.DeletePersonalAccessToken")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/security.halo.run/v1alpha1/personalaccesstokens/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetPersonalAccessTokenRequest struct {
	ctx context.Context
	ApiService PersonalAccessTokenV1alpha1API
	name string
}

func (r ApiGetPersonalAccessTokenRequest) Execute() (*PersonalAccessToken, *http.Response, error) {
	return r.ApiService.GetPersonalAccessTokenExecute(r)
}

/*
GetPersonalAccessToken Method for GetPersonalAccessToken

Get PersonalAccessToken

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of personalaccesstoken
 @return ApiGetPersonalAccessTokenRequest
*/
func (a *PersonalAccessTokenV1alpha1APIService) GetPersonalAccessToken(ctx context.Context, name string) ApiGetPersonalAccessTokenRequest {
	return ApiGetPersonalAccessTokenRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return PersonalAccessToken
func (a *PersonalAccessTokenV1alpha1APIService) GetPersonalAccessTokenExecute(r ApiGetPersonalAccessTokenRequest) (*PersonalAccessToken, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PersonalAccessToken
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PersonalAccessTokenV1alpha1APIService.GetPersonalAccessToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/security.halo.run/v1alpha1/personalaccesstokens/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListPersonalAccessTokenRequest struct {
	ctx context.Context
	ApiService PersonalAccessTokenV1alpha1API
	page *int32
	size *int32
	labelSelector *[]string
	fieldSelector *[]string
	sort *[]string
}

// Page number. Default is 0.
func (r ApiListPersonalAccessTokenRequest) Page(page int32) ApiListPersonalAccessTokenRequest {
	r.page = &page
	return r
}

// Size number. Default is 0.
func (r ApiListPersonalAccessTokenRequest) Size(size int32) ApiListPersonalAccessTokenRequest {
	r.size = &size
	return r
}

// Label selector. e.g.: hidden!&#x3D;true
func (r ApiListPersonalAccessTokenRequest) LabelSelector(labelSelector []string) ApiListPersonalAccessTokenRequest {
	r.labelSelector = &labelSelector
	return r
}

// Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
func (r ApiListPersonalAccessTokenRequest) FieldSelector(fieldSelector []string) ApiListPersonalAccessTokenRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListPersonalAccessTokenRequest) Sort(sort []string) ApiListPersonalAccessTokenRequest {
	r.sort = &sort
	return r
}

func (r ApiListPersonalAccessTokenRequest) Execute() (*PersonalAccessTokenList, *http.Response, error) {
	return r.ApiService.ListPersonalAccessTokenExecute(r)
}

/*
ListPersonalAccessToken Method for ListPersonalAccessToken

List PersonalAccessToken

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListPersonalAccessTokenRequest
*/
func (a *PersonalAccessTokenV1alpha1APIService) ListPersonalAccessToken(ctx context.Context) ApiListPersonalAccessTokenRequest {
	return ApiListPersonalAccessTokenRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PersonalAccessTokenList
func (a *PersonalAccessTokenV1alpha1APIService) ListPersonalAccessTokenExecute(r ApiListPersonalAccessTokenRequest) (*PersonalAccessTokenList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PersonalAccessTokenList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PersonalAccessTokenV1alpha1APIService.ListPersonalAccessToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/security.halo.run/v1alpha1/personalaccesstokens"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.labelSelector != nil {
		t := *r.labelSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", t, "form", "multi")
		}
	}
	if r.fieldSelector != nil {
		t := *r.fieldSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", t, "form", "multi")
		}
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchPersonalAccessTokenRequest struct {
	ctx context.Context
	ApiService PersonalAccessTokenV1alpha1API
	name string
	jsonPatchInner *[]JsonPatchInner
}

func (r ApiPatchPersonalAccessTokenRequest) JsonPatchInner(jsonPatchInner []JsonPatchInner) ApiPatchPersonalAccessTokenRequest {
	r.jsonPatchInner = &jsonPatchInner
	return r
}

func (r ApiPatchPersonalAccessTokenRequest) Execute() (*PersonalAccessToken, *http.Response, error) {
	return r.ApiService.PatchPersonalAccessTokenExecute(r)
}

/*
PatchPersonalAccessToken Method for PatchPersonalAccessToken

Patch PersonalAccessToken

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of personalaccesstoken
 @return ApiPatchPersonalAccessTokenRequest
*/
func (a *PersonalAccessTokenV1alpha1APIService) PatchPersonalAccessToken(ctx context.Context, name string) ApiPatchPersonalAccessTokenRequest {
	return ApiPatchPersonalAccessTokenRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return PersonalAccessToken
func (a *PersonalAccessTokenV1alpha1APIService) PatchPersonalAccessTokenExecute(r ApiPatchPersonalAccessTokenRequest) (*PersonalAccessToken, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PersonalAccessToken
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PersonalAccessTokenV1alpha1APIService.PatchPersonalAccessToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/security.halo.run/v1alpha1/personalaccesstokens/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jsonPatchInner
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdatePersonalAccessTokenRequest struct {
	ctx context.Context
	ApiService PersonalAccessTokenV1alpha1API
	name string
	personalAccessToken *PersonalAccessToken
}

// Updated personalaccesstoken
func (r ApiUpdatePersonalAccessTokenRequest) PersonalAccessToken(personalAccessToken PersonalAccessToken) ApiUpdatePersonalAccessTokenRequest {
	r.personalAccessToken = &personalAccessToken
	return r
}

func (r ApiUpdatePersonalAccessTokenRequest) Execute() (*PersonalAccessToken, *http.Response, error) {
	return r.ApiService.UpdatePersonalAccessTokenExecute(r)
}

/*
UpdatePersonalAccessToken Method for UpdatePersonalAccessToken

Update PersonalAccessToken

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of personalaccesstoken
 @return ApiUpdatePersonalAccessTokenRequest
*/
func (a *PersonalAccessTokenV1alpha1APIService) UpdatePersonalAccessToken(ctx context.Context, name string) ApiUpdatePersonalAccessTokenRequest {
	return ApiUpdatePersonalAccessTokenRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return PersonalAccessToken
func (a *PersonalAccessTokenV1alpha1APIService) UpdatePersonalAccessTokenExecute(r ApiUpdatePersonalAccessTokenRequest) (*PersonalAccessToken, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PersonalAccessToken
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PersonalAccessTokenV1alpha1APIService.UpdatePersonalAccessToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/security.halo.run/v1alpha1/personalaccesstokens/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.personalAccessToken
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
