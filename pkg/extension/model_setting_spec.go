/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SettingSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SettingSpec{}

// SettingSpec struct for SettingSpec
type SettingSpec struct {
	Forms []SettingForm `json:"forms"`
}

type _SettingSpec SettingSpec

// NewSettingSpec instantiates a new SettingSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingSpec(forms []SettingForm) *SettingSpec {
	this := SettingSpec{}
	this.Forms = forms
	return &this
}

// NewSettingSpecWithDefaults instantiates a new SettingSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingSpecWithDefaults() *SettingSpec {
	this := SettingSpec{}
	return &this
}

// GetForms returns the Forms field value
func (o *SettingSpec) GetForms() []SettingForm {
	if o == nil {
		var ret []SettingForm
		return ret
	}

	return o.Forms
}

// GetFormsOk returns a tuple with the Forms field value
// and a boolean to check if the value has been set.
func (o *SettingSpec) GetFormsOk() ([]SettingForm, bool) {
	if o == nil {
		return nil, false
	}
	return o.Forms, true
}

// SetForms sets field value
func (o *SettingSpec) SetForms(v []SettingForm) {
	o.Forms = v
}

func (o SettingSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SettingSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["forms"] = o.Forms
	return toSerialize, nil
}

func (o *SettingSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"forms",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSettingSpec := _SettingSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSettingSpec)

	if err != nil {
		return err
	}

	*o = SettingSpec(varSettingSpec)

	return err
}

type NullableSettingSpec struct {
	value *SettingSpec
	isSet bool
}

func (v NullableSettingSpec) Get() *SettingSpec {
	return v.value
}

func (v *NullableSettingSpec) Set(val *SettingSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingSpec(val *SettingSpec) *NullableSettingSpec {
	return &NullableSettingSpec{value: val, isSet: true}
}

func (v NullableSettingSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


