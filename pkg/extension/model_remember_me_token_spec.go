/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the RememberMeTokenSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RememberMeTokenSpec{}

// RememberMeTokenSpec struct for RememberMeTokenSpec
type RememberMeTokenSpec struct {
	LastUsed *time.Time `json:"lastUsed,omitempty"`
	Series string `json:"series"`
	TokenValue string `json:"tokenValue"`
	Username string `json:"username"`
}

type _RememberMeTokenSpec RememberMeTokenSpec

// NewRememberMeTokenSpec instantiates a new RememberMeTokenSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRememberMeTokenSpec(series string, tokenValue string, username string) *RememberMeTokenSpec {
	this := RememberMeTokenSpec{}
	this.Series = series
	this.TokenValue = tokenValue
	this.Username = username
	return &this
}

// NewRememberMeTokenSpecWithDefaults instantiates a new RememberMeTokenSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRememberMeTokenSpecWithDefaults() *RememberMeTokenSpec {
	this := RememberMeTokenSpec{}
	return &this
}

// GetLastUsed returns the LastUsed field value if set, zero value otherwise.
func (o *RememberMeTokenSpec) GetLastUsed() time.Time {
	if o == nil || IsNil(o.LastUsed) {
		var ret time.Time
		return ret
	}
	return *o.LastUsed
}

// GetLastUsedOk returns a tuple with the LastUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RememberMeTokenSpec) GetLastUsedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUsed) {
		return nil, false
	}
	return o.LastUsed, true
}

// HasLastUsed returns a boolean if a field has been set.
func (o *RememberMeTokenSpec) HasLastUsed() bool {
	if o != nil && !IsNil(o.LastUsed) {
		return true
	}

	return false
}

// SetLastUsed gets a reference to the given time.Time and assigns it to the LastUsed field.
func (o *RememberMeTokenSpec) SetLastUsed(v time.Time) {
	o.LastUsed = &v
}

// GetSeries returns the Series field value
func (o *RememberMeTokenSpec) GetSeries() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Series
}

// GetSeriesOk returns a tuple with the Series field value
// and a boolean to check if the value has been set.
func (o *RememberMeTokenSpec) GetSeriesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Series, true
}

// SetSeries sets field value
func (o *RememberMeTokenSpec) SetSeries(v string) {
	o.Series = v
}

// GetTokenValue returns the TokenValue field value
func (o *RememberMeTokenSpec) GetTokenValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenValue
}

// GetTokenValueOk returns a tuple with the TokenValue field value
// and a boolean to check if the value has been set.
func (o *RememberMeTokenSpec) GetTokenValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenValue, true
}

// SetTokenValue sets field value
func (o *RememberMeTokenSpec) SetTokenValue(v string) {
	o.TokenValue = v
}

// GetUsername returns the Username field value
func (o *RememberMeTokenSpec) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *RememberMeTokenSpec) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *RememberMeTokenSpec) SetUsername(v string) {
	o.Username = v
}

func (o RememberMeTokenSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RememberMeTokenSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LastUsed) {
		toSerialize["lastUsed"] = o.LastUsed
	}
	toSerialize["series"] = o.Series
	toSerialize["tokenValue"] = o.TokenValue
	toSerialize["username"] = o.Username
	return toSerialize, nil
}

func (o *RememberMeTokenSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"series",
		"tokenValue",
		"username",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRememberMeTokenSpec := _RememberMeTokenSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRememberMeTokenSpec)

	if err != nil {
		return err
	}

	*o = RememberMeTokenSpec(varRememberMeTokenSpec)

	return err
}

type NullableRememberMeTokenSpec struct {
	value *RememberMeTokenSpec
	isSet bool
}

func (v NullableRememberMeTokenSpec) Get() *RememberMeTokenSpec {
	return v.value
}

func (v *NullableRememberMeTokenSpec) Set(val *RememberMeTokenSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableRememberMeTokenSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableRememberMeTokenSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRememberMeTokenSpec(val *RememberMeTokenSpec) *NullableRememberMeTokenSpec {
	return &NullableRememberMeTokenSpec{value: val, isSet: true}
}

func (v NullableRememberMeTokenSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRememberMeTokenSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


