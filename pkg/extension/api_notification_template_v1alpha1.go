/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type NotificationTemplateV1alpha1API interface {

	/*
	CreateNotificationTemplate Method for CreateNotificationTemplate

	Create NotificationTemplate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateNotificationTemplateRequest
	*/
	CreateNotificationTemplate(ctx context.Context) ApiCreateNotificationTemplateRequest

	// CreateNotificationTemplateExecute executes the request
	//  @return NotificationTemplate
	CreateNotificationTemplateExecute(r ApiCreateNotificationTemplateRequest) (*NotificationTemplate, *http.Response, error)

	/*
	DeleteNotificationTemplate Method for DeleteNotificationTemplate

	Delete NotificationTemplate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of notificationtemplate
	@return ApiDeleteNotificationTemplateRequest
	*/
	DeleteNotificationTemplate(ctx context.Context, name string) ApiDeleteNotificationTemplateRequest

	// DeleteNotificationTemplateExecute executes the request
	DeleteNotificationTemplateExecute(r ApiDeleteNotificationTemplateRequest) (*http.Response, error)

	/*
	GetNotificationTemplate Method for GetNotificationTemplate

	Get NotificationTemplate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of notificationtemplate
	@return ApiGetNotificationTemplateRequest
	*/
	GetNotificationTemplate(ctx context.Context, name string) ApiGetNotificationTemplateRequest

	// GetNotificationTemplateExecute executes the request
	//  @return NotificationTemplate
	GetNotificationTemplateExecute(r ApiGetNotificationTemplateRequest) (*NotificationTemplate, *http.Response, error)

	/*
	ListNotificationTemplate Method for ListNotificationTemplate

	List NotificationTemplate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListNotificationTemplateRequest
	*/
	ListNotificationTemplate(ctx context.Context) ApiListNotificationTemplateRequest

	// ListNotificationTemplateExecute executes the request
	//  @return NotificationTemplateList
	ListNotificationTemplateExecute(r ApiListNotificationTemplateRequest) (*NotificationTemplateList, *http.Response, error)

	/*
	PatchNotificationTemplate Method for PatchNotificationTemplate

	Patch NotificationTemplate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of notificationtemplate
	@return ApiPatchNotificationTemplateRequest
	*/
	PatchNotificationTemplate(ctx context.Context, name string) ApiPatchNotificationTemplateRequest

	// PatchNotificationTemplateExecute executes the request
	//  @return NotificationTemplate
	PatchNotificationTemplateExecute(r ApiPatchNotificationTemplateRequest) (*NotificationTemplate, *http.Response, error)

	/*
	UpdateNotificationTemplate Method for UpdateNotificationTemplate

	Update NotificationTemplate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of notificationtemplate
	@return ApiUpdateNotificationTemplateRequest
	*/
	UpdateNotificationTemplate(ctx context.Context, name string) ApiUpdateNotificationTemplateRequest

	// UpdateNotificationTemplateExecute executes the request
	//  @return NotificationTemplate
	UpdateNotificationTemplateExecute(r ApiUpdateNotificationTemplateRequest) (*NotificationTemplate, *http.Response, error)
}

// NotificationTemplateV1alpha1APIService NotificationTemplateV1alpha1API service
type NotificationTemplateV1alpha1APIService service

type ApiCreateNotificationTemplateRequest struct {
	ctx context.Context
	ApiService NotificationTemplateV1alpha1API
	notificationTemplate *NotificationTemplate
}

// Fresh notificationtemplate
func (r ApiCreateNotificationTemplateRequest) NotificationTemplate(notificationTemplate NotificationTemplate) ApiCreateNotificationTemplateRequest {
	r.notificationTemplate = &notificationTemplate
	return r
}

func (r ApiCreateNotificationTemplateRequest) Execute() (*NotificationTemplate, *http.Response, error) {
	return r.ApiService.CreateNotificationTemplateExecute(r)
}

/*
CreateNotificationTemplate Method for CreateNotificationTemplate

Create NotificationTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateNotificationTemplateRequest
*/
func (a *NotificationTemplateV1alpha1APIService) CreateNotificationTemplate(ctx context.Context) ApiCreateNotificationTemplateRequest {
	return ApiCreateNotificationTemplateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return NotificationTemplate
func (a *NotificationTemplateV1alpha1APIService) CreateNotificationTemplateExecute(r ApiCreateNotificationTemplateRequest) (*NotificationTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NotificationTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotificationTemplateV1alpha1APIService.CreateNotificationTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/notification.halo.run/v1alpha1/notificationtemplates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.notificationTemplate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteNotificationTemplateRequest struct {
	ctx context.Context
	ApiService NotificationTemplateV1alpha1API
	name string
}

func (r ApiDeleteNotificationTemplateRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteNotificationTemplateExecute(r)
}

/*
DeleteNotificationTemplate Method for DeleteNotificationTemplate

Delete NotificationTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of notificationtemplate
 @return ApiDeleteNotificationTemplateRequest
*/
func (a *NotificationTemplateV1alpha1APIService) DeleteNotificationTemplate(ctx context.Context, name string) ApiDeleteNotificationTemplateRequest {
	return ApiDeleteNotificationTemplateRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
func (a *NotificationTemplateV1alpha1APIService) DeleteNotificationTemplateExecute(r ApiDeleteNotificationTemplateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotificationTemplateV1alpha1APIService.DeleteNotificationTemplate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/notification.halo.run/v1alpha1/notificationtemplates/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetNotificationTemplateRequest struct {
	ctx context.Context
	ApiService NotificationTemplateV1alpha1API
	name string
}

func (r ApiGetNotificationTemplateRequest) Execute() (*NotificationTemplate, *http.Response, error) {
	return r.ApiService.GetNotificationTemplateExecute(r)
}

/*
GetNotificationTemplate Method for GetNotificationTemplate

Get NotificationTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of notificationtemplate
 @return ApiGetNotificationTemplateRequest
*/
func (a *NotificationTemplateV1alpha1APIService) GetNotificationTemplate(ctx context.Context, name string) ApiGetNotificationTemplateRequest {
	return ApiGetNotificationTemplateRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return NotificationTemplate
func (a *NotificationTemplateV1alpha1APIService) GetNotificationTemplateExecute(r ApiGetNotificationTemplateRequest) (*NotificationTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NotificationTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotificationTemplateV1alpha1APIService.GetNotificationTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/notification.halo.run/v1alpha1/notificationtemplates/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListNotificationTemplateRequest struct {
	ctx context.Context
	ApiService NotificationTemplateV1alpha1API
	page *int32
	size *int32
	labelSelector *[]string
	fieldSelector *[]string
	sort *[]string
}

// Page number. Default is 0.
func (r ApiListNotificationTemplateRequest) Page(page int32) ApiListNotificationTemplateRequest {
	r.page = &page
	return r
}

// Size number. Default is 0.
func (r ApiListNotificationTemplateRequest) Size(size int32) ApiListNotificationTemplateRequest {
	r.size = &size
	return r
}

// Label selector. e.g.: hidden!&#x3D;true
func (r ApiListNotificationTemplateRequest) LabelSelector(labelSelector []string) ApiListNotificationTemplateRequest {
	r.labelSelector = &labelSelector
	return r
}

// Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
func (r ApiListNotificationTemplateRequest) FieldSelector(fieldSelector []string) ApiListNotificationTemplateRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListNotificationTemplateRequest) Sort(sort []string) ApiListNotificationTemplateRequest {
	r.sort = &sort
	return r
}

func (r ApiListNotificationTemplateRequest) Execute() (*NotificationTemplateList, *http.Response, error) {
	return r.ApiService.ListNotificationTemplateExecute(r)
}

/*
ListNotificationTemplate Method for ListNotificationTemplate

List NotificationTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListNotificationTemplateRequest
*/
func (a *NotificationTemplateV1alpha1APIService) ListNotificationTemplate(ctx context.Context) ApiListNotificationTemplateRequest {
	return ApiListNotificationTemplateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return NotificationTemplateList
func (a *NotificationTemplateV1alpha1APIService) ListNotificationTemplateExecute(r ApiListNotificationTemplateRequest) (*NotificationTemplateList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NotificationTemplateList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotificationTemplateV1alpha1APIService.ListNotificationTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/notification.halo.run/v1alpha1/notificationtemplates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.labelSelector != nil {
		t := *r.labelSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", t, "form", "multi")
		}
	}
	if r.fieldSelector != nil {
		t := *r.fieldSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", t, "form", "multi")
		}
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchNotificationTemplateRequest struct {
	ctx context.Context
	ApiService NotificationTemplateV1alpha1API
	name string
	jsonPatchInner *[]JsonPatchInner
}

func (r ApiPatchNotificationTemplateRequest) JsonPatchInner(jsonPatchInner []JsonPatchInner) ApiPatchNotificationTemplateRequest {
	r.jsonPatchInner = &jsonPatchInner
	return r
}

func (r ApiPatchNotificationTemplateRequest) Execute() (*NotificationTemplate, *http.Response, error) {
	return r.ApiService.PatchNotificationTemplateExecute(r)
}

/*
PatchNotificationTemplate Method for PatchNotificationTemplate

Patch NotificationTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of notificationtemplate
 @return ApiPatchNotificationTemplateRequest
*/
func (a *NotificationTemplateV1alpha1APIService) PatchNotificationTemplate(ctx context.Context, name string) ApiPatchNotificationTemplateRequest {
	return ApiPatchNotificationTemplateRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return NotificationTemplate
func (a *NotificationTemplateV1alpha1APIService) PatchNotificationTemplateExecute(r ApiPatchNotificationTemplateRequest) (*NotificationTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NotificationTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotificationTemplateV1alpha1APIService.PatchNotificationTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/notification.halo.run/v1alpha1/notificationtemplates/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jsonPatchInner
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateNotificationTemplateRequest struct {
	ctx context.Context
	ApiService NotificationTemplateV1alpha1API
	name string
	notificationTemplate *NotificationTemplate
}

// Updated notificationtemplate
func (r ApiUpdateNotificationTemplateRequest) NotificationTemplate(notificationTemplate NotificationTemplate) ApiUpdateNotificationTemplateRequest {
	r.notificationTemplate = &notificationTemplate
	return r
}

func (r ApiUpdateNotificationTemplateRequest) Execute() (*NotificationTemplate, *http.Response, error) {
	return r.ApiService.UpdateNotificationTemplateExecute(r)
}

/*
UpdateNotificationTemplate Method for UpdateNotificationTemplate

Update NotificationTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of notificationtemplate
 @return ApiUpdateNotificationTemplateRequest
*/
func (a *NotificationTemplateV1alpha1APIService) UpdateNotificationTemplate(ctx context.Context, name string) ApiUpdateNotificationTemplateRequest {
	return ApiUpdateNotificationTemplateRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return NotificationTemplate
func (a *NotificationTemplateV1alpha1APIService) UpdateNotificationTemplateExecute(r ApiUpdateNotificationTemplateRequest) (*NotificationTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NotificationTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotificationTemplateV1alpha1APIService.UpdateNotificationTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/notification.halo.run/v1alpha1/notificationtemplates/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.notificationTemplate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
