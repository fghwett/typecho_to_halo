/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MenuSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MenuSpec{}

// MenuSpec The spec of menu.
type MenuSpec struct {
	// The display name of the menu.
	DisplayName string `json:"displayName"`
	// Menu items of this menu.
	MenuItems []string `json:"menuItems,omitempty"`
}

type _MenuSpec MenuSpec

// NewMenuSpec instantiates a new MenuSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMenuSpec(displayName string) *MenuSpec {
	this := MenuSpec{}
	this.DisplayName = displayName
	return &this
}

// NewMenuSpecWithDefaults instantiates a new MenuSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMenuSpecWithDefaults() *MenuSpec {
	this := MenuSpec{}
	return &this
}

// GetDisplayName returns the DisplayName field value
func (o *MenuSpec) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *MenuSpec) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *MenuSpec) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetMenuItems returns the MenuItems field value if set, zero value otherwise.
func (o *MenuSpec) GetMenuItems() []string {
	if o == nil || IsNil(o.MenuItems) {
		var ret []string
		return ret
	}
	return o.MenuItems
}

// GetMenuItemsOk returns a tuple with the MenuItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuSpec) GetMenuItemsOk() ([]string, bool) {
	if o == nil || IsNil(o.MenuItems) {
		return nil, false
	}
	return o.MenuItems, true
}

// HasMenuItems returns a boolean if a field has been set.
func (o *MenuSpec) HasMenuItems() bool {
	if o != nil && !IsNil(o.MenuItems) {
		return true
	}

	return false
}

// SetMenuItems gets a reference to the given []string and assigns it to the MenuItems field.
func (o *MenuSpec) SetMenuItems(v []string) {
	o.MenuItems = v
}

func (o MenuSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MenuSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["displayName"] = o.DisplayName
	if !IsNil(o.MenuItems) {
		toSerialize["menuItems"] = o.MenuItems
	}
	return toSerialize, nil
}

func (o *MenuSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"displayName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMenuSpec := _MenuSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMenuSpec)

	if err != nil {
		return err
	}

	*o = MenuSpec(varMenuSpec)

	return err
}

type NullableMenuSpec struct {
	value *MenuSpec
	isSet bool
}

func (v NullableMenuSpec) Get() *MenuSpec {
	return v.value
}

func (v *NullableMenuSpec) Set(val *MenuSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableMenuSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableMenuSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMenuSpec(val *MenuSpec) *NullableMenuSpec {
	return &NullableMenuSpec{value: val, isSet: true}
}

func (v NullableMenuSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMenuSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


