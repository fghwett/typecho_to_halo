/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type UserConnectionV1alpha1API interface {

	/*
	CreateUserConnection Method for CreateUserConnection

	Create UserConnection

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateUserConnectionRequest
	*/
	CreateUserConnection(ctx context.Context) ApiCreateUserConnectionRequest

	// CreateUserConnectionExecute executes the request
	//  @return UserConnection
	CreateUserConnectionExecute(r ApiCreateUserConnectionRequest) (*UserConnection, *http.Response, error)

	/*
	DeleteUserConnection Method for DeleteUserConnection

	Delete UserConnection

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of userconnection
	@return ApiDeleteUserConnectionRequest
	*/
	DeleteUserConnection(ctx context.Context, name string) ApiDeleteUserConnectionRequest

	// DeleteUserConnectionExecute executes the request
	DeleteUserConnectionExecute(r ApiDeleteUserConnectionRequest) (*http.Response, error)

	/*
	GetUserConnection Method for GetUserConnection

	Get UserConnection

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of userconnection
	@return ApiGetUserConnectionRequest
	*/
	GetUserConnection(ctx context.Context, name string) ApiGetUserConnectionRequest

	// GetUserConnectionExecute executes the request
	//  @return UserConnection
	GetUserConnectionExecute(r ApiGetUserConnectionRequest) (*UserConnection, *http.Response, error)

	/*
	ListUserConnection Method for ListUserConnection

	List UserConnection

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListUserConnectionRequest
	*/
	ListUserConnection(ctx context.Context) ApiListUserConnectionRequest

	// ListUserConnectionExecute executes the request
	//  @return UserConnectionList
	ListUserConnectionExecute(r ApiListUserConnectionRequest) (*UserConnectionList, *http.Response, error)

	/*
	PatchUserConnection Method for PatchUserConnection

	Patch UserConnection

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of userconnection
	@return ApiPatchUserConnectionRequest
	*/
	PatchUserConnection(ctx context.Context, name string) ApiPatchUserConnectionRequest

	// PatchUserConnectionExecute executes the request
	//  @return UserConnection
	PatchUserConnectionExecute(r ApiPatchUserConnectionRequest) (*UserConnection, *http.Response, error)

	/*
	UpdateUserConnection Method for UpdateUserConnection

	Update UserConnection

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of userconnection
	@return ApiUpdateUserConnectionRequest
	*/
	UpdateUserConnection(ctx context.Context, name string) ApiUpdateUserConnectionRequest

	// UpdateUserConnectionExecute executes the request
	//  @return UserConnection
	UpdateUserConnectionExecute(r ApiUpdateUserConnectionRequest) (*UserConnection, *http.Response, error)
}

// UserConnectionV1alpha1APIService UserConnectionV1alpha1API service
type UserConnectionV1alpha1APIService service

type ApiCreateUserConnectionRequest struct {
	ctx context.Context
	ApiService UserConnectionV1alpha1API
	userConnection *UserConnection
}

// Fresh userconnection
func (r ApiCreateUserConnectionRequest) UserConnection(userConnection UserConnection) ApiCreateUserConnectionRequest {
	r.userConnection = &userConnection
	return r
}

func (r ApiCreateUserConnectionRequest) Execute() (*UserConnection, *http.Response, error) {
	return r.ApiService.CreateUserConnectionExecute(r)
}

/*
CreateUserConnection Method for CreateUserConnection

Create UserConnection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateUserConnectionRequest
*/
func (a *UserConnectionV1alpha1APIService) CreateUserConnection(ctx context.Context) ApiCreateUserConnectionRequest {
	return ApiCreateUserConnectionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UserConnection
func (a *UserConnectionV1alpha1APIService) CreateUserConnectionExecute(r ApiCreateUserConnectionRequest) (*UserConnection, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserConnection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserConnectionV1alpha1APIService.CreateUserConnection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/auth.halo.run/v1alpha1/userconnections"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.userConnection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteUserConnectionRequest struct {
	ctx context.Context
	ApiService UserConnectionV1alpha1API
	name string
}

func (r ApiDeleteUserConnectionRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteUserConnectionExecute(r)
}

/*
DeleteUserConnection Method for DeleteUserConnection

Delete UserConnection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of userconnection
 @return ApiDeleteUserConnectionRequest
*/
func (a *UserConnectionV1alpha1APIService) DeleteUserConnection(ctx context.Context, name string) ApiDeleteUserConnectionRequest {
	return ApiDeleteUserConnectionRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
func (a *UserConnectionV1alpha1APIService) DeleteUserConnectionExecute(r ApiDeleteUserConnectionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserConnectionV1alpha1APIService.DeleteUserConnection")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/auth.halo.run/v1alpha1/userconnections/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetUserConnectionRequest struct {
	ctx context.Context
	ApiService UserConnectionV1alpha1API
	name string
}

func (r ApiGetUserConnectionRequest) Execute() (*UserConnection, *http.Response, error) {
	return r.ApiService.GetUserConnectionExecute(r)
}

/*
GetUserConnection Method for GetUserConnection

Get UserConnection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of userconnection
 @return ApiGetUserConnectionRequest
*/
func (a *UserConnectionV1alpha1APIService) GetUserConnection(ctx context.Context, name string) ApiGetUserConnectionRequest {
	return ApiGetUserConnectionRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return UserConnection
func (a *UserConnectionV1alpha1APIService) GetUserConnectionExecute(r ApiGetUserConnectionRequest) (*UserConnection, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserConnection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserConnectionV1alpha1APIService.GetUserConnection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/auth.halo.run/v1alpha1/userconnections/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListUserConnectionRequest struct {
	ctx context.Context
	ApiService UserConnectionV1alpha1API
	page *int32
	size *int32
	labelSelector *[]string
	fieldSelector *[]string
	sort *[]string
}

// Page number. Default is 0.
func (r ApiListUserConnectionRequest) Page(page int32) ApiListUserConnectionRequest {
	r.page = &page
	return r
}

// Size number. Default is 0.
func (r ApiListUserConnectionRequest) Size(size int32) ApiListUserConnectionRequest {
	r.size = &size
	return r
}

// Label selector. e.g.: hidden!&#x3D;true
func (r ApiListUserConnectionRequest) LabelSelector(labelSelector []string) ApiListUserConnectionRequest {
	r.labelSelector = &labelSelector
	return r
}

// Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
func (r ApiListUserConnectionRequest) FieldSelector(fieldSelector []string) ApiListUserConnectionRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListUserConnectionRequest) Sort(sort []string) ApiListUserConnectionRequest {
	r.sort = &sort
	return r
}

func (r ApiListUserConnectionRequest) Execute() (*UserConnectionList, *http.Response, error) {
	return r.ApiService.ListUserConnectionExecute(r)
}

/*
ListUserConnection Method for ListUserConnection

List UserConnection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListUserConnectionRequest
*/
func (a *UserConnectionV1alpha1APIService) ListUserConnection(ctx context.Context) ApiListUserConnectionRequest {
	return ApiListUserConnectionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UserConnectionList
func (a *UserConnectionV1alpha1APIService) ListUserConnectionExecute(r ApiListUserConnectionRequest) (*UserConnectionList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserConnectionList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserConnectionV1alpha1APIService.ListUserConnection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/auth.halo.run/v1alpha1/userconnections"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.labelSelector != nil {
		t := *r.labelSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", t, "form", "multi")
		}
	}
	if r.fieldSelector != nil {
		t := *r.fieldSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", t, "form", "multi")
		}
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchUserConnectionRequest struct {
	ctx context.Context
	ApiService UserConnectionV1alpha1API
	name string
	jsonPatchInner *[]JsonPatchInner
}

func (r ApiPatchUserConnectionRequest) JsonPatchInner(jsonPatchInner []JsonPatchInner) ApiPatchUserConnectionRequest {
	r.jsonPatchInner = &jsonPatchInner
	return r
}

func (r ApiPatchUserConnectionRequest) Execute() (*UserConnection, *http.Response, error) {
	return r.ApiService.PatchUserConnectionExecute(r)
}

/*
PatchUserConnection Method for PatchUserConnection

Patch UserConnection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of userconnection
 @return ApiPatchUserConnectionRequest
*/
func (a *UserConnectionV1alpha1APIService) PatchUserConnection(ctx context.Context, name string) ApiPatchUserConnectionRequest {
	return ApiPatchUserConnectionRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return UserConnection
func (a *UserConnectionV1alpha1APIService) PatchUserConnectionExecute(r ApiPatchUserConnectionRequest) (*UserConnection, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserConnection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserConnectionV1alpha1APIService.PatchUserConnection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/auth.halo.run/v1alpha1/userconnections/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jsonPatchInner
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateUserConnectionRequest struct {
	ctx context.Context
	ApiService UserConnectionV1alpha1API
	name string
	userConnection *UserConnection
}

// Updated userconnection
func (r ApiUpdateUserConnectionRequest) UserConnection(userConnection UserConnection) ApiUpdateUserConnectionRequest {
	r.userConnection = &userConnection
	return r
}

func (r ApiUpdateUserConnectionRequest) Execute() (*UserConnection, *http.Response, error) {
	return r.ApiService.UpdateUserConnectionExecute(r)
}

/*
UpdateUserConnection Method for UpdateUserConnection

Update UserConnection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of userconnection
 @return ApiUpdateUserConnectionRequest
*/
func (a *UserConnectionV1alpha1APIService) UpdateUserConnection(ctx context.Context, name string) ApiUpdateUserConnectionRequest {
	return ApiUpdateUserConnectionRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return UserConnection
func (a *UserConnectionV1alpha1APIService) UpdateUserConnectionExecute(r ApiUpdateUserConnectionRequest) (*UserConnection, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserConnection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserConnectionV1alpha1APIService.UpdateUserConnection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/auth.halo.run/v1alpha1/userconnections/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.userConnection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
