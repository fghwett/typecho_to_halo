/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ThumbnailSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThumbnailSpec{}

// ThumbnailSpec struct for ThumbnailSpec
type ThumbnailSpec struct {
	ImageSignature string `json:"imageSignature"`
	ImageUri string `json:"imageUri"`
	Size string `json:"size"`
	ThumbnailUri string `json:"thumbnailUri"`
}

type _ThumbnailSpec ThumbnailSpec

// NewThumbnailSpec instantiates a new ThumbnailSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThumbnailSpec(imageSignature string, imageUri string, size string, thumbnailUri string) *ThumbnailSpec {
	this := ThumbnailSpec{}
	this.ImageSignature = imageSignature
	this.ImageUri = imageUri
	this.Size = size
	this.ThumbnailUri = thumbnailUri
	return &this
}

// NewThumbnailSpecWithDefaults instantiates a new ThumbnailSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThumbnailSpecWithDefaults() *ThumbnailSpec {
	this := ThumbnailSpec{}
	return &this
}

// GetImageSignature returns the ImageSignature field value
func (o *ThumbnailSpec) GetImageSignature() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageSignature
}

// GetImageSignatureOk returns a tuple with the ImageSignature field value
// and a boolean to check if the value has been set.
func (o *ThumbnailSpec) GetImageSignatureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageSignature, true
}

// SetImageSignature sets field value
func (o *ThumbnailSpec) SetImageSignature(v string) {
	o.ImageSignature = v
}

// GetImageUri returns the ImageUri field value
func (o *ThumbnailSpec) GetImageUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageUri
}

// GetImageUriOk returns a tuple with the ImageUri field value
// and a boolean to check if the value has been set.
func (o *ThumbnailSpec) GetImageUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageUri, true
}

// SetImageUri sets field value
func (o *ThumbnailSpec) SetImageUri(v string) {
	o.ImageUri = v
}

// GetSize returns the Size field value
func (o *ThumbnailSpec) GetSize() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *ThumbnailSpec) GetSizeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *ThumbnailSpec) SetSize(v string) {
	o.Size = v
}

// GetThumbnailUri returns the ThumbnailUri field value
func (o *ThumbnailSpec) GetThumbnailUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ThumbnailUri
}

// GetThumbnailUriOk returns a tuple with the ThumbnailUri field value
// and a boolean to check if the value has been set.
func (o *ThumbnailSpec) GetThumbnailUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ThumbnailUri, true
}

// SetThumbnailUri sets field value
func (o *ThumbnailSpec) SetThumbnailUri(v string) {
	o.ThumbnailUri = v
}

func (o ThumbnailSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThumbnailSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["imageSignature"] = o.ImageSignature
	toSerialize["imageUri"] = o.ImageUri
	toSerialize["size"] = o.Size
	toSerialize["thumbnailUri"] = o.ThumbnailUri
	return toSerialize, nil
}

func (o *ThumbnailSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"imageSignature",
		"imageUri",
		"size",
		"thumbnailUri",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varThumbnailSpec := _ThumbnailSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varThumbnailSpec)

	if err != nil {
		return err
	}

	*o = ThumbnailSpec(varThumbnailSpec)

	return err
}

type NullableThumbnailSpec struct {
	value *ThumbnailSpec
	isSet bool
}

func (v NullableThumbnailSpec) Get() *ThumbnailSpec {
	return v.value
}

func (v *NullableThumbnailSpec) Set(val *ThumbnailSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableThumbnailSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableThumbnailSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThumbnailSpec(val *ThumbnailSpec) *NullableThumbnailSpec {
	return &NullableThumbnailSpec{value: val, isSet: true}
}

func (v NullableThumbnailSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThumbnailSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


