/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExtensionPointSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtensionPointSpec{}

// ExtensionPointSpec struct for ExtensionPointSpec
type ExtensionPointSpec struct {
	ClassName string `json:"className"`
	Description *string `json:"description,omitempty"`
	DisplayName string `json:"displayName"`
	Icon *string `json:"icon,omitempty"`
	Type string `json:"type"`
}

type _ExtensionPointSpec ExtensionPointSpec

// NewExtensionPointSpec instantiates a new ExtensionPointSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtensionPointSpec(className string, displayName string, type_ string) *ExtensionPointSpec {
	this := ExtensionPointSpec{}
	this.ClassName = className
	this.DisplayName = displayName
	this.Type = type_
	return &this
}

// NewExtensionPointSpecWithDefaults instantiates a new ExtensionPointSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensionPointSpecWithDefaults() *ExtensionPointSpec {
	this := ExtensionPointSpec{}
	return &this
}

// GetClassName returns the ClassName field value
func (o *ExtensionPointSpec) GetClassName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassName
}

// GetClassNameOk returns a tuple with the ClassName field value
// and a boolean to check if the value has been set.
func (o *ExtensionPointSpec) GetClassNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassName, true
}

// SetClassName sets field value
func (o *ExtensionPointSpec) SetClassName(v string) {
	o.ClassName = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ExtensionPointSpec) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionPointSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ExtensionPointSpec) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ExtensionPointSpec) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value
func (o *ExtensionPointSpec) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *ExtensionPointSpec) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *ExtensionPointSpec) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *ExtensionPointSpec) GetIcon() string {
	if o == nil || IsNil(o.Icon) {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionPointSpec) GetIconOk() (*string, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *ExtensionPointSpec) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *ExtensionPointSpec) SetIcon(v string) {
	o.Icon = &v
}

// GetType returns the Type field value
func (o *ExtensionPointSpec) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ExtensionPointSpec) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ExtensionPointSpec) SetType(v string) {
	o.Type = v
}

func (o ExtensionPointSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtensionPointSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["className"] = o.ClassName
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["displayName"] = o.DisplayName
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *ExtensionPointSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"className",
		"displayName",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExtensionPointSpec := _ExtensionPointSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExtensionPointSpec)

	if err != nil {
		return err
	}

	*o = ExtensionPointSpec(varExtensionPointSpec)

	return err
}

type NullableExtensionPointSpec struct {
	value *ExtensionPointSpec
	isSet bool
}

func (v NullableExtensionPointSpec) Get() *ExtensionPointSpec {
	return v.value
}

func (v *NullableExtensionPointSpec) Set(val *ExtensionPointSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionPointSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionPointSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionPointSpec(val *ExtensionPointSpec) *NullableExtensionPointSpec {
	return &NullableExtensionPointSpec{value: val, isSet: true}
}

func (v NullableExtensionPointSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionPointSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


