/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"encoding/json"
	"time"
)

// checks if the CommentStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommentStatus{}

// CommentStatus struct for CommentStatus
type CommentStatus struct {
	HasNewReply *bool `json:"hasNewReply,omitempty"`
	LastReplyTime *time.Time `json:"lastReplyTime,omitempty"`
	ObservedVersion *int64 `json:"observedVersion,omitempty"`
	ReplyCount *int32 `json:"replyCount,omitempty"`
	UnreadReplyCount *int32 `json:"unreadReplyCount,omitempty"`
	VisibleReplyCount *int32 `json:"visibleReplyCount,omitempty"`
}

// NewCommentStatus instantiates a new CommentStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommentStatus() *CommentStatus {
	this := CommentStatus{}
	return &this
}

// NewCommentStatusWithDefaults instantiates a new CommentStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentStatusWithDefaults() *CommentStatus {
	this := CommentStatus{}
	return &this
}

// GetHasNewReply returns the HasNewReply field value if set, zero value otherwise.
func (o *CommentStatus) GetHasNewReply() bool {
	if o == nil || IsNil(o.HasNewReply) {
		var ret bool
		return ret
	}
	return *o.HasNewReply
}

// GetHasNewReplyOk returns a tuple with the HasNewReply field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentStatus) GetHasNewReplyOk() (*bool, bool) {
	if o == nil || IsNil(o.HasNewReply) {
		return nil, false
	}
	return o.HasNewReply, true
}

// HasHasNewReply returns a boolean if a field has been set.
func (o *CommentStatus) HasHasNewReply() bool {
	if o != nil && !IsNil(o.HasNewReply) {
		return true
	}

	return false
}

// SetHasNewReply gets a reference to the given bool and assigns it to the HasNewReply field.
func (o *CommentStatus) SetHasNewReply(v bool) {
	o.HasNewReply = &v
}

// GetLastReplyTime returns the LastReplyTime field value if set, zero value otherwise.
func (o *CommentStatus) GetLastReplyTime() time.Time {
	if o == nil || IsNil(o.LastReplyTime) {
		var ret time.Time
		return ret
	}
	return *o.LastReplyTime
}

// GetLastReplyTimeOk returns a tuple with the LastReplyTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentStatus) GetLastReplyTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastReplyTime) {
		return nil, false
	}
	return o.LastReplyTime, true
}

// HasLastReplyTime returns a boolean if a field has been set.
func (o *CommentStatus) HasLastReplyTime() bool {
	if o != nil && !IsNil(o.LastReplyTime) {
		return true
	}

	return false
}

// SetLastReplyTime gets a reference to the given time.Time and assigns it to the LastReplyTime field.
func (o *CommentStatus) SetLastReplyTime(v time.Time) {
	o.LastReplyTime = &v
}

// GetObservedVersion returns the ObservedVersion field value if set, zero value otherwise.
func (o *CommentStatus) GetObservedVersion() int64 {
	if o == nil || IsNil(o.ObservedVersion) {
		var ret int64
		return ret
	}
	return *o.ObservedVersion
}

// GetObservedVersionOk returns a tuple with the ObservedVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentStatus) GetObservedVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.ObservedVersion) {
		return nil, false
	}
	return o.ObservedVersion, true
}

// HasObservedVersion returns a boolean if a field has been set.
func (o *CommentStatus) HasObservedVersion() bool {
	if o != nil && !IsNil(o.ObservedVersion) {
		return true
	}

	return false
}

// SetObservedVersion gets a reference to the given int64 and assigns it to the ObservedVersion field.
func (o *CommentStatus) SetObservedVersion(v int64) {
	o.ObservedVersion = &v
}

// GetReplyCount returns the ReplyCount field value if set, zero value otherwise.
func (o *CommentStatus) GetReplyCount() int32 {
	if o == nil || IsNil(o.ReplyCount) {
		var ret int32
		return ret
	}
	return *o.ReplyCount
}

// GetReplyCountOk returns a tuple with the ReplyCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentStatus) GetReplyCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ReplyCount) {
		return nil, false
	}
	return o.ReplyCount, true
}

// HasReplyCount returns a boolean if a field has been set.
func (o *CommentStatus) HasReplyCount() bool {
	if o != nil && !IsNil(o.ReplyCount) {
		return true
	}

	return false
}

// SetReplyCount gets a reference to the given int32 and assigns it to the ReplyCount field.
func (o *CommentStatus) SetReplyCount(v int32) {
	o.ReplyCount = &v
}

// GetUnreadReplyCount returns the UnreadReplyCount field value if set, zero value otherwise.
func (o *CommentStatus) GetUnreadReplyCount() int32 {
	if o == nil || IsNil(o.UnreadReplyCount) {
		var ret int32
		return ret
	}
	return *o.UnreadReplyCount
}

// GetUnreadReplyCountOk returns a tuple with the UnreadReplyCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentStatus) GetUnreadReplyCountOk() (*int32, bool) {
	if o == nil || IsNil(o.UnreadReplyCount) {
		return nil, false
	}
	return o.UnreadReplyCount, true
}

// HasUnreadReplyCount returns a boolean if a field has been set.
func (o *CommentStatus) HasUnreadReplyCount() bool {
	if o != nil && !IsNil(o.UnreadReplyCount) {
		return true
	}

	return false
}

// SetUnreadReplyCount gets a reference to the given int32 and assigns it to the UnreadReplyCount field.
func (o *CommentStatus) SetUnreadReplyCount(v int32) {
	o.UnreadReplyCount = &v
}

// GetVisibleReplyCount returns the VisibleReplyCount field value if set, zero value otherwise.
func (o *CommentStatus) GetVisibleReplyCount() int32 {
	if o == nil || IsNil(o.VisibleReplyCount) {
		var ret int32
		return ret
	}
	return *o.VisibleReplyCount
}

// GetVisibleReplyCountOk returns a tuple with the VisibleReplyCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentStatus) GetVisibleReplyCountOk() (*int32, bool) {
	if o == nil || IsNil(o.VisibleReplyCount) {
		return nil, false
	}
	return o.VisibleReplyCount, true
}

// HasVisibleReplyCount returns a boolean if a field has been set.
func (o *CommentStatus) HasVisibleReplyCount() bool {
	if o != nil && !IsNil(o.VisibleReplyCount) {
		return true
	}

	return false
}

// SetVisibleReplyCount gets a reference to the given int32 and assigns it to the VisibleReplyCount field.
func (o *CommentStatus) SetVisibleReplyCount(v int32) {
	o.VisibleReplyCount = &v
}

func (o CommentStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommentStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HasNewReply) {
		toSerialize["hasNewReply"] = o.HasNewReply
	}
	if !IsNil(o.LastReplyTime) {
		toSerialize["lastReplyTime"] = o.LastReplyTime
	}
	if !IsNil(o.ObservedVersion) {
		toSerialize["observedVersion"] = o.ObservedVersion
	}
	if !IsNil(o.ReplyCount) {
		toSerialize["replyCount"] = o.ReplyCount
	}
	if !IsNil(o.UnreadReplyCount) {
		toSerialize["unreadReplyCount"] = o.UnreadReplyCount
	}
	if !IsNil(o.VisibleReplyCount) {
		toSerialize["visibleReplyCount"] = o.VisibleReplyCount
	}
	return toSerialize, nil
}

type NullableCommentStatus struct {
	value *CommentStatus
	isSet bool
}

func (v NullableCommentStatus) Get() *CommentStatus {
	return v.value
}

func (v *NullableCommentStatus) Set(val *CommentStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCommentStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCommentStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommentStatus(val *CommentStatus) *NullableCommentStatus {
	return &NullableCommentStatus{value: val, isSet: true}
}

func (v NullableCommentStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommentStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


