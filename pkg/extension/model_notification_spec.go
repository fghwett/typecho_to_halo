/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the NotificationSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationSpec{}

// NotificationSpec struct for NotificationSpec
type NotificationSpec struct {
	HtmlContent string `json:"htmlContent"`
	LastReadAt *time.Time `json:"lastReadAt,omitempty"`
	RawContent string `json:"rawContent"`
	// The name of reason
	Reason string `json:"reason"`
	// The name of user
	Recipient string `json:"recipient"`
	Title string `json:"title"`
	Unread *bool `json:"unread,omitempty"`
}

type _NotificationSpec NotificationSpec

// NewNotificationSpec instantiates a new NotificationSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationSpec(htmlContent string, rawContent string, reason string, recipient string, title string) *NotificationSpec {
	this := NotificationSpec{}
	this.HtmlContent = htmlContent
	this.RawContent = rawContent
	this.Reason = reason
	this.Recipient = recipient
	this.Title = title
	return &this
}

// NewNotificationSpecWithDefaults instantiates a new NotificationSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationSpecWithDefaults() *NotificationSpec {
	this := NotificationSpec{}
	return &this
}

// GetHtmlContent returns the HtmlContent field value
func (o *NotificationSpec) GetHtmlContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HtmlContent
}

// GetHtmlContentOk returns a tuple with the HtmlContent field value
// and a boolean to check if the value has been set.
func (o *NotificationSpec) GetHtmlContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HtmlContent, true
}

// SetHtmlContent sets field value
func (o *NotificationSpec) SetHtmlContent(v string) {
	o.HtmlContent = v
}

// GetLastReadAt returns the LastReadAt field value if set, zero value otherwise.
func (o *NotificationSpec) GetLastReadAt() time.Time {
	if o == nil || IsNil(o.LastReadAt) {
		var ret time.Time
		return ret
	}
	return *o.LastReadAt
}

// GetLastReadAtOk returns a tuple with the LastReadAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSpec) GetLastReadAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastReadAt) {
		return nil, false
	}
	return o.LastReadAt, true
}

// HasLastReadAt returns a boolean if a field has been set.
func (o *NotificationSpec) HasLastReadAt() bool {
	if o != nil && !IsNil(o.LastReadAt) {
		return true
	}

	return false
}

// SetLastReadAt gets a reference to the given time.Time and assigns it to the LastReadAt field.
func (o *NotificationSpec) SetLastReadAt(v time.Time) {
	o.LastReadAt = &v
}

// GetRawContent returns the RawContent field value
func (o *NotificationSpec) GetRawContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RawContent
}

// GetRawContentOk returns a tuple with the RawContent field value
// and a boolean to check if the value has been set.
func (o *NotificationSpec) GetRawContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RawContent, true
}

// SetRawContent sets field value
func (o *NotificationSpec) SetRawContent(v string) {
	o.RawContent = v
}

// GetReason returns the Reason field value
func (o *NotificationSpec) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *NotificationSpec) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *NotificationSpec) SetReason(v string) {
	o.Reason = v
}

// GetRecipient returns the Recipient field value
func (o *NotificationSpec) GetRecipient() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Recipient
}

// GetRecipientOk returns a tuple with the Recipient field value
// and a boolean to check if the value has been set.
func (o *NotificationSpec) GetRecipientOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Recipient, true
}

// SetRecipient sets field value
func (o *NotificationSpec) SetRecipient(v string) {
	o.Recipient = v
}

// GetTitle returns the Title field value
func (o *NotificationSpec) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *NotificationSpec) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *NotificationSpec) SetTitle(v string) {
	o.Title = v
}

// GetUnread returns the Unread field value if set, zero value otherwise.
func (o *NotificationSpec) GetUnread() bool {
	if o == nil || IsNil(o.Unread) {
		var ret bool
		return ret
	}
	return *o.Unread
}

// GetUnreadOk returns a tuple with the Unread field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSpec) GetUnreadOk() (*bool, bool) {
	if o == nil || IsNil(o.Unread) {
		return nil, false
	}
	return o.Unread, true
}

// HasUnread returns a boolean if a field has been set.
func (o *NotificationSpec) HasUnread() bool {
	if o != nil && !IsNil(o.Unread) {
		return true
	}

	return false
}

// SetUnread gets a reference to the given bool and assigns it to the Unread field.
func (o *NotificationSpec) SetUnread(v bool) {
	o.Unread = &v
}

func (o NotificationSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["htmlContent"] = o.HtmlContent
	if !IsNil(o.LastReadAt) {
		toSerialize["lastReadAt"] = o.LastReadAt
	}
	toSerialize["rawContent"] = o.RawContent
	toSerialize["reason"] = o.Reason
	toSerialize["recipient"] = o.Recipient
	toSerialize["title"] = o.Title
	if !IsNil(o.Unread) {
		toSerialize["unread"] = o.Unread
	}
	return toSerialize, nil
}

func (o *NotificationSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"htmlContent",
		"rawContent",
		"reason",
		"recipient",
		"title",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNotificationSpec := _NotificationSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNotificationSpec)

	if err != nil {
		return err
	}

	*o = NotificationSpec(varNotificationSpec)

	return err
}

type NullableNotificationSpec struct {
	value *NotificationSpec
	isSet bool
}

func (v NullableNotificationSpec) Get() *NotificationSpec {
	return v.value
}

func (v *NullableNotificationSpec) Set(val *NotificationSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationSpec(val *NotificationSpec) *NullableNotificationSpec {
	return &NullableNotificationSpec{value: val, isSet: true}
}

func (v NullableNotificationSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


