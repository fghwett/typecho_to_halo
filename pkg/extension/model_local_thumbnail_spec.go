/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LocalThumbnailSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocalThumbnailSpec{}

// LocalThumbnailSpec struct for LocalThumbnailSpec
type LocalThumbnailSpec struct {
	FilePath string `json:"filePath"`
	ImageSignature string `json:"imageSignature"`
	ImageUri string `json:"imageUri"`
	Size string `json:"size"`
	ThumbSignature string `json:"thumbSignature"`
	ThumbnailUri string `json:"thumbnailUri"`
}

type _LocalThumbnailSpec LocalThumbnailSpec

// NewLocalThumbnailSpec instantiates a new LocalThumbnailSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocalThumbnailSpec(filePath string, imageSignature string, imageUri string, size string, thumbSignature string, thumbnailUri string) *LocalThumbnailSpec {
	this := LocalThumbnailSpec{}
	this.FilePath = filePath
	this.ImageSignature = imageSignature
	this.ImageUri = imageUri
	this.Size = size
	this.ThumbSignature = thumbSignature
	this.ThumbnailUri = thumbnailUri
	return &this
}

// NewLocalThumbnailSpecWithDefaults instantiates a new LocalThumbnailSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocalThumbnailSpecWithDefaults() *LocalThumbnailSpec {
	this := LocalThumbnailSpec{}
	return &this
}

// GetFilePath returns the FilePath field value
func (o *LocalThumbnailSpec) GetFilePath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FilePath
}

// GetFilePathOk returns a tuple with the FilePath field value
// and a boolean to check if the value has been set.
func (o *LocalThumbnailSpec) GetFilePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FilePath, true
}

// SetFilePath sets field value
func (o *LocalThumbnailSpec) SetFilePath(v string) {
	o.FilePath = v
}

// GetImageSignature returns the ImageSignature field value
func (o *LocalThumbnailSpec) GetImageSignature() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageSignature
}

// GetImageSignatureOk returns a tuple with the ImageSignature field value
// and a boolean to check if the value has been set.
func (o *LocalThumbnailSpec) GetImageSignatureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageSignature, true
}

// SetImageSignature sets field value
func (o *LocalThumbnailSpec) SetImageSignature(v string) {
	o.ImageSignature = v
}

// GetImageUri returns the ImageUri field value
func (o *LocalThumbnailSpec) GetImageUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageUri
}

// GetImageUriOk returns a tuple with the ImageUri field value
// and a boolean to check if the value has been set.
func (o *LocalThumbnailSpec) GetImageUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageUri, true
}

// SetImageUri sets field value
func (o *LocalThumbnailSpec) SetImageUri(v string) {
	o.ImageUri = v
}

// GetSize returns the Size field value
func (o *LocalThumbnailSpec) GetSize() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *LocalThumbnailSpec) GetSizeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *LocalThumbnailSpec) SetSize(v string) {
	o.Size = v
}

// GetThumbSignature returns the ThumbSignature field value
func (o *LocalThumbnailSpec) GetThumbSignature() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ThumbSignature
}

// GetThumbSignatureOk returns a tuple with the ThumbSignature field value
// and a boolean to check if the value has been set.
func (o *LocalThumbnailSpec) GetThumbSignatureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ThumbSignature, true
}

// SetThumbSignature sets field value
func (o *LocalThumbnailSpec) SetThumbSignature(v string) {
	o.ThumbSignature = v
}

// GetThumbnailUri returns the ThumbnailUri field value
func (o *LocalThumbnailSpec) GetThumbnailUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ThumbnailUri
}

// GetThumbnailUriOk returns a tuple with the ThumbnailUri field value
// and a boolean to check if the value has been set.
func (o *LocalThumbnailSpec) GetThumbnailUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ThumbnailUri, true
}

// SetThumbnailUri sets field value
func (o *LocalThumbnailSpec) SetThumbnailUri(v string) {
	o.ThumbnailUri = v
}

func (o LocalThumbnailSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocalThumbnailSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["filePath"] = o.FilePath
	toSerialize["imageSignature"] = o.ImageSignature
	toSerialize["imageUri"] = o.ImageUri
	toSerialize["size"] = o.Size
	toSerialize["thumbSignature"] = o.ThumbSignature
	toSerialize["thumbnailUri"] = o.ThumbnailUri
	return toSerialize, nil
}

func (o *LocalThumbnailSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"filePath",
		"imageSignature",
		"imageUri",
		"size",
		"thumbSignature",
		"thumbnailUri",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLocalThumbnailSpec := _LocalThumbnailSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLocalThumbnailSpec)

	if err != nil {
		return err
	}

	*o = LocalThumbnailSpec(varLocalThumbnailSpec)

	return err
}

type NullableLocalThumbnailSpec struct {
	value *LocalThumbnailSpec
	isSet bool
}

func (v NullableLocalThumbnailSpec) Get() *LocalThumbnailSpec {
	return v.value
}

func (v *NullableLocalThumbnailSpec) Set(val *LocalThumbnailSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableLocalThumbnailSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableLocalThumbnailSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocalThumbnailSpec(val *LocalThumbnailSpec) *NullableLocalThumbnailSpec {
	return &NullableLocalThumbnailSpec{value: val, isSet: true}
}

func (v NullableLocalThumbnailSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocalThumbnailSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


