/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type SearchEngineV1alpha1API interface {

	/*
	CreateSearchEngine Method for CreateSearchEngine

	Create SearchEngine

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateSearchEngineRequest
	*/
	CreateSearchEngine(ctx context.Context) ApiCreateSearchEngineRequest

	// CreateSearchEngineExecute executes the request
	//  @return SearchEngine
	CreateSearchEngineExecute(r ApiCreateSearchEngineRequest) (*SearchEngine, *http.Response, error)

	/*
	DeleteSearchEngine Method for DeleteSearchEngine

	Delete SearchEngine

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of searchengine
	@return ApiDeleteSearchEngineRequest
	*/
	DeleteSearchEngine(ctx context.Context, name string) ApiDeleteSearchEngineRequest

	// DeleteSearchEngineExecute executes the request
	DeleteSearchEngineExecute(r ApiDeleteSearchEngineRequest) (*http.Response, error)

	/*
	GetSearchEngine Method for GetSearchEngine

	Get SearchEngine

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of searchengine
	@return ApiGetSearchEngineRequest
	*/
	GetSearchEngine(ctx context.Context, name string) ApiGetSearchEngineRequest

	// GetSearchEngineExecute executes the request
	//  @return SearchEngine
	GetSearchEngineExecute(r ApiGetSearchEngineRequest) (*SearchEngine, *http.Response, error)

	/*
	ListSearchEngine Method for ListSearchEngine

	List SearchEngine

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListSearchEngineRequest
	*/
	ListSearchEngine(ctx context.Context) ApiListSearchEngineRequest

	// ListSearchEngineExecute executes the request
	//  @return SearchEngineList
	ListSearchEngineExecute(r ApiListSearchEngineRequest) (*SearchEngineList, *http.Response, error)

	/*
	PatchSearchEngine Method for PatchSearchEngine

	Patch SearchEngine

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of searchengine
	@return ApiPatchSearchEngineRequest
	*/
	PatchSearchEngine(ctx context.Context, name string) ApiPatchSearchEngineRequest

	// PatchSearchEngineExecute executes the request
	//  @return SearchEngine
	PatchSearchEngineExecute(r ApiPatchSearchEngineRequest) (*SearchEngine, *http.Response, error)

	/*
	UpdateSearchEngine Method for UpdateSearchEngine

	Update SearchEngine

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of searchengine
	@return ApiUpdateSearchEngineRequest
	*/
	UpdateSearchEngine(ctx context.Context, name string) ApiUpdateSearchEngineRequest

	// UpdateSearchEngineExecute executes the request
	//  @return SearchEngine
	UpdateSearchEngineExecute(r ApiUpdateSearchEngineRequest) (*SearchEngine, *http.Response, error)
}

// SearchEngineV1alpha1APIService SearchEngineV1alpha1API service
type SearchEngineV1alpha1APIService service

type ApiCreateSearchEngineRequest struct {
	ctx context.Context
	ApiService SearchEngineV1alpha1API
	searchEngine *SearchEngine
}

// Fresh searchengine
func (r ApiCreateSearchEngineRequest) SearchEngine(searchEngine SearchEngine) ApiCreateSearchEngineRequest {
	r.searchEngine = &searchEngine
	return r
}

func (r ApiCreateSearchEngineRequest) Execute() (*SearchEngine, *http.Response, error) {
	return r.ApiService.CreateSearchEngineExecute(r)
}

/*
CreateSearchEngine Method for CreateSearchEngine

Create SearchEngine

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateSearchEngineRequest
*/
func (a *SearchEngineV1alpha1APIService) CreateSearchEngine(ctx context.Context) ApiCreateSearchEngineRequest {
	return ApiCreateSearchEngineRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchEngine
func (a *SearchEngineV1alpha1APIService) CreateSearchEngineExecute(r ApiCreateSearchEngineRequest) (*SearchEngine, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchEngine
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchEngineV1alpha1APIService.CreateSearchEngine")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/plugin.halo.run/v1alpha1/searchengines"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.searchEngine
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteSearchEngineRequest struct {
	ctx context.Context
	ApiService SearchEngineV1alpha1API
	name string
}

func (r ApiDeleteSearchEngineRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSearchEngineExecute(r)
}

/*
DeleteSearchEngine Method for DeleteSearchEngine

Delete SearchEngine

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of searchengine
 @return ApiDeleteSearchEngineRequest
*/
func (a *SearchEngineV1alpha1APIService) DeleteSearchEngine(ctx context.Context, name string) ApiDeleteSearchEngineRequest {
	return ApiDeleteSearchEngineRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
func (a *SearchEngineV1alpha1APIService) DeleteSearchEngineExecute(r ApiDeleteSearchEngineRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchEngineV1alpha1APIService.DeleteSearchEngine")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/plugin.halo.run/v1alpha1/searchengines/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSearchEngineRequest struct {
	ctx context.Context
	ApiService SearchEngineV1alpha1API
	name string
}

func (r ApiGetSearchEngineRequest) Execute() (*SearchEngine, *http.Response, error) {
	return r.ApiService.GetSearchEngineExecute(r)
}

/*
GetSearchEngine Method for GetSearchEngine

Get SearchEngine

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of searchengine
 @return ApiGetSearchEngineRequest
*/
func (a *SearchEngineV1alpha1APIService) GetSearchEngine(ctx context.Context, name string) ApiGetSearchEngineRequest {
	return ApiGetSearchEngineRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return SearchEngine
func (a *SearchEngineV1alpha1APIService) GetSearchEngineExecute(r ApiGetSearchEngineRequest) (*SearchEngine, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchEngine
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchEngineV1alpha1APIService.GetSearchEngine")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/plugin.halo.run/v1alpha1/searchengines/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListSearchEngineRequest struct {
	ctx context.Context
	ApiService SearchEngineV1alpha1API
	page *int32
	size *int32
	labelSelector *[]string
	fieldSelector *[]string
	sort *[]string
}

// Page number. Default is 0.
func (r ApiListSearchEngineRequest) Page(page int32) ApiListSearchEngineRequest {
	r.page = &page
	return r
}

// Size number. Default is 0.
func (r ApiListSearchEngineRequest) Size(size int32) ApiListSearchEngineRequest {
	r.size = &size
	return r
}

// Label selector. e.g.: hidden!&#x3D;true
func (r ApiListSearchEngineRequest) LabelSelector(labelSelector []string) ApiListSearchEngineRequest {
	r.labelSelector = &labelSelector
	return r
}

// Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
func (r ApiListSearchEngineRequest) FieldSelector(fieldSelector []string) ApiListSearchEngineRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListSearchEngineRequest) Sort(sort []string) ApiListSearchEngineRequest {
	r.sort = &sort
	return r
}

func (r ApiListSearchEngineRequest) Execute() (*SearchEngineList, *http.Response, error) {
	return r.ApiService.ListSearchEngineExecute(r)
}

/*
ListSearchEngine Method for ListSearchEngine

List SearchEngine

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListSearchEngineRequest
*/
func (a *SearchEngineV1alpha1APIService) ListSearchEngine(ctx context.Context) ApiListSearchEngineRequest {
	return ApiListSearchEngineRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchEngineList
func (a *SearchEngineV1alpha1APIService) ListSearchEngineExecute(r ApiListSearchEngineRequest) (*SearchEngineList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchEngineList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchEngineV1alpha1APIService.ListSearchEngine")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/plugin.halo.run/v1alpha1/searchengines"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.labelSelector != nil {
		t := *r.labelSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", t, "form", "multi")
		}
	}
	if r.fieldSelector != nil {
		t := *r.fieldSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", t, "form", "multi")
		}
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSearchEngineRequest struct {
	ctx context.Context
	ApiService SearchEngineV1alpha1API
	name string
	jsonPatchInner *[]JsonPatchInner
}

func (r ApiPatchSearchEngineRequest) JsonPatchInner(jsonPatchInner []JsonPatchInner) ApiPatchSearchEngineRequest {
	r.jsonPatchInner = &jsonPatchInner
	return r
}

func (r ApiPatchSearchEngineRequest) Execute() (*SearchEngine, *http.Response, error) {
	return r.ApiService.PatchSearchEngineExecute(r)
}

/*
PatchSearchEngine Method for PatchSearchEngine

Patch SearchEngine

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of searchengine
 @return ApiPatchSearchEngineRequest
*/
func (a *SearchEngineV1alpha1APIService) PatchSearchEngine(ctx context.Context, name string) ApiPatchSearchEngineRequest {
	return ApiPatchSearchEngineRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return SearchEngine
func (a *SearchEngineV1alpha1APIService) PatchSearchEngineExecute(r ApiPatchSearchEngineRequest) (*SearchEngine, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchEngine
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchEngineV1alpha1APIService.PatchSearchEngine")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/plugin.halo.run/v1alpha1/searchengines/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jsonPatchInner
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateSearchEngineRequest struct {
	ctx context.Context
	ApiService SearchEngineV1alpha1API
	name string
	searchEngine *SearchEngine
}

// Updated searchengine
func (r ApiUpdateSearchEngineRequest) SearchEngine(searchEngine SearchEngine) ApiUpdateSearchEngineRequest {
	r.searchEngine = &searchEngine
	return r
}

func (r ApiUpdateSearchEngineRequest) Execute() (*SearchEngine, *http.Response, error) {
	return r.ApiService.UpdateSearchEngineExecute(r)
}

/*
UpdateSearchEngine Method for UpdateSearchEngine

Update SearchEngine

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of searchengine
 @return ApiUpdateSearchEngineRequest
*/
func (a *SearchEngineV1alpha1APIService) UpdateSearchEngine(ctx context.Context, name string) ApiUpdateSearchEngineRequest {
	return ApiUpdateSearchEngineRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return SearchEngine
func (a *SearchEngineV1alpha1APIService) UpdateSearchEngineExecute(r ApiUpdateSearchEngineRequest) (*SearchEngine, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchEngine
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchEngineV1alpha1APIService.UpdateSearchEngine")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/plugin.halo.run/v1alpha1/searchengines/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.searchEngine
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
