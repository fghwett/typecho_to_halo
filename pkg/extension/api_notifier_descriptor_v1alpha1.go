/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type NotifierDescriptorV1alpha1API interface {

	/*
	CreateNotifierDescriptor Method for CreateNotifierDescriptor

	Create NotifierDescriptor

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateNotifierDescriptorRequest
	*/
	CreateNotifierDescriptor(ctx context.Context) ApiCreateNotifierDescriptorRequest

	// CreateNotifierDescriptorExecute executes the request
	//  @return NotifierDescriptor
	CreateNotifierDescriptorExecute(r ApiCreateNotifierDescriptorRequest) (*NotifierDescriptor, *http.Response, error)

	/*
	DeleteNotifierDescriptor Method for DeleteNotifierDescriptor

	Delete NotifierDescriptor

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of notifierDescriptor
	@return ApiDeleteNotifierDescriptorRequest
	*/
	DeleteNotifierDescriptor(ctx context.Context, name string) ApiDeleteNotifierDescriptorRequest

	// DeleteNotifierDescriptorExecute executes the request
	DeleteNotifierDescriptorExecute(r ApiDeleteNotifierDescriptorRequest) (*http.Response, error)

	/*
	GetNotifierDescriptor Method for GetNotifierDescriptor

	Get NotifierDescriptor

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of notifierDescriptor
	@return ApiGetNotifierDescriptorRequest
	*/
	GetNotifierDescriptor(ctx context.Context, name string) ApiGetNotifierDescriptorRequest

	// GetNotifierDescriptorExecute executes the request
	//  @return NotifierDescriptor
	GetNotifierDescriptorExecute(r ApiGetNotifierDescriptorRequest) (*NotifierDescriptor, *http.Response, error)

	/*
	ListNotifierDescriptor Method for ListNotifierDescriptor

	List NotifierDescriptor

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListNotifierDescriptorRequest
	*/
	ListNotifierDescriptor(ctx context.Context) ApiListNotifierDescriptorRequest

	// ListNotifierDescriptorExecute executes the request
	//  @return NotifierDescriptorList
	ListNotifierDescriptorExecute(r ApiListNotifierDescriptorRequest) (*NotifierDescriptorList, *http.Response, error)

	/*
	PatchNotifierDescriptor Method for PatchNotifierDescriptor

	Patch NotifierDescriptor

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of notifierDescriptor
	@return ApiPatchNotifierDescriptorRequest
	*/
	PatchNotifierDescriptor(ctx context.Context, name string) ApiPatchNotifierDescriptorRequest

	// PatchNotifierDescriptorExecute executes the request
	//  @return NotifierDescriptor
	PatchNotifierDescriptorExecute(r ApiPatchNotifierDescriptorRequest) (*NotifierDescriptor, *http.Response, error)

	/*
	UpdateNotifierDescriptor Method for UpdateNotifierDescriptor

	Update NotifierDescriptor

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of notifierDescriptor
	@return ApiUpdateNotifierDescriptorRequest
	*/
	UpdateNotifierDescriptor(ctx context.Context, name string) ApiUpdateNotifierDescriptorRequest

	// UpdateNotifierDescriptorExecute executes the request
	//  @return NotifierDescriptor
	UpdateNotifierDescriptorExecute(r ApiUpdateNotifierDescriptorRequest) (*NotifierDescriptor, *http.Response, error)
}

// NotifierDescriptorV1alpha1APIService NotifierDescriptorV1alpha1API service
type NotifierDescriptorV1alpha1APIService service

type ApiCreateNotifierDescriptorRequest struct {
	ctx context.Context
	ApiService NotifierDescriptorV1alpha1API
	notifierDescriptor *NotifierDescriptor
}

// Fresh notifierDescriptor
func (r ApiCreateNotifierDescriptorRequest) NotifierDescriptor(notifierDescriptor NotifierDescriptor) ApiCreateNotifierDescriptorRequest {
	r.notifierDescriptor = &notifierDescriptor
	return r
}

func (r ApiCreateNotifierDescriptorRequest) Execute() (*NotifierDescriptor, *http.Response, error) {
	return r.ApiService.CreateNotifierDescriptorExecute(r)
}

/*
CreateNotifierDescriptor Method for CreateNotifierDescriptor

Create NotifierDescriptor

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateNotifierDescriptorRequest
*/
func (a *NotifierDescriptorV1alpha1APIService) CreateNotifierDescriptor(ctx context.Context) ApiCreateNotifierDescriptorRequest {
	return ApiCreateNotifierDescriptorRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return NotifierDescriptor
func (a *NotifierDescriptorV1alpha1APIService) CreateNotifierDescriptorExecute(r ApiCreateNotifierDescriptorRequest) (*NotifierDescriptor, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NotifierDescriptor
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotifierDescriptorV1alpha1APIService.CreateNotifierDescriptor")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/notification.halo.run/v1alpha1/notifierDescriptors"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.notifierDescriptor
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteNotifierDescriptorRequest struct {
	ctx context.Context
	ApiService NotifierDescriptorV1alpha1API
	name string
}

func (r ApiDeleteNotifierDescriptorRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteNotifierDescriptorExecute(r)
}

/*
DeleteNotifierDescriptor Method for DeleteNotifierDescriptor

Delete NotifierDescriptor

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of notifierDescriptor
 @return ApiDeleteNotifierDescriptorRequest
*/
func (a *NotifierDescriptorV1alpha1APIService) DeleteNotifierDescriptor(ctx context.Context, name string) ApiDeleteNotifierDescriptorRequest {
	return ApiDeleteNotifierDescriptorRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
func (a *NotifierDescriptorV1alpha1APIService) DeleteNotifierDescriptorExecute(r ApiDeleteNotifierDescriptorRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotifierDescriptorV1alpha1APIService.DeleteNotifierDescriptor")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/notification.halo.run/v1alpha1/notifierDescriptors/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetNotifierDescriptorRequest struct {
	ctx context.Context
	ApiService NotifierDescriptorV1alpha1API
	name string
}

func (r ApiGetNotifierDescriptorRequest) Execute() (*NotifierDescriptor, *http.Response, error) {
	return r.ApiService.GetNotifierDescriptorExecute(r)
}

/*
GetNotifierDescriptor Method for GetNotifierDescriptor

Get NotifierDescriptor

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of notifierDescriptor
 @return ApiGetNotifierDescriptorRequest
*/
func (a *NotifierDescriptorV1alpha1APIService) GetNotifierDescriptor(ctx context.Context, name string) ApiGetNotifierDescriptorRequest {
	return ApiGetNotifierDescriptorRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return NotifierDescriptor
func (a *NotifierDescriptorV1alpha1APIService) GetNotifierDescriptorExecute(r ApiGetNotifierDescriptorRequest) (*NotifierDescriptor, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NotifierDescriptor
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotifierDescriptorV1alpha1APIService.GetNotifierDescriptor")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/notification.halo.run/v1alpha1/notifierDescriptors/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListNotifierDescriptorRequest struct {
	ctx context.Context
	ApiService NotifierDescriptorV1alpha1API
	page *int32
	size *int32
	labelSelector *[]string
	fieldSelector *[]string
	sort *[]string
}

// Page number. Default is 0.
func (r ApiListNotifierDescriptorRequest) Page(page int32) ApiListNotifierDescriptorRequest {
	r.page = &page
	return r
}

// Size number. Default is 0.
func (r ApiListNotifierDescriptorRequest) Size(size int32) ApiListNotifierDescriptorRequest {
	r.size = &size
	return r
}

// Label selector. e.g.: hidden!&#x3D;true
func (r ApiListNotifierDescriptorRequest) LabelSelector(labelSelector []string) ApiListNotifierDescriptorRequest {
	r.labelSelector = &labelSelector
	return r
}

// Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
func (r ApiListNotifierDescriptorRequest) FieldSelector(fieldSelector []string) ApiListNotifierDescriptorRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListNotifierDescriptorRequest) Sort(sort []string) ApiListNotifierDescriptorRequest {
	r.sort = &sort
	return r
}

func (r ApiListNotifierDescriptorRequest) Execute() (*NotifierDescriptorList, *http.Response, error) {
	return r.ApiService.ListNotifierDescriptorExecute(r)
}

/*
ListNotifierDescriptor Method for ListNotifierDescriptor

List NotifierDescriptor

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListNotifierDescriptorRequest
*/
func (a *NotifierDescriptorV1alpha1APIService) ListNotifierDescriptor(ctx context.Context) ApiListNotifierDescriptorRequest {
	return ApiListNotifierDescriptorRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return NotifierDescriptorList
func (a *NotifierDescriptorV1alpha1APIService) ListNotifierDescriptorExecute(r ApiListNotifierDescriptorRequest) (*NotifierDescriptorList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NotifierDescriptorList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotifierDescriptorV1alpha1APIService.ListNotifierDescriptor")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/notification.halo.run/v1alpha1/notifierDescriptors"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.labelSelector != nil {
		t := *r.labelSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", t, "form", "multi")
		}
	}
	if r.fieldSelector != nil {
		t := *r.fieldSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", t, "form", "multi")
		}
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchNotifierDescriptorRequest struct {
	ctx context.Context
	ApiService NotifierDescriptorV1alpha1API
	name string
	jsonPatchInner *[]JsonPatchInner
}

func (r ApiPatchNotifierDescriptorRequest) JsonPatchInner(jsonPatchInner []JsonPatchInner) ApiPatchNotifierDescriptorRequest {
	r.jsonPatchInner = &jsonPatchInner
	return r
}

func (r ApiPatchNotifierDescriptorRequest) Execute() (*NotifierDescriptor, *http.Response, error) {
	return r.ApiService.PatchNotifierDescriptorExecute(r)
}

/*
PatchNotifierDescriptor Method for PatchNotifierDescriptor

Patch NotifierDescriptor

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of notifierDescriptor
 @return ApiPatchNotifierDescriptorRequest
*/
func (a *NotifierDescriptorV1alpha1APIService) PatchNotifierDescriptor(ctx context.Context, name string) ApiPatchNotifierDescriptorRequest {
	return ApiPatchNotifierDescriptorRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return NotifierDescriptor
func (a *NotifierDescriptorV1alpha1APIService) PatchNotifierDescriptorExecute(r ApiPatchNotifierDescriptorRequest) (*NotifierDescriptor, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NotifierDescriptor
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotifierDescriptorV1alpha1APIService.PatchNotifierDescriptor")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/notification.halo.run/v1alpha1/notifierDescriptors/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jsonPatchInner
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateNotifierDescriptorRequest struct {
	ctx context.Context
	ApiService NotifierDescriptorV1alpha1API
	name string
	notifierDescriptor *NotifierDescriptor
}

// Updated notifierDescriptor
func (r ApiUpdateNotifierDescriptorRequest) NotifierDescriptor(notifierDescriptor NotifierDescriptor) ApiUpdateNotifierDescriptorRequest {
	r.notifierDescriptor = &notifierDescriptor
	return r
}

func (r ApiUpdateNotifierDescriptorRequest) Execute() (*NotifierDescriptor, *http.Response, error) {
	return r.ApiService.UpdateNotifierDescriptorExecute(r)
}

/*
UpdateNotifierDescriptor Method for UpdateNotifierDescriptor

Update NotifierDescriptor

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of notifierDescriptor
 @return ApiUpdateNotifierDescriptorRequest
*/
func (a *NotifierDescriptorV1alpha1APIService) UpdateNotifierDescriptor(ctx context.Context, name string) ApiUpdateNotifierDescriptorRequest {
	return ApiUpdateNotifierDescriptorRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return NotifierDescriptor
func (a *NotifierDescriptorV1alpha1APIService) UpdateNotifierDescriptorExecute(r ApiUpdateNotifierDescriptorRequest) (*NotifierDescriptor, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NotifierDescriptor
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotifierDescriptorV1alpha1APIService.UpdateNotifierDescriptor")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/notification.halo.run/v1alpha1/notifierDescriptors/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.notifierDescriptor
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
