/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReasonTypeSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReasonTypeSpec{}

// ReasonTypeSpec struct for ReasonTypeSpec
type ReasonTypeSpec struct {
	Description string `json:"description"`
	DisplayName string `json:"displayName"`
	Properties []ReasonProperty `json:"properties,omitempty"`
}

type _ReasonTypeSpec ReasonTypeSpec

// NewReasonTypeSpec instantiates a new ReasonTypeSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReasonTypeSpec(description string, displayName string) *ReasonTypeSpec {
	this := ReasonTypeSpec{}
	this.Description = description
	this.DisplayName = displayName
	return &this
}

// NewReasonTypeSpecWithDefaults instantiates a new ReasonTypeSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReasonTypeSpecWithDefaults() *ReasonTypeSpec {
	this := ReasonTypeSpec{}
	return &this
}

// GetDescription returns the Description field value
func (o *ReasonTypeSpec) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *ReasonTypeSpec) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *ReasonTypeSpec) SetDescription(v string) {
	o.Description = v
}

// GetDisplayName returns the DisplayName field value
func (o *ReasonTypeSpec) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *ReasonTypeSpec) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *ReasonTypeSpec) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *ReasonTypeSpec) GetProperties() []ReasonProperty {
	if o == nil || IsNil(o.Properties) {
		var ret []ReasonProperty
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReasonTypeSpec) GetPropertiesOk() ([]ReasonProperty, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *ReasonTypeSpec) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given []ReasonProperty and assigns it to the Properties field.
func (o *ReasonTypeSpec) SetProperties(v []ReasonProperty) {
	o.Properties = v
}

func (o ReasonTypeSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReasonTypeSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["description"] = o.Description
	toSerialize["displayName"] = o.DisplayName
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	return toSerialize, nil
}

func (o *ReasonTypeSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
		"displayName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReasonTypeSpec := _ReasonTypeSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReasonTypeSpec)

	if err != nil {
		return err
	}

	*o = ReasonTypeSpec(varReasonTypeSpec)

	return err
}

type NullableReasonTypeSpec struct {
	value *ReasonTypeSpec
	isSet bool
}

func (v NullableReasonTypeSpec) Get() *ReasonTypeSpec {
	return v.value
}

func (v *NullableReasonTypeSpec) Set(val *ReasonTypeSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableReasonTypeSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableReasonTypeSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReasonTypeSpec(val *ReasonTypeSpec) *NullableReasonTypeSpec {
	return &NullableReasonTypeSpec{value: val, isSet: true}
}

func (v NullableReasonTypeSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReasonTypeSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


