/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"encoding/json"
	"time"
)

// checks if the BackupStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackupStatus{}

// BackupStatus struct for BackupStatus
type BackupStatus struct {
	CompletionTimestamp *time.Time `json:"completionTimestamp,omitempty"`
	FailureMessage *string `json:"failureMessage,omitempty"`
	FailureReason *string `json:"failureReason,omitempty"`
	Filename *string `json:"filename,omitempty"`
	Phase *string `json:"phase,omitempty"`
	Size *int64 `json:"size,omitempty"`
	StartTimestamp *time.Time `json:"startTimestamp,omitempty"`
}

// NewBackupStatus instantiates a new BackupStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupStatus() *BackupStatus {
	this := BackupStatus{}
	return &this
}

// NewBackupStatusWithDefaults instantiates a new BackupStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupStatusWithDefaults() *BackupStatus {
	this := BackupStatus{}
	return &this
}

// GetCompletionTimestamp returns the CompletionTimestamp field value if set, zero value otherwise.
func (o *BackupStatus) GetCompletionTimestamp() time.Time {
	if o == nil || IsNil(o.CompletionTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.CompletionTimestamp
}

// GetCompletionTimestampOk returns a tuple with the CompletionTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStatus) GetCompletionTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CompletionTimestamp) {
		return nil, false
	}
	return o.CompletionTimestamp, true
}

// HasCompletionTimestamp returns a boolean if a field has been set.
func (o *BackupStatus) HasCompletionTimestamp() bool {
	if o != nil && !IsNil(o.CompletionTimestamp) {
		return true
	}

	return false
}

// SetCompletionTimestamp gets a reference to the given time.Time and assigns it to the CompletionTimestamp field.
func (o *BackupStatus) SetCompletionTimestamp(v time.Time) {
	o.CompletionTimestamp = &v
}

// GetFailureMessage returns the FailureMessage field value if set, zero value otherwise.
func (o *BackupStatus) GetFailureMessage() string {
	if o == nil || IsNil(o.FailureMessage) {
		var ret string
		return ret
	}
	return *o.FailureMessage
}

// GetFailureMessageOk returns a tuple with the FailureMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStatus) GetFailureMessageOk() (*string, bool) {
	if o == nil || IsNil(o.FailureMessage) {
		return nil, false
	}
	return o.FailureMessage, true
}

// HasFailureMessage returns a boolean if a field has been set.
func (o *BackupStatus) HasFailureMessage() bool {
	if o != nil && !IsNil(o.FailureMessage) {
		return true
	}

	return false
}

// SetFailureMessage gets a reference to the given string and assigns it to the FailureMessage field.
func (o *BackupStatus) SetFailureMessage(v string) {
	o.FailureMessage = &v
}

// GetFailureReason returns the FailureReason field value if set, zero value otherwise.
func (o *BackupStatus) GetFailureReason() string {
	if o == nil || IsNil(o.FailureReason) {
		var ret string
		return ret
	}
	return *o.FailureReason
}

// GetFailureReasonOk returns a tuple with the FailureReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStatus) GetFailureReasonOk() (*string, bool) {
	if o == nil || IsNil(o.FailureReason) {
		return nil, false
	}
	return o.FailureReason, true
}

// HasFailureReason returns a boolean if a field has been set.
func (o *BackupStatus) HasFailureReason() bool {
	if o != nil && !IsNil(o.FailureReason) {
		return true
	}

	return false
}

// SetFailureReason gets a reference to the given string and assigns it to the FailureReason field.
func (o *BackupStatus) SetFailureReason(v string) {
	o.FailureReason = &v
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *BackupStatus) GetFilename() string {
	if o == nil || IsNil(o.Filename) {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStatus) GetFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.Filename) {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *BackupStatus) HasFilename() bool {
	if o != nil && !IsNil(o.Filename) {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *BackupStatus) SetFilename(v string) {
	o.Filename = &v
}

// GetPhase returns the Phase field value if set, zero value otherwise.
func (o *BackupStatus) GetPhase() string {
	if o == nil || IsNil(o.Phase) {
		var ret string
		return ret
	}
	return *o.Phase
}

// GetPhaseOk returns a tuple with the Phase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStatus) GetPhaseOk() (*string, bool) {
	if o == nil || IsNil(o.Phase) {
		return nil, false
	}
	return o.Phase, true
}

// HasPhase returns a boolean if a field has been set.
func (o *BackupStatus) HasPhase() bool {
	if o != nil && !IsNil(o.Phase) {
		return true
	}

	return false
}

// SetPhase gets a reference to the given string and assigns it to the Phase field.
func (o *BackupStatus) SetPhase(v string) {
	o.Phase = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *BackupStatus) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStatus) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *BackupStatus) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *BackupStatus) SetSize(v int64) {
	o.Size = &v
}

// GetStartTimestamp returns the StartTimestamp field value if set, zero value otherwise.
func (o *BackupStatus) GetStartTimestamp() time.Time {
	if o == nil || IsNil(o.StartTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.StartTimestamp
}

// GetStartTimestampOk returns a tuple with the StartTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStatus) GetStartTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartTimestamp) {
		return nil, false
	}
	return o.StartTimestamp, true
}

// HasStartTimestamp returns a boolean if a field has been set.
func (o *BackupStatus) HasStartTimestamp() bool {
	if o != nil && !IsNil(o.StartTimestamp) {
		return true
	}

	return false
}

// SetStartTimestamp gets a reference to the given time.Time and assigns it to the StartTimestamp field.
func (o *BackupStatus) SetStartTimestamp(v time.Time) {
	o.StartTimestamp = &v
}

func (o BackupStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackupStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CompletionTimestamp) {
		toSerialize["completionTimestamp"] = o.CompletionTimestamp
	}
	if !IsNil(o.FailureMessage) {
		toSerialize["failureMessage"] = o.FailureMessage
	}
	if !IsNil(o.FailureReason) {
		toSerialize["failureReason"] = o.FailureReason
	}
	if !IsNil(o.Filename) {
		toSerialize["filename"] = o.Filename
	}
	if !IsNil(o.Phase) {
		toSerialize["phase"] = o.Phase
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.StartTimestamp) {
		toSerialize["startTimestamp"] = o.StartTimestamp
	}
	return toSerialize, nil
}

type NullableBackupStatus struct {
	value *BackupStatus
	isSet bool
}

func (v NullableBackupStatus) Get() *BackupStatus {
	return v.value
}

func (v *NullableBackupStatus) Set(val *BackupStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupStatus(val *BackupStatus) *NullableBackupStatus {
	return &NullableBackupStatus{value: val, isSet: true}
}

func (v NullableBackupStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


