/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TemplateContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TemplateContent{}

// TemplateContent struct for TemplateContent
type TemplateContent struct {
	HtmlBody *string `json:"htmlBody,omitempty"`
	RawBody *string `json:"rawBody,omitempty"`
	Title string `json:"title"`
}

type _TemplateContent TemplateContent

// NewTemplateContent instantiates a new TemplateContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateContent(title string) *TemplateContent {
	this := TemplateContent{}
	this.Title = title
	return &this
}

// NewTemplateContentWithDefaults instantiates a new TemplateContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateContentWithDefaults() *TemplateContent {
	this := TemplateContent{}
	return &this
}

// GetHtmlBody returns the HtmlBody field value if set, zero value otherwise.
func (o *TemplateContent) GetHtmlBody() string {
	if o == nil || IsNil(o.HtmlBody) {
		var ret string
		return ret
	}
	return *o.HtmlBody
}

// GetHtmlBodyOk returns a tuple with the HtmlBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateContent) GetHtmlBodyOk() (*string, bool) {
	if o == nil || IsNil(o.HtmlBody) {
		return nil, false
	}
	return o.HtmlBody, true
}

// HasHtmlBody returns a boolean if a field has been set.
func (o *TemplateContent) HasHtmlBody() bool {
	if o != nil && !IsNil(o.HtmlBody) {
		return true
	}

	return false
}

// SetHtmlBody gets a reference to the given string and assigns it to the HtmlBody field.
func (o *TemplateContent) SetHtmlBody(v string) {
	o.HtmlBody = &v
}

// GetRawBody returns the RawBody field value if set, zero value otherwise.
func (o *TemplateContent) GetRawBody() string {
	if o == nil || IsNil(o.RawBody) {
		var ret string
		return ret
	}
	return *o.RawBody
}

// GetRawBodyOk returns a tuple with the RawBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateContent) GetRawBodyOk() (*string, bool) {
	if o == nil || IsNil(o.RawBody) {
		return nil, false
	}
	return o.RawBody, true
}

// HasRawBody returns a boolean if a field has been set.
func (o *TemplateContent) HasRawBody() bool {
	if o != nil && !IsNil(o.RawBody) {
		return true
	}

	return false
}

// SetRawBody gets a reference to the given string and assigns it to the RawBody field.
func (o *TemplateContent) SetRawBody(v string) {
	o.RawBody = &v
}

// GetTitle returns the Title field value
func (o *TemplateContent) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *TemplateContent) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *TemplateContent) SetTitle(v string) {
	o.Title = v
}

func (o TemplateContent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TemplateContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HtmlBody) {
		toSerialize["htmlBody"] = o.HtmlBody
	}
	if !IsNil(o.RawBody) {
		toSerialize["rawBody"] = o.RawBody
	}
	toSerialize["title"] = o.Title
	return toSerialize, nil
}

func (o *TemplateContent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"title",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTemplateContent := _TemplateContent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTemplateContent)

	if err != nil {
		return err
	}

	*o = TemplateContent(varTemplateContent)

	return err
}

type NullableTemplateContent struct {
	value *TemplateContent
	isSet bool
}

func (v NullableTemplateContent) Get() *TemplateContent {
	return v.value
}

func (v *NullableTemplateContent) Set(val *TemplateContent) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateContent) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateContent(val *TemplateContent) *NullableTemplateContent {
	return &NullableTemplateContent{value: val, isSet: true}
}

func (v NullableTemplateContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


