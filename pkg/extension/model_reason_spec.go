/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReasonSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReasonSpec{}

// ReasonSpec struct for ReasonSpec
type ReasonSpec struct {
	Attributes *ReasonAttributes `json:"attributes,omitempty"`
	Author string `json:"author"`
	ReasonType string `json:"reasonType"`
	Subject ReasonSubject `json:"subject"`
}

type _ReasonSpec ReasonSpec

// NewReasonSpec instantiates a new ReasonSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReasonSpec(author string, reasonType string, subject ReasonSubject) *ReasonSpec {
	this := ReasonSpec{}
	this.Author = author
	this.ReasonType = reasonType
	this.Subject = subject
	return &this
}

// NewReasonSpecWithDefaults instantiates a new ReasonSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReasonSpecWithDefaults() *ReasonSpec {
	this := ReasonSpec{}
	return &this
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *ReasonSpec) GetAttributes() ReasonAttributes {
	if o == nil || IsNil(o.Attributes) {
		var ret ReasonAttributes
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReasonSpec) GetAttributesOk() (*ReasonAttributes, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *ReasonSpec) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given ReasonAttributes and assigns it to the Attributes field.
func (o *ReasonSpec) SetAttributes(v ReasonAttributes) {
	o.Attributes = &v
}

// GetAuthor returns the Author field value
func (o *ReasonSpec) GetAuthor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Author
}

// GetAuthorOk returns a tuple with the Author field value
// and a boolean to check if the value has been set.
func (o *ReasonSpec) GetAuthorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Author, true
}

// SetAuthor sets field value
func (o *ReasonSpec) SetAuthor(v string) {
	o.Author = v
}

// GetReasonType returns the ReasonType field value
func (o *ReasonSpec) GetReasonType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReasonType
}

// GetReasonTypeOk returns a tuple with the ReasonType field value
// and a boolean to check if the value has been set.
func (o *ReasonSpec) GetReasonTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReasonType, true
}

// SetReasonType sets field value
func (o *ReasonSpec) SetReasonType(v string) {
	o.ReasonType = v
}

// GetSubject returns the Subject field value
func (o *ReasonSpec) GetSubject() ReasonSubject {
	if o == nil {
		var ret ReasonSubject
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *ReasonSpec) GetSubjectOk() (*ReasonSubject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *ReasonSpec) SetSubject(v ReasonSubject) {
	o.Subject = v
}

func (o ReasonSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReasonSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	toSerialize["author"] = o.Author
	toSerialize["reasonType"] = o.ReasonType
	toSerialize["subject"] = o.Subject
	return toSerialize, nil
}

func (o *ReasonSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"author",
		"reasonType",
		"subject",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReasonSpec := _ReasonSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReasonSpec)

	if err != nil {
		return err
	}

	*o = ReasonSpec(varReasonSpec)

	return err
}

type NullableReasonSpec struct {
	value *ReasonSpec
	isSet bool
}

func (v NullableReasonSpec) Get() *ReasonSpec {
	return v.value
}

func (v *NullableReasonSpec) Set(val *ReasonSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableReasonSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableReasonSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReasonSpec(val *ReasonSpec) *NullableReasonSpec {
	return &NullableReasonSpec{value: val, isSet: true}
}

func (v NullableReasonSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReasonSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


