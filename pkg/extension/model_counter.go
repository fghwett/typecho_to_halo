/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Counter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Counter{}

// Counter struct for Counter
type Counter struct {
	ApiVersion string `json:"apiVersion"`
	ApprovedComment *int32 `json:"approvedComment,omitempty"`
	Downvote *int32 `json:"downvote,omitempty"`
	Kind string `json:"kind"`
	Metadata Metadata `json:"metadata"`
	TotalComment *int32 `json:"totalComment,omitempty"`
	Upvote *int32 `json:"upvote,omitempty"`
	Visit *int32 `json:"visit,omitempty"`
}

type _Counter Counter

// NewCounter instantiates a new Counter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCounter(apiVersion string, kind string, metadata Metadata) *Counter {
	this := Counter{}
	this.ApiVersion = apiVersion
	this.Kind = kind
	this.Metadata = metadata
	return &this
}

// NewCounterWithDefaults instantiates a new Counter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCounterWithDefaults() *Counter {
	this := Counter{}
	return &this
}

// GetApiVersion returns the ApiVersion field value
func (o *Counter) GetApiVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value
// and a boolean to check if the value has been set.
func (o *Counter) GetApiVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiVersion, true
}

// SetApiVersion sets field value
func (o *Counter) SetApiVersion(v string) {
	o.ApiVersion = v
}

// GetApprovedComment returns the ApprovedComment field value if set, zero value otherwise.
func (o *Counter) GetApprovedComment() int32 {
	if o == nil || IsNil(o.ApprovedComment) {
		var ret int32
		return ret
	}
	return *o.ApprovedComment
}

// GetApprovedCommentOk returns a tuple with the ApprovedComment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Counter) GetApprovedCommentOk() (*int32, bool) {
	if o == nil || IsNil(o.ApprovedComment) {
		return nil, false
	}
	return o.ApprovedComment, true
}

// HasApprovedComment returns a boolean if a field has been set.
func (o *Counter) HasApprovedComment() bool {
	if o != nil && !IsNil(o.ApprovedComment) {
		return true
	}

	return false
}

// SetApprovedComment gets a reference to the given int32 and assigns it to the ApprovedComment field.
func (o *Counter) SetApprovedComment(v int32) {
	o.ApprovedComment = &v
}

// GetDownvote returns the Downvote field value if set, zero value otherwise.
func (o *Counter) GetDownvote() int32 {
	if o == nil || IsNil(o.Downvote) {
		var ret int32
		return ret
	}
	return *o.Downvote
}

// GetDownvoteOk returns a tuple with the Downvote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Counter) GetDownvoteOk() (*int32, bool) {
	if o == nil || IsNil(o.Downvote) {
		return nil, false
	}
	return o.Downvote, true
}

// HasDownvote returns a boolean if a field has been set.
func (o *Counter) HasDownvote() bool {
	if o != nil && !IsNil(o.Downvote) {
		return true
	}

	return false
}

// SetDownvote gets a reference to the given int32 and assigns it to the Downvote field.
func (o *Counter) SetDownvote(v int32) {
	o.Downvote = &v
}

// GetKind returns the Kind field value
func (o *Counter) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *Counter) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *Counter) SetKind(v string) {
	o.Kind = v
}

// GetMetadata returns the Metadata field value
func (o *Counter) GetMetadata() Metadata {
	if o == nil {
		var ret Metadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *Counter) GetMetadataOk() (*Metadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *Counter) SetMetadata(v Metadata) {
	o.Metadata = v
}

// GetTotalComment returns the TotalComment field value if set, zero value otherwise.
func (o *Counter) GetTotalComment() int32 {
	if o == nil || IsNil(o.TotalComment) {
		var ret int32
		return ret
	}
	return *o.TotalComment
}

// GetTotalCommentOk returns a tuple with the TotalComment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Counter) GetTotalCommentOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalComment) {
		return nil, false
	}
	return o.TotalComment, true
}

// HasTotalComment returns a boolean if a field has been set.
func (o *Counter) HasTotalComment() bool {
	if o != nil && !IsNil(o.TotalComment) {
		return true
	}

	return false
}

// SetTotalComment gets a reference to the given int32 and assigns it to the TotalComment field.
func (o *Counter) SetTotalComment(v int32) {
	o.TotalComment = &v
}

// GetUpvote returns the Upvote field value if set, zero value otherwise.
func (o *Counter) GetUpvote() int32 {
	if o == nil || IsNil(o.Upvote) {
		var ret int32
		return ret
	}
	return *o.Upvote
}

// GetUpvoteOk returns a tuple with the Upvote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Counter) GetUpvoteOk() (*int32, bool) {
	if o == nil || IsNil(o.Upvote) {
		return nil, false
	}
	return o.Upvote, true
}

// HasUpvote returns a boolean if a field has been set.
func (o *Counter) HasUpvote() bool {
	if o != nil && !IsNil(o.Upvote) {
		return true
	}

	return false
}

// SetUpvote gets a reference to the given int32 and assigns it to the Upvote field.
func (o *Counter) SetUpvote(v int32) {
	o.Upvote = &v
}

// GetVisit returns the Visit field value if set, zero value otherwise.
func (o *Counter) GetVisit() int32 {
	if o == nil || IsNil(o.Visit) {
		var ret int32
		return ret
	}
	return *o.Visit
}

// GetVisitOk returns a tuple with the Visit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Counter) GetVisitOk() (*int32, bool) {
	if o == nil || IsNil(o.Visit) {
		return nil, false
	}
	return o.Visit, true
}

// HasVisit returns a boolean if a field has been set.
func (o *Counter) HasVisit() bool {
	if o != nil && !IsNil(o.Visit) {
		return true
	}

	return false
}

// SetVisit gets a reference to the given int32 and assigns it to the Visit field.
func (o *Counter) SetVisit(v int32) {
	o.Visit = &v
}

func (o Counter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Counter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["apiVersion"] = o.ApiVersion
	if !IsNil(o.ApprovedComment) {
		toSerialize["approvedComment"] = o.ApprovedComment
	}
	if !IsNil(o.Downvote) {
		toSerialize["downvote"] = o.Downvote
	}
	toSerialize["kind"] = o.Kind
	toSerialize["metadata"] = o.Metadata
	if !IsNil(o.TotalComment) {
		toSerialize["totalComment"] = o.TotalComment
	}
	if !IsNil(o.Upvote) {
		toSerialize["upvote"] = o.Upvote
	}
	if !IsNil(o.Visit) {
		toSerialize["visit"] = o.Visit
	}
	return toSerialize, nil
}

func (o *Counter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"apiVersion",
		"kind",
		"metadata",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCounter := _Counter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCounter)

	if err != nil {
		return err
	}

	*o = Counter(varCounter)

	return err
}

type NullableCounter struct {
	value *Counter
	isSet bool
}

func (v NullableCounter) Get() *Counter {
	return v.value
}

func (v *NullableCounter) Set(val *Counter) {
	v.value = val
	v.isSet = true
}

func (v NullableCounter) IsSet() bool {
	return v.isSet
}

func (v *NullableCounter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCounter(val *Counter) *NullableCounter {
	return &NullableCounter{value: val, isSet: true}
}

func (v NullableCounter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCounter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


