/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CategorySpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CategorySpec{}

// CategorySpec struct for CategorySpec
type CategorySpec struct {
	Children []string `json:"children,omitempty"`
	Cover *string `json:"cover,omitempty"`
	Description *string `json:"description,omitempty"`
	DisplayName string `json:"displayName"`
	HideFromList *bool `json:"hideFromList,omitempty"`
	PostTemplate *string `json:"postTemplate,omitempty"`
	PreventParentPostCascadeQuery *bool `json:"preventParentPostCascadeQuery,omitempty"`
	Priority int32 `json:"priority"`
	Slug string `json:"slug"`
	Template *string `json:"template,omitempty"`
}

type _CategorySpec CategorySpec

// NewCategorySpec instantiates a new CategorySpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCategorySpec(displayName string, priority int32, slug string) *CategorySpec {
	this := CategorySpec{}
	this.DisplayName = displayName
	this.Priority = priority
	this.Slug = slug
	return &this
}

// NewCategorySpecWithDefaults instantiates a new CategorySpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCategorySpecWithDefaults() *CategorySpec {
	this := CategorySpec{}
	var priority int32 = 0
	this.Priority = priority
	return &this
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *CategorySpec) GetChildren() []string {
	if o == nil || IsNil(o.Children) {
		var ret []string
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategorySpec) GetChildrenOk() ([]string, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *CategorySpec) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []string and assigns it to the Children field.
func (o *CategorySpec) SetChildren(v []string) {
	o.Children = v
}

// GetCover returns the Cover field value if set, zero value otherwise.
func (o *CategorySpec) GetCover() string {
	if o == nil || IsNil(o.Cover) {
		var ret string
		return ret
	}
	return *o.Cover
}

// GetCoverOk returns a tuple with the Cover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategorySpec) GetCoverOk() (*string, bool) {
	if o == nil || IsNil(o.Cover) {
		return nil, false
	}
	return o.Cover, true
}

// HasCover returns a boolean if a field has been set.
func (o *CategorySpec) HasCover() bool {
	if o != nil && !IsNil(o.Cover) {
		return true
	}

	return false
}

// SetCover gets a reference to the given string and assigns it to the Cover field.
func (o *CategorySpec) SetCover(v string) {
	o.Cover = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CategorySpec) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategorySpec) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CategorySpec) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CategorySpec) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value
func (o *CategorySpec) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *CategorySpec) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *CategorySpec) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetHideFromList returns the HideFromList field value if set, zero value otherwise.
func (o *CategorySpec) GetHideFromList() bool {
	if o == nil || IsNil(o.HideFromList) {
		var ret bool
		return ret
	}
	return *o.HideFromList
}

// GetHideFromListOk returns a tuple with the HideFromList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategorySpec) GetHideFromListOk() (*bool, bool) {
	if o == nil || IsNil(o.HideFromList) {
		return nil, false
	}
	return o.HideFromList, true
}

// HasHideFromList returns a boolean if a field has been set.
func (o *CategorySpec) HasHideFromList() bool {
	if o != nil && !IsNil(o.HideFromList) {
		return true
	}

	return false
}

// SetHideFromList gets a reference to the given bool and assigns it to the HideFromList field.
func (o *CategorySpec) SetHideFromList(v bool) {
	o.HideFromList = &v
}

// GetPostTemplate returns the PostTemplate field value if set, zero value otherwise.
func (o *CategorySpec) GetPostTemplate() string {
	if o == nil || IsNil(o.PostTemplate) {
		var ret string
		return ret
	}
	return *o.PostTemplate
}

// GetPostTemplateOk returns a tuple with the PostTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategorySpec) GetPostTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.PostTemplate) {
		return nil, false
	}
	return o.PostTemplate, true
}

// HasPostTemplate returns a boolean if a field has been set.
func (o *CategorySpec) HasPostTemplate() bool {
	if o != nil && !IsNil(o.PostTemplate) {
		return true
	}

	return false
}

// SetPostTemplate gets a reference to the given string and assigns it to the PostTemplate field.
func (o *CategorySpec) SetPostTemplate(v string) {
	o.PostTemplate = &v
}

// GetPreventParentPostCascadeQuery returns the PreventParentPostCascadeQuery field value if set, zero value otherwise.
func (o *CategorySpec) GetPreventParentPostCascadeQuery() bool {
	if o == nil || IsNil(o.PreventParentPostCascadeQuery) {
		var ret bool
		return ret
	}
	return *o.PreventParentPostCascadeQuery
}

// GetPreventParentPostCascadeQueryOk returns a tuple with the PreventParentPostCascadeQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategorySpec) GetPreventParentPostCascadeQueryOk() (*bool, bool) {
	if o == nil || IsNil(o.PreventParentPostCascadeQuery) {
		return nil, false
	}
	return o.PreventParentPostCascadeQuery, true
}

// HasPreventParentPostCascadeQuery returns a boolean if a field has been set.
func (o *CategorySpec) HasPreventParentPostCascadeQuery() bool {
	if o != nil && !IsNil(o.PreventParentPostCascadeQuery) {
		return true
	}

	return false
}

// SetPreventParentPostCascadeQuery gets a reference to the given bool and assigns it to the PreventParentPostCascadeQuery field.
func (o *CategorySpec) SetPreventParentPostCascadeQuery(v bool) {
	o.PreventParentPostCascadeQuery = &v
}

// GetPriority returns the Priority field value
func (o *CategorySpec) GetPriority() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value
// and a boolean to check if the value has been set.
func (o *CategorySpec) GetPriorityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Priority, true
}

// SetPriority sets field value
func (o *CategorySpec) SetPriority(v int32) {
	o.Priority = v
}

// GetSlug returns the Slug field value
func (o *CategorySpec) GetSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slug
}

// GetSlugOk returns a tuple with the Slug field value
// and a boolean to check if the value has been set.
func (o *CategorySpec) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slug, true
}

// SetSlug sets field value
func (o *CategorySpec) SetSlug(v string) {
	o.Slug = v
}

// GetTemplate returns the Template field value if set, zero value otherwise.
func (o *CategorySpec) GetTemplate() string {
	if o == nil || IsNil(o.Template) {
		var ret string
		return ret
	}
	return *o.Template
}

// GetTemplateOk returns a tuple with the Template field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategorySpec) GetTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.Template) {
		return nil, false
	}
	return o.Template, true
}

// HasTemplate returns a boolean if a field has been set.
func (o *CategorySpec) HasTemplate() bool {
	if o != nil && !IsNil(o.Template) {
		return true
	}

	return false
}

// SetTemplate gets a reference to the given string and assigns it to the Template field.
func (o *CategorySpec) SetTemplate(v string) {
	o.Template = &v
}

func (o CategorySpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CategorySpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	if !IsNil(o.Cover) {
		toSerialize["cover"] = o.Cover
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["displayName"] = o.DisplayName
	if !IsNil(o.HideFromList) {
		toSerialize["hideFromList"] = o.HideFromList
	}
	if !IsNil(o.PostTemplate) {
		toSerialize["postTemplate"] = o.PostTemplate
	}
	if !IsNil(o.PreventParentPostCascadeQuery) {
		toSerialize["preventParentPostCascadeQuery"] = o.PreventParentPostCascadeQuery
	}
	toSerialize["priority"] = o.Priority
	toSerialize["slug"] = o.Slug
	if !IsNil(o.Template) {
		toSerialize["template"] = o.Template
	}
	return toSerialize, nil
}

func (o *CategorySpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"displayName",
		"priority",
		"slug",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCategorySpec := _CategorySpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCategorySpec)

	if err != nil {
		return err
	}

	*o = CategorySpec(varCategorySpec)

	return err
}

type NullableCategorySpec struct {
	value *CategorySpec
	isSet bool
}

func (v NullableCategorySpec) Get() *CategorySpec {
	return v.value
}

func (v *NullableCategorySpec) Set(val *CategorySpec) {
	v.value = val
	v.isSet = true
}

func (v NullableCategorySpec) IsSet() bool {
	return v.isSet
}

func (v *NullableCategorySpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCategorySpec(val *CategorySpec) *NullableCategorySpec {
	return &NullableCategorySpec{value: val, isSet: true}
}

func (v NullableCategorySpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCategorySpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


