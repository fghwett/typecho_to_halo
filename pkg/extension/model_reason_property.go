/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReasonProperty type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReasonProperty{}

// ReasonProperty struct for ReasonProperty
type ReasonProperty struct {
	Description *string `json:"description,omitempty"`
	Name string `json:"name"`
	Optional *bool `json:"optional,omitempty"`
	Type string `json:"type"`
}

type _ReasonProperty ReasonProperty

// NewReasonProperty instantiates a new ReasonProperty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReasonProperty(name string, type_ string) *ReasonProperty {
	this := ReasonProperty{}
	this.Name = name
	var optional bool = false
	this.Optional = &optional
	this.Type = type_
	return &this
}

// NewReasonPropertyWithDefaults instantiates a new ReasonProperty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReasonPropertyWithDefaults() *ReasonProperty {
	this := ReasonProperty{}
	var optional bool = false
	this.Optional = &optional
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ReasonProperty) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReasonProperty) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ReasonProperty) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ReasonProperty) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value
func (o *ReasonProperty) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ReasonProperty) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ReasonProperty) SetName(v string) {
	o.Name = v
}

// GetOptional returns the Optional field value if set, zero value otherwise.
func (o *ReasonProperty) GetOptional() bool {
	if o == nil || IsNil(o.Optional) {
		var ret bool
		return ret
	}
	return *o.Optional
}

// GetOptionalOk returns a tuple with the Optional field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReasonProperty) GetOptionalOk() (*bool, bool) {
	if o == nil || IsNil(o.Optional) {
		return nil, false
	}
	return o.Optional, true
}

// HasOptional returns a boolean if a field has been set.
func (o *ReasonProperty) HasOptional() bool {
	if o != nil && !IsNil(o.Optional) {
		return true
	}

	return false
}

// SetOptional gets a reference to the given bool and assigns it to the Optional field.
func (o *ReasonProperty) SetOptional(v bool) {
	o.Optional = &v
}

// GetType returns the Type field value
func (o *ReasonProperty) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ReasonProperty) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ReasonProperty) SetType(v string) {
	o.Type = v
}

func (o ReasonProperty) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReasonProperty) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Optional) {
		toSerialize["optional"] = o.Optional
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *ReasonProperty) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReasonProperty := _ReasonProperty{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReasonProperty)

	if err != nil {
		return err
	}

	*o = ReasonProperty(varReasonProperty)

	return err
}

type NullableReasonProperty struct {
	value *ReasonProperty
	isSet bool
}

func (v NullableReasonProperty) Get() *ReasonProperty {
	return v.value
}

func (v *NullableReasonProperty) Set(val *ReasonProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableReasonProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableReasonProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReasonProperty(val *ReasonProperty) *NullableReasonProperty {
	return &NullableReasonProperty{value: val, isSet: true}
}

func (v NullableReasonProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReasonProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


