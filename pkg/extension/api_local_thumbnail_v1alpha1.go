/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type LocalThumbnailV1alpha1API interface {

	/*
	CreateLocalThumbnail Method for CreateLocalThumbnail

	Create LocalThumbnail

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateLocalThumbnailRequest
	*/
	CreateLocalThumbnail(ctx context.Context) ApiCreateLocalThumbnailRequest

	// CreateLocalThumbnailExecute executes the request
	//  @return LocalThumbnail
	CreateLocalThumbnailExecute(r ApiCreateLocalThumbnailRequest) (*LocalThumbnail, *http.Response, error)

	/*
	DeleteLocalThumbnail Method for DeleteLocalThumbnail

	Delete LocalThumbnail

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of localthumbnail
	@return ApiDeleteLocalThumbnailRequest
	*/
	DeleteLocalThumbnail(ctx context.Context, name string) ApiDeleteLocalThumbnailRequest

	// DeleteLocalThumbnailExecute executes the request
	DeleteLocalThumbnailExecute(r ApiDeleteLocalThumbnailRequest) (*http.Response, error)

	/*
	GetLocalThumbnail Method for GetLocalThumbnail

	Get LocalThumbnail

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of localthumbnail
	@return ApiGetLocalThumbnailRequest
	*/
	GetLocalThumbnail(ctx context.Context, name string) ApiGetLocalThumbnailRequest

	// GetLocalThumbnailExecute executes the request
	//  @return LocalThumbnail
	GetLocalThumbnailExecute(r ApiGetLocalThumbnailRequest) (*LocalThumbnail, *http.Response, error)

	/*
	ListLocalThumbnail Method for ListLocalThumbnail

	List LocalThumbnail

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListLocalThumbnailRequest
	*/
	ListLocalThumbnail(ctx context.Context) ApiListLocalThumbnailRequest

	// ListLocalThumbnailExecute executes the request
	//  @return LocalThumbnailList
	ListLocalThumbnailExecute(r ApiListLocalThumbnailRequest) (*LocalThumbnailList, *http.Response, error)

	/*
	PatchLocalThumbnail Method for PatchLocalThumbnail

	Patch LocalThumbnail

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of localthumbnail
	@return ApiPatchLocalThumbnailRequest
	*/
	PatchLocalThumbnail(ctx context.Context, name string) ApiPatchLocalThumbnailRequest

	// PatchLocalThumbnailExecute executes the request
	//  @return LocalThumbnail
	PatchLocalThumbnailExecute(r ApiPatchLocalThumbnailRequest) (*LocalThumbnail, *http.Response, error)

	/*
	UpdateLocalThumbnail Method for UpdateLocalThumbnail

	Update LocalThumbnail

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of localthumbnail
	@return ApiUpdateLocalThumbnailRequest
	*/
	UpdateLocalThumbnail(ctx context.Context, name string) ApiUpdateLocalThumbnailRequest

	// UpdateLocalThumbnailExecute executes the request
	//  @return LocalThumbnail
	UpdateLocalThumbnailExecute(r ApiUpdateLocalThumbnailRequest) (*LocalThumbnail, *http.Response, error)
}

// LocalThumbnailV1alpha1APIService LocalThumbnailV1alpha1API service
type LocalThumbnailV1alpha1APIService service

type ApiCreateLocalThumbnailRequest struct {
	ctx context.Context
	ApiService LocalThumbnailV1alpha1API
	localThumbnail *LocalThumbnail
}

// Fresh localthumbnail
func (r ApiCreateLocalThumbnailRequest) LocalThumbnail(localThumbnail LocalThumbnail) ApiCreateLocalThumbnailRequest {
	r.localThumbnail = &localThumbnail
	return r
}

func (r ApiCreateLocalThumbnailRequest) Execute() (*LocalThumbnail, *http.Response, error) {
	return r.ApiService.CreateLocalThumbnailExecute(r)
}

/*
CreateLocalThumbnail Method for CreateLocalThumbnail

Create LocalThumbnail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateLocalThumbnailRequest
*/
func (a *LocalThumbnailV1alpha1APIService) CreateLocalThumbnail(ctx context.Context) ApiCreateLocalThumbnailRequest {
	return ApiCreateLocalThumbnailRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return LocalThumbnail
func (a *LocalThumbnailV1alpha1APIService) CreateLocalThumbnailExecute(r ApiCreateLocalThumbnailRequest) (*LocalThumbnail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LocalThumbnail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalThumbnailV1alpha1APIService.CreateLocalThumbnail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/storage.halo.run/v1alpha1/localthumbnails"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.localThumbnail
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteLocalThumbnailRequest struct {
	ctx context.Context
	ApiService LocalThumbnailV1alpha1API
	name string
}

func (r ApiDeleteLocalThumbnailRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLocalThumbnailExecute(r)
}

/*
DeleteLocalThumbnail Method for DeleteLocalThumbnail

Delete LocalThumbnail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of localthumbnail
 @return ApiDeleteLocalThumbnailRequest
*/
func (a *LocalThumbnailV1alpha1APIService) DeleteLocalThumbnail(ctx context.Context, name string) ApiDeleteLocalThumbnailRequest {
	return ApiDeleteLocalThumbnailRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
func (a *LocalThumbnailV1alpha1APIService) DeleteLocalThumbnailExecute(r ApiDeleteLocalThumbnailRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalThumbnailV1alpha1APIService.DeleteLocalThumbnail")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/storage.halo.run/v1alpha1/localthumbnails/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetLocalThumbnailRequest struct {
	ctx context.Context
	ApiService LocalThumbnailV1alpha1API
	name string
}

func (r ApiGetLocalThumbnailRequest) Execute() (*LocalThumbnail, *http.Response, error) {
	return r.ApiService.GetLocalThumbnailExecute(r)
}

/*
GetLocalThumbnail Method for GetLocalThumbnail

Get LocalThumbnail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of localthumbnail
 @return ApiGetLocalThumbnailRequest
*/
func (a *LocalThumbnailV1alpha1APIService) GetLocalThumbnail(ctx context.Context, name string) ApiGetLocalThumbnailRequest {
	return ApiGetLocalThumbnailRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return LocalThumbnail
func (a *LocalThumbnailV1alpha1APIService) GetLocalThumbnailExecute(r ApiGetLocalThumbnailRequest) (*LocalThumbnail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LocalThumbnail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalThumbnailV1alpha1APIService.GetLocalThumbnail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/storage.halo.run/v1alpha1/localthumbnails/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListLocalThumbnailRequest struct {
	ctx context.Context
	ApiService LocalThumbnailV1alpha1API
	page *int32
	size *int32
	labelSelector *[]string
	fieldSelector *[]string
	sort *[]string
}

// Page number. Default is 0.
func (r ApiListLocalThumbnailRequest) Page(page int32) ApiListLocalThumbnailRequest {
	r.page = &page
	return r
}

// Size number. Default is 0.
func (r ApiListLocalThumbnailRequest) Size(size int32) ApiListLocalThumbnailRequest {
	r.size = &size
	return r
}

// Label selector. e.g.: hidden!&#x3D;true
func (r ApiListLocalThumbnailRequest) LabelSelector(labelSelector []string) ApiListLocalThumbnailRequest {
	r.labelSelector = &labelSelector
	return r
}

// Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
func (r ApiListLocalThumbnailRequest) FieldSelector(fieldSelector []string) ApiListLocalThumbnailRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListLocalThumbnailRequest) Sort(sort []string) ApiListLocalThumbnailRequest {
	r.sort = &sort
	return r
}

func (r ApiListLocalThumbnailRequest) Execute() (*LocalThumbnailList, *http.Response, error) {
	return r.ApiService.ListLocalThumbnailExecute(r)
}

/*
ListLocalThumbnail Method for ListLocalThumbnail

List LocalThumbnail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListLocalThumbnailRequest
*/
func (a *LocalThumbnailV1alpha1APIService) ListLocalThumbnail(ctx context.Context) ApiListLocalThumbnailRequest {
	return ApiListLocalThumbnailRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return LocalThumbnailList
func (a *LocalThumbnailV1alpha1APIService) ListLocalThumbnailExecute(r ApiListLocalThumbnailRequest) (*LocalThumbnailList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LocalThumbnailList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalThumbnailV1alpha1APIService.ListLocalThumbnail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/storage.halo.run/v1alpha1/localthumbnails"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.labelSelector != nil {
		t := *r.labelSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", t, "form", "multi")
		}
	}
	if r.fieldSelector != nil {
		t := *r.fieldSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", t, "form", "multi")
		}
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchLocalThumbnailRequest struct {
	ctx context.Context
	ApiService LocalThumbnailV1alpha1API
	name string
	jsonPatchInner *[]JsonPatchInner
}

func (r ApiPatchLocalThumbnailRequest) JsonPatchInner(jsonPatchInner []JsonPatchInner) ApiPatchLocalThumbnailRequest {
	r.jsonPatchInner = &jsonPatchInner
	return r
}

func (r ApiPatchLocalThumbnailRequest) Execute() (*LocalThumbnail, *http.Response, error) {
	return r.ApiService.PatchLocalThumbnailExecute(r)
}

/*
PatchLocalThumbnail Method for PatchLocalThumbnail

Patch LocalThumbnail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of localthumbnail
 @return ApiPatchLocalThumbnailRequest
*/
func (a *LocalThumbnailV1alpha1APIService) PatchLocalThumbnail(ctx context.Context, name string) ApiPatchLocalThumbnailRequest {
	return ApiPatchLocalThumbnailRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return LocalThumbnail
func (a *LocalThumbnailV1alpha1APIService) PatchLocalThumbnailExecute(r ApiPatchLocalThumbnailRequest) (*LocalThumbnail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LocalThumbnail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalThumbnailV1alpha1APIService.PatchLocalThumbnail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/storage.halo.run/v1alpha1/localthumbnails/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jsonPatchInner
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateLocalThumbnailRequest struct {
	ctx context.Context
	ApiService LocalThumbnailV1alpha1API
	name string
	localThumbnail *LocalThumbnail
}

// Updated localthumbnail
func (r ApiUpdateLocalThumbnailRequest) LocalThumbnail(localThumbnail LocalThumbnail) ApiUpdateLocalThumbnailRequest {
	r.localThumbnail = &localThumbnail
	return r
}

func (r ApiUpdateLocalThumbnailRequest) Execute() (*LocalThumbnail, *http.Response, error) {
	return r.ApiService.UpdateLocalThumbnailExecute(r)
}

/*
UpdateLocalThumbnail Method for UpdateLocalThumbnail

Update LocalThumbnail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of localthumbnail
 @return ApiUpdateLocalThumbnailRequest
*/
func (a *LocalThumbnailV1alpha1APIService) UpdateLocalThumbnail(ctx context.Context, name string) ApiUpdateLocalThumbnailRequest {
	return ApiUpdateLocalThumbnailRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return LocalThumbnail
func (a *LocalThumbnailV1alpha1APIService) UpdateLocalThumbnailExecute(r ApiUpdateLocalThumbnailRequest) (*LocalThumbnail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LocalThumbnail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalThumbnailV1alpha1APIService.UpdateLocalThumbnail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/storage.halo.run/v1alpha1/localthumbnails/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.localThumbnail
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
