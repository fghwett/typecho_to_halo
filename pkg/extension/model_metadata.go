/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Metadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Metadata{}

// Metadata struct for Metadata
type Metadata struct {
	Annotations *map[string]string `json:"annotations,omitempty"`
	CreationTimestamp NullableTime `json:"creationTimestamp,omitempty"`
	DeletionTimestamp NullableTime `json:"deletionTimestamp,omitempty"`
	Finalizers []*string `json:"finalizers,omitempty"`
	// The name field will be generated automatically according to the given generateName field
	GenerateName *string `json:"generateName,omitempty"`
	Labels *map[string]string `json:"labels,omitempty"`
	// Metadata name
	Name string `json:"name"`
	Version NullableInt64 `json:"version,omitempty"`
}

type _Metadata Metadata

// NewMetadata instantiates a new Metadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetadata(name string) *Metadata {
	this := Metadata{}
	this.Name = name
	return &this
}

// NewMetadataWithDefaults instantiates a new Metadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetadataWithDefaults() *Metadata {
	this := Metadata{}
	return &this
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *Metadata) GetAnnotations() map[string]string {
	if o == nil || IsNil(o.Annotations) {
		var ret map[string]string
		return ret
	}
	return *o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metadata) GetAnnotationsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Annotations) {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *Metadata) HasAnnotations() bool {
	if o != nil && !IsNil(o.Annotations) {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]string and assigns it to the Annotations field.
func (o *Metadata) SetAnnotations(v map[string]string) {
	o.Annotations = &v
}

// GetCreationTimestamp returns the CreationTimestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Metadata) GetCreationTimestamp() time.Time {
	if o == nil || IsNil(o.CreationTimestamp.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CreationTimestamp.Get()
}

// GetCreationTimestampOk returns a tuple with the CreationTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Metadata) GetCreationTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreationTimestamp.Get(), o.CreationTimestamp.IsSet()
}

// HasCreationTimestamp returns a boolean if a field has been set.
func (o *Metadata) HasCreationTimestamp() bool {
	if o != nil && o.CreationTimestamp.IsSet() {
		return true
	}

	return false
}

// SetCreationTimestamp gets a reference to the given NullableTime and assigns it to the CreationTimestamp field.
func (o *Metadata) SetCreationTimestamp(v time.Time) {
	o.CreationTimestamp.Set(&v)
}
// SetCreationTimestampNil sets the value for CreationTimestamp to be an explicit nil
func (o *Metadata) SetCreationTimestampNil() {
	o.CreationTimestamp.Set(nil)
}

// UnsetCreationTimestamp ensures that no value is present for CreationTimestamp, not even an explicit nil
func (o *Metadata) UnsetCreationTimestamp() {
	o.CreationTimestamp.Unset()
}

// GetDeletionTimestamp returns the DeletionTimestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Metadata) GetDeletionTimestamp() time.Time {
	if o == nil || IsNil(o.DeletionTimestamp.Get()) {
		var ret time.Time
		return ret
	}
	return *o.DeletionTimestamp.Get()
}

// GetDeletionTimestampOk returns a tuple with the DeletionTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Metadata) GetDeletionTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeletionTimestamp.Get(), o.DeletionTimestamp.IsSet()
}

// HasDeletionTimestamp returns a boolean if a field has been set.
func (o *Metadata) HasDeletionTimestamp() bool {
	if o != nil && o.DeletionTimestamp.IsSet() {
		return true
	}

	return false
}

// SetDeletionTimestamp gets a reference to the given NullableTime and assigns it to the DeletionTimestamp field.
func (o *Metadata) SetDeletionTimestamp(v time.Time) {
	o.DeletionTimestamp.Set(&v)
}
// SetDeletionTimestampNil sets the value for DeletionTimestamp to be an explicit nil
func (o *Metadata) SetDeletionTimestampNil() {
	o.DeletionTimestamp.Set(nil)
}

// UnsetDeletionTimestamp ensures that no value is present for DeletionTimestamp, not even an explicit nil
func (o *Metadata) UnsetDeletionTimestamp() {
	o.DeletionTimestamp.Unset()
}

// GetFinalizers returns the Finalizers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Metadata) GetFinalizers() []*string {
	if o == nil {
		var ret []*string
		return ret
	}
	return o.Finalizers
}

// GetFinalizersOk returns a tuple with the Finalizers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Metadata) GetFinalizersOk() ([]*string, bool) {
	if o == nil || IsNil(o.Finalizers) {
		return nil, false
	}
	return o.Finalizers, true
}

// HasFinalizers returns a boolean if a field has been set.
func (o *Metadata) HasFinalizers() bool {
	if o != nil && !IsNil(o.Finalizers) {
		return true
	}

	return false
}

// SetFinalizers gets a reference to the given []*string and assigns it to the Finalizers field.
func (o *Metadata) SetFinalizers(v []*string) {
	o.Finalizers = v
}

// GetGenerateName returns the GenerateName field value if set, zero value otherwise.
func (o *Metadata) GetGenerateName() string {
	if o == nil || IsNil(o.GenerateName) {
		var ret string
		return ret
	}
	return *o.GenerateName
}

// GetGenerateNameOk returns a tuple with the GenerateName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metadata) GetGenerateNameOk() (*string, bool) {
	if o == nil || IsNil(o.GenerateName) {
		return nil, false
	}
	return o.GenerateName, true
}

// HasGenerateName returns a boolean if a field has been set.
func (o *Metadata) HasGenerateName() bool {
	if o != nil && !IsNil(o.GenerateName) {
		return true
	}

	return false
}

// SetGenerateName gets a reference to the given string and assigns it to the GenerateName field.
func (o *Metadata) SetGenerateName(v string) {
	o.GenerateName = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *Metadata) GetLabels() map[string]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metadata) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *Metadata) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *Metadata) SetLabels(v map[string]string) {
	o.Labels = &v
}

// GetName returns the Name field value
func (o *Metadata) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Metadata) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Metadata) SetName(v string) {
	o.Name = v
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Metadata) GetVersion() int64 {
	if o == nil || IsNil(o.Version.Get()) {
		var ret int64
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Metadata) GetVersionOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *Metadata) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableInt64 and assigns it to the Version field.
func (o *Metadata) SetVersion(v int64) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *Metadata) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *Metadata) UnsetVersion() {
	o.Version.Unset()
}

func (o Metadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Metadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Annotations) {
		toSerialize["annotations"] = o.Annotations
	}
	if o.CreationTimestamp.IsSet() {
		toSerialize["creationTimestamp"] = o.CreationTimestamp.Get()
	}
	if o.DeletionTimestamp.IsSet() {
		toSerialize["deletionTimestamp"] = o.DeletionTimestamp.Get()
	}
	if o.Finalizers != nil {
		toSerialize["finalizers"] = o.Finalizers
	}
	if !IsNil(o.GenerateName) {
		toSerialize["generateName"] = o.GenerateName
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	toSerialize["name"] = o.Name
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	return toSerialize, nil
}

func (o *Metadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetadata := _Metadata{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMetadata)

	if err != nil {
		return err
	}

	*o = Metadata(varMetadata)

	return err
}

type NullableMetadata struct {
	value *Metadata
	isSet bool
}

func (v NullableMetadata) Get() *Metadata {
	return v.value
}

func (v *NullableMetadata) Set(val *Metadata) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadata(val *Metadata) *NullableMetadata {
	return &NullableMetadata{value: val, isSet: true}
}

func (v NullableMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


