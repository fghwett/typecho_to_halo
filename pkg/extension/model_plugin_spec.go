/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PluginSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PluginSpec{}

// PluginSpec struct for PluginSpec
type PluginSpec struct {
	Author *PluginAuthor `json:"author,omitempty"`
	ConfigMapName *string `json:"configMapName,omitempty"`
	Description *string `json:"description,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Homepage *string `json:"homepage,omitempty"`
	Issues *string `json:"issues,omitempty"`
	License []License `json:"license,omitempty"`
	Logo *string `json:"logo,omitempty"`
	// Deprecated
	PluginClass *string `json:"pluginClass,omitempty"`
	PluginDependencies *map[string]string `json:"pluginDependencies,omitempty"`
	Repo *string `json:"repo,omitempty"`
	Requires *string `json:"requires,omitempty"`
	SettingName *string `json:"settingName,omitempty"`
	Version string `json:"version" validate:"regexp=^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\\\+([0-9a-zA-Z-]+(?:\\\\.[0-9a-zA-Z-]+)*))?$"`
}

type _PluginSpec PluginSpec

// NewPluginSpec instantiates a new PluginSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluginSpec(version string) *PluginSpec {
	this := PluginSpec{}
	this.Version = version
	return &this
}

// NewPluginSpecWithDefaults instantiates a new PluginSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginSpecWithDefaults() *PluginSpec {
	this := PluginSpec{}
	return &this
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *PluginSpec) GetAuthor() PluginAuthor {
	if o == nil || IsNil(o.Author) {
		var ret PluginAuthor
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginSpec) GetAuthorOk() (*PluginAuthor, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *PluginSpec) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given PluginAuthor and assigns it to the Author field.
func (o *PluginSpec) SetAuthor(v PluginAuthor) {
	o.Author = &v
}

// GetConfigMapName returns the ConfigMapName field value if set, zero value otherwise.
func (o *PluginSpec) GetConfigMapName() string {
	if o == nil || IsNil(o.ConfigMapName) {
		var ret string
		return ret
	}
	return *o.ConfigMapName
}

// GetConfigMapNameOk returns a tuple with the ConfigMapName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginSpec) GetConfigMapNameOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigMapName) {
		return nil, false
	}
	return o.ConfigMapName, true
}

// HasConfigMapName returns a boolean if a field has been set.
func (o *PluginSpec) HasConfigMapName() bool {
	if o != nil && !IsNil(o.ConfigMapName) {
		return true
	}

	return false
}

// SetConfigMapName gets a reference to the given string and assigns it to the ConfigMapName field.
func (o *PluginSpec) SetConfigMapName(v string) {
	o.ConfigMapName = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PluginSpec) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PluginSpec) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PluginSpec) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *PluginSpec) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginSpec) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *PluginSpec) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *PluginSpec) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *PluginSpec) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginSpec) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *PluginSpec) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *PluginSpec) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetHomepage returns the Homepage field value if set, zero value otherwise.
func (o *PluginSpec) GetHomepage() string {
	if o == nil || IsNil(o.Homepage) {
		var ret string
		return ret
	}
	return *o.Homepage
}

// GetHomepageOk returns a tuple with the Homepage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginSpec) GetHomepageOk() (*string, bool) {
	if o == nil || IsNil(o.Homepage) {
		return nil, false
	}
	return o.Homepage, true
}

// HasHomepage returns a boolean if a field has been set.
func (o *PluginSpec) HasHomepage() bool {
	if o != nil && !IsNil(o.Homepage) {
		return true
	}

	return false
}

// SetHomepage gets a reference to the given string and assigns it to the Homepage field.
func (o *PluginSpec) SetHomepage(v string) {
	o.Homepage = &v
}

// GetIssues returns the Issues field value if set, zero value otherwise.
func (o *PluginSpec) GetIssues() string {
	if o == nil || IsNil(o.Issues) {
		var ret string
		return ret
	}
	return *o.Issues
}

// GetIssuesOk returns a tuple with the Issues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginSpec) GetIssuesOk() (*string, bool) {
	if o == nil || IsNil(o.Issues) {
		return nil, false
	}
	return o.Issues, true
}

// HasIssues returns a boolean if a field has been set.
func (o *PluginSpec) HasIssues() bool {
	if o != nil && !IsNil(o.Issues) {
		return true
	}

	return false
}

// SetIssues gets a reference to the given string and assigns it to the Issues field.
func (o *PluginSpec) SetIssues(v string) {
	o.Issues = &v
}

// GetLicense returns the License field value if set, zero value otherwise.
func (o *PluginSpec) GetLicense() []License {
	if o == nil || IsNil(o.License) {
		var ret []License
		return ret
	}
	return o.License
}

// GetLicenseOk returns a tuple with the License field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginSpec) GetLicenseOk() ([]License, bool) {
	if o == nil || IsNil(o.License) {
		return nil, false
	}
	return o.License, true
}

// HasLicense returns a boolean if a field has been set.
func (o *PluginSpec) HasLicense() bool {
	if o != nil && !IsNil(o.License) {
		return true
	}

	return false
}

// SetLicense gets a reference to the given []License and assigns it to the License field.
func (o *PluginSpec) SetLicense(v []License) {
	o.License = v
}

// GetLogo returns the Logo field value if set, zero value otherwise.
func (o *PluginSpec) GetLogo() string {
	if o == nil || IsNil(o.Logo) {
		var ret string
		return ret
	}
	return *o.Logo
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginSpec) GetLogoOk() (*string, bool) {
	if o == nil || IsNil(o.Logo) {
		return nil, false
	}
	return o.Logo, true
}

// HasLogo returns a boolean if a field has been set.
func (o *PluginSpec) HasLogo() bool {
	if o != nil && !IsNil(o.Logo) {
		return true
	}

	return false
}

// SetLogo gets a reference to the given string and assigns it to the Logo field.
func (o *PluginSpec) SetLogo(v string) {
	o.Logo = &v
}

// GetPluginClass returns the PluginClass field value if set, zero value otherwise.
// Deprecated
func (o *PluginSpec) GetPluginClass() string {
	if o == nil || IsNil(o.PluginClass) {
		var ret string
		return ret
	}
	return *o.PluginClass
}

// GetPluginClassOk returns a tuple with the PluginClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *PluginSpec) GetPluginClassOk() (*string, bool) {
	if o == nil || IsNil(o.PluginClass) {
		return nil, false
	}
	return o.PluginClass, true
}

// HasPluginClass returns a boolean if a field has been set.
func (o *PluginSpec) HasPluginClass() bool {
	if o != nil && !IsNil(o.PluginClass) {
		return true
	}

	return false
}

// SetPluginClass gets a reference to the given string and assigns it to the PluginClass field.
// Deprecated
func (o *PluginSpec) SetPluginClass(v string) {
	o.PluginClass = &v
}

// GetPluginDependencies returns the PluginDependencies field value if set, zero value otherwise.
func (o *PluginSpec) GetPluginDependencies() map[string]string {
	if o == nil || IsNil(o.PluginDependencies) {
		var ret map[string]string
		return ret
	}
	return *o.PluginDependencies
}

// GetPluginDependenciesOk returns a tuple with the PluginDependencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginSpec) GetPluginDependenciesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.PluginDependencies) {
		return nil, false
	}
	return o.PluginDependencies, true
}

// HasPluginDependencies returns a boolean if a field has been set.
func (o *PluginSpec) HasPluginDependencies() bool {
	if o != nil && !IsNil(o.PluginDependencies) {
		return true
	}

	return false
}

// SetPluginDependencies gets a reference to the given map[string]string and assigns it to the PluginDependencies field.
func (o *PluginSpec) SetPluginDependencies(v map[string]string) {
	o.PluginDependencies = &v
}

// GetRepo returns the Repo field value if set, zero value otherwise.
func (o *PluginSpec) GetRepo() string {
	if o == nil || IsNil(o.Repo) {
		var ret string
		return ret
	}
	return *o.Repo
}

// GetRepoOk returns a tuple with the Repo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginSpec) GetRepoOk() (*string, bool) {
	if o == nil || IsNil(o.Repo) {
		return nil, false
	}
	return o.Repo, true
}

// HasRepo returns a boolean if a field has been set.
func (o *PluginSpec) HasRepo() bool {
	if o != nil && !IsNil(o.Repo) {
		return true
	}

	return false
}

// SetRepo gets a reference to the given string and assigns it to the Repo field.
func (o *PluginSpec) SetRepo(v string) {
	o.Repo = &v
}

// GetRequires returns the Requires field value if set, zero value otherwise.
func (o *PluginSpec) GetRequires() string {
	if o == nil || IsNil(o.Requires) {
		var ret string
		return ret
	}
	return *o.Requires
}

// GetRequiresOk returns a tuple with the Requires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginSpec) GetRequiresOk() (*string, bool) {
	if o == nil || IsNil(o.Requires) {
		return nil, false
	}
	return o.Requires, true
}

// HasRequires returns a boolean if a field has been set.
func (o *PluginSpec) HasRequires() bool {
	if o != nil && !IsNil(o.Requires) {
		return true
	}

	return false
}

// SetRequires gets a reference to the given string and assigns it to the Requires field.
func (o *PluginSpec) SetRequires(v string) {
	o.Requires = &v
}

// GetSettingName returns the SettingName field value if set, zero value otherwise.
func (o *PluginSpec) GetSettingName() string {
	if o == nil || IsNil(o.SettingName) {
		var ret string
		return ret
	}
	return *o.SettingName
}

// GetSettingNameOk returns a tuple with the SettingName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginSpec) GetSettingNameOk() (*string, bool) {
	if o == nil || IsNil(o.SettingName) {
		return nil, false
	}
	return o.SettingName, true
}

// HasSettingName returns a boolean if a field has been set.
func (o *PluginSpec) HasSettingName() bool {
	if o != nil && !IsNil(o.SettingName) {
		return true
	}

	return false
}

// SetSettingName gets a reference to the given string and assigns it to the SettingName field.
func (o *PluginSpec) SetSettingName(v string) {
	o.SettingName = &v
}

// GetVersion returns the Version field value
func (o *PluginSpec) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *PluginSpec) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *PluginSpec) SetVersion(v string) {
	o.Version = v
}

func (o PluginSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PluginSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.ConfigMapName) {
		toSerialize["configMapName"] = o.ConfigMapName
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Homepage) {
		toSerialize["homepage"] = o.Homepage
	}
	if !IsNil(o.Issues) {
		toSerialize["issues"] = o.Issues
	}
	if !IsNil(o.License) {
		toSerialize["license"] = o.License
	}
	if !IsNil(o.Logo) {
		toSerialize["logo"] = o.Logo
	}
	if !IsNil(o.PluginClass) {
		toSerialize["pluginClass"] = o.PluginClass
	}
	if !IsNil(o.PluginDependencies) {
		toSerialize["pluginDependencies"] = o.PluginDependencies
	}
	if !IsNil(o.Repo) {
		toSerialize["repo"] = o.Repo
	}
	if !IsNil(o.Requires) {
		toSerialize["requires"] = o.Requires
	}
	if !IsNil(o.SettingName) {
		toSerialize["settingName"] = o.SettingName
	}
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

func (o *PluginSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPluginSpec := _PluginSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPluginSpec)

	if err != nil {
		return err
	}

	*o = PluginSpec(varPluginSpec)

	return err
}

type NullablePluginSpec struct {
	value *PluginSpec
	isSet bool
}

func (v NullablePluginSpec) Get() *PluginSpec {
	return v.value
}

func (v *NullablePluginSpec) Set(val *PluginSpec) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginSpec) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginSpec(val *PluginSpec) *NullablePluginSpec {
	return &NullablePluginSpec{value: val, isSet: true}
}

func (v NullablePluginSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


