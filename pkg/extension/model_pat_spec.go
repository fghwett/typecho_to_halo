/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the PatSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatSpec{}

// PatSpec struct for PatSpec
type PatSpec struct {
	Description *string `json:"description,omitempty"`
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`
	LastUsed *time.Time `json:"lastUsed,omitempty"`
	Name string `json:"name"`
	Revoked *bool `json:"revoked,omitempty"`
	RevokesAt *time.Time `json:"revokesAt,omitempty"`
	Roles []string `json:"roles,omitempty"`
	Scopes []string `json:"scopes,omitempty"`
	TokenId string `json:"tokenId"`
	Username string `json:"username"`
}

type _PatSpec PatSpec

// NewPatSpec instantiates a new PatSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatSpec(name string, tokenId string, username string) *PatSpec {
	this := PatSpec{}
	this.Name = name
	this.TokenId = tokenId
	this.Username = username
	return &this
}

// NewPatSpecWithDefaults instantiates a new PatSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatSpecWithDefaults() *PatSpec {
	this := PatSpec{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PatSpec) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PatSpec) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PatSpec) SetDescription(v string) {
	o.Description = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *PatSpec) GetExpiresAt() time.Time {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatSpec) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *PatSpec) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given time.Time and assigns it to the ExpiresAt field.
func (o *PatSpec) SetExpiresAt(v time.Time) {
	o.ExpiresAt = &v
}

// GetLastUsed returns the LastUsed field value if set, zero value otherwise.
func (o *PatSpec) GetLastUsed() time.Time {
	if o == nil || IsNil(o.LastUsed) {
		var ret time.Time
		return ret
	}
	return *o.LastUsed
}

// GetLastUsedOk returns a tuple with the LastUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatSpec) GetLastUsedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUsed) {
		return nil, false
	}
	return o.LastUsed, true
}

// HasLastUsed returns a boolean if a field has been set.
func (o *PatSpec) HasLastUsed() bool {
	if o != nil && !IsNil(o.LastUsed) {
		return true
	}

	return false
}

// SetLastUsed gets a reference to the given time.Time and assigns it to the LastUsed field.
func (o *PatSpec) SetLastUsed(v time.Time) {
	o.LastUsed = &v
}

// GetName returns the Name field value
func (o *PatSpec) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PatSpec) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PatSpec) SetName(v string) {
	o.Name = v
}

// GetRevoked returns the Revoked field value if set, zero value otherwise.
func (o *PatSpec) GetRevoked() bool {
	if o == nil || IsNil(o.Revoked) {
		var ret bool
		return ret
	}
	return *o.Revoked
}

// GetRevokedOk returns a tuple with the Revoked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatSpec) GetRevokedOk() (*bool, bool) {
	if o == nil || IsNil(o.Revoked) {
		return nil, false
	}
	return o.Revoked, true
}

// HasRevoked returns a boolean if a field has been set.
func (o *PatSpec) HasRevoked() bool {
	if o != nil && !IsNil(o.Revoked) {
		return true
	}

	return false
}

// SetRevoked gets a reference to the given bool and assigns it to the Revoked field.
func (o *PatSpec) SetRevoked(v bool) {
	o.Revoked = &v
}

// GetRevokesAt returns the RevokesAt field value if set, zero value otherwise.
func (o *PatSpec) GetRevokesAt() time.Time {
	if o == nil || IsNil(o.RevokesAt) {
		var ret time.Time
		return ret
	}
	return *o.RevokesAt
}

// GetRevokesAtOk returns a tuple with the RevokesAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatSpec) GetRevokesAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RevokesAt) {
		return nil, false
	}
	return o.RevokesAt, true
}

// HasRevokesAt returns a boolean if a field has been set.
func (o *PatSpec) HasRevokesAt() bool {
	if o != nil && !IsNil(o.RevokesAt) {
		return true
	}

	return false
}

// SetRevokesAt gets a reference to the given time.Time and assigns it to the RevokesAt field.
func (o *PatSpec) SetRevokesAt(v time.Time) {
	o.RevokesAt = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *PatSpec) GetRoles() []string {
	if o == nil || IsNil(o.Roles) {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatSpec) GetRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *PatSpec) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *PatSpec) SetRoles(v []string) {
	o.Roles = v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *PatSpec) GetScopes() []string {
	if o == nil || IsNil(o.Scopes) {
		var ret []string
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatSpec) GetScopesOk() ([]string, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *PatSpec) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []string and assigns it to the Scopes field.
func (o *PatSpec) SetScopes(v []string) {
	o.Scopes = v
}

// GetTokenId returns the TokenId field value
func (o *PatSpec) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *PatSpec) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *PatSpec) SetTokenId(v string) {
	o.TokenId = v
}

// GetUsername returns the Username field value
func (o *PatSpec) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *PatSpec) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *PatSpec) SetUsername(v string) {
	o.Username = v
}

func (o PatSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ExpiresAt) {
		toSerialize["expiresAt"] = o.ExpiresAt
	}
	if !IsNil(o.LastUsed) {
		toSerialize["lastUsed"] = o.LastUsed
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Revoked) {
		toSerialize["revoked"] = o.Revoked
	}
	if !IsNil(o.RevokesAt) {
		toSerialize["revokesAt"] = o.RevokesAt
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	toSerialize["tokenId"] = o.TokenId
	toSerialize["username"] = o.Username
	return toSerialize, nil
}

func (o *PatSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"tokenId",
		"username",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPatSpec := _PatSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPatSpec)

	if err != nil {
		return err
	}

	*o = PatSpec(varPatSpec)

	return err
}

type NullablePatSpec struct {
	value *PatSpec
	isSet bool
}

func (v NullablePatSpec) Get() *PatSpec {
	return v.value
}

func (v *NullablePatSpec) Set(val *PatSpec) {
	v.value = val
	v.isSet = true
}

func (v NullablePatSpec) IsSet() bool {
	return v.isSet
}

func (v *NullablePatSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatSpec(val *PatSpec) *NullablePatSpec {
	return &NullablePatSpec{value: val, isSet: true}
}

func (v NullablePatSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


