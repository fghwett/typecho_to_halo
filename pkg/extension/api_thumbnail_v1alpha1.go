/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type ThumbnailV1alpha1API interface {

	/*
	CreateThumbnail Method for CreateThumbnail

	Create Thumbnail

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateThumbnailRequest
	*/
	CreateThumbnail(ctx context.Context) ApiCreateThumbnailRequest

	// CreateThumbnailExecute executes the request
	//  @return Thumbnail
	CreateThumbnailExecute(r ApiCreateThumbnailRequest) (*Thumbnail, *http.Response, error)

	/*
	DeleteThumbnail Method for DeleteThumbnail

	Delete Thumbnail

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of thumbnail
	@return ApiDeleteThumbnailRequest
	*/
	DeleteThumbnail(ctx context.Context, name string) ApiDeleteThumbnailRequest

	// DeleteThumbnailExecute executes the request
	DeleteThumbnailExecute(r ApiDeleteThumbnailRequest) (*http.Response, error)

	/*
	GetThumbnail Method for GetThumbnail

	Get Thumbnail

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of thumbnail
	@return ApiGetThumbnailRequest
	*/
	GetThumbnail(ctx context.Context, name string) ApiGetThumbnailRequest

	// GetThumbnailExecute executes the request
	//  @return Thumbnail
	GetThumbnailExecute(r ApiGetThumbnailRequest) (*Thumbnail, *http.Response, error)

	/*
	ListThumbnail Method for ListThumbnail

	List Thumbnail

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListThumbnailRequest
	*/
	ListThumbnail(ctx context.Context) ApiListThumbnailRequest

	// ListThumbnailExecute executes the request
	//  @return ThumbnailList
	ListThumbnailExecute(r ApiListThumbnailRequest) (*ThumbnailList, *http.Response, error)

	/*
	PatchThumbnail Method for PatchThumbnail

	Patch Thumbnail

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of thumbnail
	@return ApiPatchThumbnailRequest
	*/
	PatchThumbnail(ctx context.Context, name string) ApiPatchThumbnailRequest

	// PatchThumbnailExecute executes the request
	//  @return Thumbnail
	PatchThumbnailExecute(r ApiPatchThumbnailRequest) (*Thumbnail, *http.Response, error)

	/*
	UpdateThumbnail Method for UpdateThumbnail

	Update Thumbnail

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of thumbnail
	@return ApiUpdateThumbnailRequest
	*/
	UpdateThumbnail(ctx context.Context, name string) ApiUpdateThumbnailRequest

	// UpdateThumbnailExecute executes the request
	//  @return Thumbnail
	UpdateThumbnailExecute(r ApiUpdateThumbnailRequest) (*Thumbnail, *http.Response, error)
}

// ThumbnailV1alpha1APIService ThumbnailV1alpha1API service
type ThumbnailV1alpha1APIService service

type ApiCreateThumbnailRequest struct {
	ctx context.Context
	ApiService ThumbnailV1alpha1API
	thumbnail *Thumbnail
}

// Fresh thumbnail
func (r ApiCreateThumbnailRequest) Thumbnail(thumbnail Thumbnail) ApiCreateThumbnailRequest {
	r.thumbnail = &thumbnail
	return r
}

func (r ApiCreateThumbnailRequest) Execute() (*Thumbnail, *http.Response, error) {
	return r.ApiService.CreateThumbnailExecute(r)
}

/*
CreateThumbnail Method for CreateThumbnail

Create Thumbnail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateThumbnailRequest
*/
func (a *ThumbnailV1alpha1APIService) CreateThumbnail(ctx context.Context) ApiCreateThumbnailRequest {
	return ApiCreateThumbnailRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Thumbnail
func (a *ThumbnailV1alpha1APIService) CreateThumbnailExecute(r ApiCreateThumbnailRequest) (*Thumbnail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Thumbnail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbnailV1alpha1APIService.CreateThumbnail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/storage.halo.run/v1alpha1/thumbnails"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.thumbnail
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteThumbnailRequest struct {
	ctx context.Context
	ApiService ThumbnailV1alpha1API
	name string
}

func (r ApiDeleteThumbnailRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteThumbnailExecute(r)
}

/*
DeleteThumbnail Method for DeleteThumbnail

Delete Thumbnail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of thumbnail
 @return ApiDeleteThumbnailRequest
*/
func (a *ThumbnailV1alpha1APIService) DeleteThumbnail(ctx context.Context, name string) ApiDeleteThumbnailRequest {
	return ApiDeleteThumbnailRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
func (a *ThumbnailV1alpha1APIService) DeleteThumbnailExecute(r ApiDeleteThumbnailRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbnailV1alpha1APIService.DeleteThumbnail")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/storage.halo.run/v1alpha1/thumbnails/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetThumbnailRequest struct {
	ctx context.Context
	ApiService ThumbnailV1alpha1API
	name string
}

func (r ApiGetThumbnailRequest) Execute() (*Thumbnail, *http.Response, error) {
	return r.ApiService.GetThumbnailExecute(r)
}

/*
GetThumbnail Method for GetThumbnail

Get Thumbnail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of thumbnail
 @return ApiGetThumbnailRequest
*/
func (a *ThumbnailV1alpha1APIService) GetThumbnail(ctx context.Context, name string) ApiGetThumbnailRequest {
	return ApiGetThumbnailRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return Thumbnail
func (a *ThumbnailV1alpha1APIService) GetThumbnailExecute(r ApiGetThumbnailRequest) (*Thumbnail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Thumbnail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbnailV1alpha1APIService.GetThumbnail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/storage.halo.run/v1alpha1/thumbnails/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListThumbnailRequest struct {
	ctx context.Context
	ApiService ThumbnailV1alpha1API
	page *int32
	size *int32
	labelSelector *[]string
	fieldSelector *[]string
	sort *[]string
}

// Page number. Default is 0.
func (r ApiListThumbnailRequest) Page(page int32) ApiListThumbnailRequest {
	r.page = &page
	return r
}

// Size number. Default is 0.
func (r ApiListThumbnailRequest) Size(size int32) ApiListThumbnailRequest {
	r.size = &size
	return r
}

// Label selector. e.g.: hidden!&#x3D;true
func (r ApiListThumbnailRequest) LabelSelector(labelSelector []string) ApiListThumbnailRequest {
	r.labelSelector = &labelSelector
	return r
}

// Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
func (r ApiListThumbnailRequest) FieldSelector(fieldSelector []string) ApiListThumbnailRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListThumbnailRequest) Sort(sort []string) ApiListThumbnailRequest {
	r.sort = &sort
	return r
}

func (r ApiListThumbnailRequest) Execute() (*ThumbnailList, *http.Response, error) {
	return r.ApiService.ListThumbnailExecute(r)
}

/*
ListThumbnail Method for ListThumbnail

List Thumbnail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListThumbnailRequest
*/
func (a *ThumbnailV1alpha1APIService) ListThumbnail(ctx context.Context) ApiListThumbnailRequest {
	return ApiListThumbnailRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ThumbnailList
func (a *ThumbnailV1alpha1APIService) ListThumbnailExecute(r ApiListThumbnailRequest) (*ThumbnailList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ThumbnailList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbnailV1alpha1APIService.ListThumbnail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/storage.halo.run/v1alpha1/thumbnails"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.labelSelector != nil {
		t := *r.labelSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", t, "form", "multi")
		}
	}
	if r.fieldSelector != nil {
		t := *r.fieldSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", t, "form", "multi")
		}
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchThumbnailRequest struct {
	ctx context.Context
	ApiService ThumbnailV1alpha1API
	name string
	jsonPatchInner *[]JsonPatchInner
}

func (r ApiPatchThumbnailRequest) JsonPatchInner(jsonPatchInner []JsonPatchInner) ApiPatchThumbnailRequest {
	r.jsonPatchInner = &jsonPatchInner
	return r
}

func (r ApiPatchThumbnailRequest) Execute() (*Thumbnail, *http.Response, error) {
	return r.ApiService.PatchThumbnailExecute(r)
}

/*
PatchThumbnail Method for PatchThumbnail

Patch Thumbnail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of thumbnail
 @return ApiPatchThumbnailRequest
*/
func (a *ThumbnailV1alpha1APIService) PatchThumbnail(ctx context.Context, name string) ApiPatchThumbnailRequest {
	return ApiPatchThumbnailRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return Thumbnail
func (a *ThumbnailV1alpha1APIService) PatchThumbnailExecute(r ApiPatchThumbnailRequest) (*Thumbnail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Thumbnail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbnailV1alpha1APIService.PatchThumbnail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/storage.halo.run/v1alpha1/thumbnails/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jsonPatchInner
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateThumbnailRequest struct {
	ctx context.Context
	ApiService ThumbnailV1alpha1API
	name string
	thumbnail *Thumbnail
}

// Updated thumbnail
func (r ApiUpdateThumbnailRequest) Thumbnail(thumbnail Thumbnail) ApiUpdateThumbnailRequest {
	r.thumbnail = &thumbnail
	return r
}

func (r ApiUpdateThumbnailRequest) Execute() (*Thumbnail, *http.Response, error) {
	return r.ApiService.UpdateThumbnailExecute(r)
}

/*
UpdateThumbnail Method for UpdateThumbnail

Update Thumbnail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of thumbnail
 @return ApiUpdateThumbnailRequest
*/
func (a *ThumbnailV1alpha1APIService) UpdateThumbnail(ctx context.Context, name string) ApiUpdateThumbnailRequest {
	return ApiUpdateThumbnailRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return Thumbnail
func (a *ThumbnailV1alpha1APIService) UpdateThumbnailExecute(r ApiUpdateThumbnailRequest) (*Thumbnail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Thumbnail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbnailV1alpha1APIService.UpdateThumbnail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/storage.halo.run/v1alpha1/thumbnails/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.thumbnail
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
