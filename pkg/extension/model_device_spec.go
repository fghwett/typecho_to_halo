/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the DeviceSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceSpec{}

// DeviceSpec struct for DeviceSpec
type DeviceSpec struct {
	IpAddress string `json:"ipAddress"`
	LastAccessedTime *time.Time `json:"lastAccessedTime,omitempty"`
	LastAuthenticatedTime *time.Time `json:"lastAuthenticatedTime,omitempty"`
	PrincipalName string `json:"principalName"`
	RememberMeSeriesId *string `json:"rememberMeSeriesId,omitempty"`
	SessionId string `json:"sessionId"`
	UserAgent *string `json:"userAgent,omitempty"`
}

type _DeviceSpec DeviceSpec

// NewDeviceSpec instantiates a new DeviceSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceSpec(ipAddress string, principalName string, sessionId string) *DeviceSpec {
	this := DeviceSpec{}
	this.IpAddress = ipAddress
	this.PrincipalName = principalName
	this.SessionId = sessionId
	return &this
}

// NewDeviceSpecWithDefaults instantiates a new DeviceSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceSpecWithDefaults() *DeviceSpec {
	this := DeviceSpec{}
	return &this
}

// GetIpAddress returns the IpAddress field value
func (o *DeviceSpec) GetIpAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value
// and a boolean to check if the value has been set.
func (o *DeviceSpec) GetIpAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IpAddress, true
}

// SetIpAddress sets field value
func (o *DeviceSpec) SetIpAddress(v string) {
	o.IpAddress = v
}

// GetLastAccessedTime returns the LastAccessedTime field value if set, zero value otherwise.
func (o *DeviceSpec) GetLastAccessedTime() time.Time {
	if o == nil || IsNil(o.LastAccessedTime) {
		var ret time.Time
		return ret
	}
	return *o.LastAccessedTime
}

// GetLastAccessedTimeOk returns a tuple with the LastAccessedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceSpec) GetLastAccessedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastAccessedTime) {
		return nil, false
	}
	return o.LastAccessedTime, true
}

// HasLastAccessedTime returns a boolean if a field has been set.
func (o *DeviceSpec) HasLastAccessedTime() bool {
	if o != nil && !IsNil(o.LastAccessedTime) {
		return true
	}

	return false
}

// SetLastAccessedTime gets a reference to the given time.Time and assigns it to the LastAccessedTime field.
func (o *DeviceSpec) SetLastAccessedTime(v time.Time) {
	o.LastAccessedTime = &v
}

// GetLastAuthenticatedTime returns the LastAuthenticatedTime field value if set, zero value otherwise.
func (o *DeviceSpec) GetLastAuthenticatedTime() time.Time {
	if o == nil || IsNil(o.LastAuthenticatedTime) {
		var ret time.Time
		return ret
	}
	return *o.LastAuthenticatedTime
}

// GetLastAuthenticatedTimeOk returns a tuple with the LastAuthenticatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceSpec) GetLastAuthenticatedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastAuthenticatedTime) {
		return nil, false
	}
	return o.LastAuthenticatedTime, true
}

// HasLastAuthenticatedTime returns a boolean if a field has been set.
func (o *DeviceSpec) HasLastAuthenticatedTime() bool {
	if o != nil && !IsNil(o.LastAuthenticatedTime) {
		return true
	}

	return false
}

// SetLastAuthenticatedTime gets a reference to the given time.Time and assigns it to the LastAuthenticatedTime field.
func (o *DeviceSpec) SetLastAuthenticatedTime(v time.Time) {
	o.LastAuthenticatedTime = &v
}

// GetPrincipalName returns the PrincipalName field value
func (o *DeviceSpec) GetPrincipalName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrincipalName
}

// GetPrincipalNameOk returns a tuple with the PrincipalName field value
// and a boolean to check if the value has been set.
func (o *DeviceSpec) GetPrincipalNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrincipalName, true
}

// SetPrincipalName sets field value
func (o *DeviceSpec) SetPrincipalName(v string) {
	o.PrincipalName = v
}

// GetRememberMeSeriesId returns the RememberMeSeriesId field value if set, zero value otherwise.
func (o *DeviceSpec) GetRememberMeSeriesId() string {
	if o == nil || IsNil(o.RememberMeSeriesId) {
		var ret string
		return ret
	}
	return *o.RememberMeSeriesId
}

// GetRememberMeSeriesIdOk returns a tuple with the RememberMeSeriesId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceSpec) GetRememberMeSeriesIdOk() (*string, bool) {
	if o == nil || IsNil(o.RememberMeSeriesId) {
		return nil, false
	}
	return o.RememberMeSeriesId, true
}

// HasRememberMeSeriesId returns a boolean if a field has been set.
func (o *DeviceSpec) HasRememberMeSeriesId() bool {
	if o != nil && !IsNil(o.RememberMeSeriesId) {
		return true
	}

	return false
}

// SetRememberMeSeriesId gets a reference to the given string and assigns it to the RememberMeSeriesId field.
func (o *DeviceSpec) SetRememberMeSeriesId(v string) {
	o.RememberMeSeriesId = &v
}

// GetSessionId returns the SessionId field value
func (o *DeviceSpec) GetSessionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SessionId
}

// GetSessionIdOk returns a tuple with the SessionId field value
// and a boolean to check if the value has been set.
func (o *DeviceSpec) GetSessionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SessionId, true
}

// SetSessionId sets field value
func (o *DeviceSpec) SetSessionId(v string) {
	o.SessionId = v
}

// GetUserAgent returns the UserAgent field value if set, zero value otherwise.
func (o *DeviceSpec) GetUserAgent() string {
	if o == nil || IsNil(o.UserAgent) {
		var ret string
		return ret
	}
	return *o.UserAgent
}

// GetUserAgentOk returns a tuple with the UserAgent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceSpec) GetUserAgentOk() (*string, bool) {
	if o == nil || IsNil(o.UserAgent) {
		return nil, false
	}
	return o.UserAgent, true
}

// HasUserAgent returns a boolean if a field has been set.
func (o *DeviceSpec) HasUserAgent() bool {
	if o != nil && !IsNil(o.UserAgent) {
		return true
	}

	return false
}

// SetUserAgent gets a reference to the given string and assigns it to the UserAgent field.
func (o *DeviceSpec) SetUserAgent(v string) {
	o.UserAgent = &v
}

func (o DeviceSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ipAddress"] = o.IpAddress
	if !IsNil(o.LastAccessedTime) {
		toSerialize["lastAccessedTime"] = o.LastAccessedTime
	}
	if !IsNil(o.LastAuthenticatedTime) {
		toSerialize["lastAuthenticatedTime"] = o.LastAuthenticatedTime
	}
	toSerialize["principalName"] = o.PrincipalName
	if !IsNil(o.RememberMeSeriesId) {
		toSerialize["rememberMeSeriesId"] = o.RememberMeSeriesId
	}
	toSerialize["sessionId"] = o.SessionId
	if !IsNil(o.UserAgent) {
		toSerialize["userAgent"] = o.UserAgent
	}
	return toSerialize, nil
}

func (o *DeviceSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ipAddress",
		"principalName",
		"sessionId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeviceSpec := _DeviceSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeviceSpec)

	if err != nil {
		return err
	}

	*o = DeviceSpec(varDeviceSpec)

	return err
}

type NullableDeviceSpec struct {
	value *DeviceSpec
	isSet bool
}

func (v NullableDeviceSpec) Get() *DeviceSpec {
	return v.value
}

func (v *NullableDeviceSpec) Set(val *DeviceSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceSpec(val *DeviceSpec) *NullableDeviceSpec {
	return &NullableDeviceSpec{value: val, isSet: true}
}

func (v NullableDeviceSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


