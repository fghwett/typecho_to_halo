/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PolicyTemplateSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyTemplateSpec{}

// PolicyTemplateSpec struct for PolicyTemplateSpec
type PolicyTemplateSpec struct {
	DisplayName *string `json:"displayName,omitempty"`
	SettingName string `json:"settingName"`
}

type _PolicyTemplateSpec PolicyTemplateSpec

// NewPolicyTemplateSpec instantiates a new PolicyTemplateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyTemplateSpec(settingName string) *PolicyTemplateSpec {
	this := PolicyTemplateSpec{}
	this.SettingName = settingName
	return &this
}

// NewPolicyTemplateSpecWithDefaults instantiates a new PolicyTemplateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyTemplateSpecWithDefaults() *PolicyTemplateSpec {
	this := PolicyTemplateSpec{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *PolicyTemplateSpec) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyTemplateSpec) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *PolicyTemplateSpec) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *PolicyTemplateSpec) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetSettingName returns the SettingName field value
func (o *PolicyTemplateSpec) GetSettingName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SettingName
}

// GetSettingNameOk returns a tuple with the SettingName field value
// and a boolean to check if the value has been set.
func (o *PolicyTemplateSpec) GetSettingNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SettingName, true
}

// SetSettingName sets field value
func (o *PolicyTemplateSpec) SetSettingName(v string) {
	o.SettingName = v
}

func (o PolicyTemplateSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyTemplateSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	toSerialize["settingName"] = o.SettingName
	return toSerialize, nil
}

func (o *PolicyTemplateSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"settingName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPolicyTemplateSpec := _PolicyTemplateSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPolicyTemplateSpec)

	if err != nil {
		return err
	}

	*o = PolicyTemplateSpec(varPolicyTemplateSpec)

	return err
}

type NullablePolicyTemplateSpec struct {
	value *PolicyTemplateSpec
	isSet bool
}

func (v NullablePolicyTemplateSpec) Get() *PolicyTemplateSpec {
	return v.value
}

func (v *NullablePolicyTemplateSpec) Set(val *PolicyTemplateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyTemplateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyTemplateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyTemplateSpec(val *PolicyTemplateSpec) *NullablePolicyTemplateSpec {
	return &NullablePolicyTemplateSpec{value: val, isSet: true}
}

func (v NullablePolicyTemplateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyTemplateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


