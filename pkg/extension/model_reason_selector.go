/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReasonSelector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReasonSelector{}

// ReasonSelector struct for ReasonSelector
type ReasonSelector struct {
	Language string `json:"language"`
	ReasonType string `json:"reasonType"`
}

type _ReasonSelector ReasonSelector

// NewReasonSelector instantiates a new ReasonSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReasonSelector(language string, reasonType string) *ReasonSelector {
	this := ReasonSelector{}
	this.Language = language
	this.ReasonType = reasonType
	return &this
}

// NewReasonSelectorWithDefaults instantiates a new ReasonSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReasonSelectorWithDefaults() *ReasonSelector {
	this := ReasonSelector{}
	var language string = "default"
	this.Language = language
	return &this
}

// GetLanguage returns the Language field value
func (o *ReasonSelector) GetLanguage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *ReasonSelector) GetLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *ReasonSelector) SetLanguage(v string) {
	o.Language = v
}

// GetReasonType returns the ReasonType field value
func (o *ReasonSelector) GetReasonType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReasonType
}

// GetReasonTypeOk returns a tuple with the ReasonType field value
// and a boolean to check if the value has been set.
func (o *ReasonSelector) GetReasonTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReasonType, true
}

// SetReasonType sets field value
func (o *ReasonSelector) SetReasonType(v string) {
	o.ReasonType = v
}

func (o ReasonSelector) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReasonSelector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["language"] = o.Language
	toSerialize["reasonType"] = o.ReasonType
	return toSerialize, nil
}

func (o *ReasonSelector) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"language",
		"reasonType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReasonSelector := _ReasonSelector{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReasonSelector)

	if err != nil {
		return err
	}

	*o = ReasonSelector(varReasonSelector)

	return err
}

type NullableReasonSelector struct {
	value *ReasonSelector
	isSet bool
}

func (v NullableReasonSelector) Get() *ReasonSelector {
	return v.value
}

func (v *NullableReasonSelector) Set(val *ReasonSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableReasonSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableReasonSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReasonSelector(val *ReasonSelector) *NullableReasonSelector {
	return &NullableReasonSelector{value: val, isSet: true}
}

func (v NullableReasonSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReasonSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


