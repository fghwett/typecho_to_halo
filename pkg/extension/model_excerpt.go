/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Excerpt type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Excerpt{}

// Excerpt struct for Excerpt
type Excerpt struct {
	AutoGenerate bool `json:"autoGenerate"`
	Raw *string `json:"raw,omitempty"`
}

type _Excerpt Excerpt

// NewExcerpt instantiates a new Excerpt object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExcerpt(autoGenerate bool) *Excerpt {
	this := Excerpt{}
	this.AutoGenerate = autoGenerate
	return &this
}

// NewExcerptWithDefaults instantiates a new Excerpt object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExcerptWithDefaults() *Excerpt {
	this := Excerpt{}
	var autoGenerate bool = true
	this.AutoGenerate = autoGenerate
	return &this
}

// GetAutoGenerate returns the AutoGenerate field value
func (o *Excerpt) GetAutoGenerate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AutoGenerate
}

// GetAutoGenerateOk returns a tuple with the AutoGenerate field value
// and a boolean to check if the value has been set.
func (o *Excerpt) GetAutoGenerateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AutoGenerate, true
}

// SetAutoGenerate sets field value
func (o *Excerpt) SetAutoGenerate(v bool) {
	o.AutoGenerate = v
}

// GetRaw returns the Raw field value if set, zero value otherwise.
func (o *Excerpt) GetRaw() string {
	if o == nil || IsNil(o.Raw) {
		var ret string
		return ret
	}
	return *o.Raw
}

// GetRawOk returns a tuple with the Raw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Excerpt) GetRawOk() (*string, bool) {
	if o == nil || IsNil(o.Raw) {
		return nil, false
	}
	return o.Raw, true
}

// HasRaw returns a boolean if a field has been set.
func (o *Excerpt) HasRaw() bool {
	if o != nil && !IsNil(o.Raw) {
		return true
	}

	return false
}

// SetRaw gets a reference to the given string and assigns it to the Raw field.
func (o *Excerpt) SetRaw(v string) {
	o.Raw = &v
}

func (o Excerpt) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Excerpt) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["autoGenerate"] = o.AutoGenerate
	if !IsNil(o.Raw) {
		toSerialize["raw"] = o.Raw
	}
	return toSerialize, nil
}

func (o *Excerpt) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"autoGenerate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExcerpt := _Excerpt{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExcerpt)

	if err != nil {
		return err
	}

	*o = Excerpt(varExcerpt)

	return err
}

type NullableExcerpt struct {
	value *Excerpt
	isSet bool
}

func (v NullableExcerpt) Get() *Excerpt {
	return v.value
}

func (v *NullableExcerpt) Set(val *Excerpt) {
	v.value = val
	v.isSet = true
}

func (v NullableExcerpt) IsSet() bool {
	return v.isSet
}

func (v *NullableExcerpt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExcerpt(val *Excerpt) *NullableExcerpt {
	return &NullableExcerpt{value: val, isSet: true}
}

func (v NullableExcerpt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExcerpt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


