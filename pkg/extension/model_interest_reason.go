/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InterestReason type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InterestReason{}

// InterestReason The reason to be interested in
type InterestReason struct {
	// The expression to be interested in
	Expression *string `json:"expression,omitempty"`
	// The name of the reason definition to be interested in
	ReasonType string `json:"reasonType"`
	Subject InterestReasonSubject `json:"subject"`
}

type _InterestReason InterestReason

// NewInterestReason instantiates a new InterestReason object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterestReason(reasonType string, subject InterestReasonSubject) *InterestReason {
	this := InterestReason{}
	this.ReasonType = reasonType
	this.Subject = subject
	return &this
}

// NewInterestReasonWithDefaults instantiates a new InterestReason object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterestReasonWithDefaults() *InterestReason {
	this := InterestReason{}
	return &this
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *InterestReason) GetExpression() string {
	if o == nil || IsNil(o.Expression) {
		var ret string
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterestReason) GetExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.Expression) {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *InterestReason) HasExpression() bool {
	if o != nil && !IsNil(o.Expression) {
		return true
	}

	return false
}

// SetExpression gets a reference to the given string and assigns it to the Expression field.
func (o *InterestReason) SetExpression(v string) {
	o.Expression = &v
}

// GetReasonType returns the ReasonType field value
func (o *InterestReason) GetReasonType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReasonType
}

// GetReasonTypeOk returns a tuple with the ReasonType field value
// and a boolean to check if the value has been set.
func (o *InterestReason) GetReasonTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReasonType, true
}

// SetReasonType sets field value
func (o *InterestReason) SetReasonType(v string) {
	o.ReasonType = v
}

// GetSubject returns the Subject field value
func (o *InterestReason) GetSubject() InterestReasonSubject {
	if o == nil {
		var ret InterestReasonSubject
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *InterestReason) GetSubjectOk() (*InterestReasonSubject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *InterestReason) SetSubject(v InterestReasonSubject) {
	o.Subject = v
}

func (o InterestReason) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InterestReason) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Expression) {
		toSerialize["expression"] = o.Expression
	}
	toSerialize["reasonType"] = o.ReasonType
	toSerialize["subject"] = o.Subject
	return toSerialize, nil
}

func (o *InterestReason) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"reasonType",
		"subject",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInterestReason := _InterestReason{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInterestReason)

	if err != nil {
		return err
	}

	*o = InterestReason(varInterestReason)

	return err
}

type NullableInterestReason struct {
	value *InterestReason
	isSet bool
}

func (v NullableInterestReason) Get() *InterestReason {
	return v.value
}

func (v *NullableInterestReason) Set(val *InterestReason) {
	v.value = val
	v.isSet = true
}

func (v NullableInterestReason) IsSet() bool {
	return v.isSet
}

func (v *NullableInterestReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterestReason(val *InterestReason) *NullableInterestReason {
	return &NullableInterestReason{value: val, isSet: true}
}

func (v NullableInterestReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterestReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


