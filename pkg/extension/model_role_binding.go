/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RoleBinding type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleBinding{}

// RoleBinding struct for RoleBinding
type RoleBinding struct {
	ApiVersion string `json:"apiVersion"`
	Kind string `json:"kind"`
	Metadata Metadata `json:"metadata"`
	RoleRef *RoleRef `json:"roleRef,omitempty"`
	Subjects []Subject `json:"subjects,omitempty"`
}

type _RoleBinding RoleBinding

// NewRoleBinding instantiates a new RoleBinding object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleBinding(apiVersion string, kind string, metadata Metadata) *RoleBinding {
	this := RoleBinding{}
	this.ApiVersion = apiVersion
	this.Kind = kind
	this.Metadata = metadata
	return &this
}

// NewRoleBindingWithDefaults instantiates a new RoleBinding object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleBindingWithDefaults() *RoleBinding {
	this := RoleBinding{}
	return &this
}

// GetApiVersion returns the ApiVersion field value
func (o *RoleBinding) GetApiVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value
// and a boolean to check if the value has been set.
func (o *RoleBinding) GetApiVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiVersion, true
}

// SetApiVersion sets field value
func (o *RoleBinding) SetApiVersion(v string) {
	o.ApiVersion = v
}

// GetKind returns the Kind field value
func (o *RoleBinding) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *RoleBinding) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *RoleBinding) SetKind(v string) {
	o.Kind = v
}

// GetMetadata returns the Metadata field value
func (o *RoleBinding) GetMetadata() Metadata {
	if o == nil {
		var ret Metadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *RoleBinding) GetMetadataOk() (*Metadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *RoleBinding) SetMetadata(v Metadata) {
	o.Metadata = v
}

// GetRoleRef returns the RoleRef field value if set, zero value otherwise.
func (o *RoleBinding) GetRoleRef() RoleRef {
	if o == nil || IsNil(o.RoleRef) {
		var ret RoleRef
		return ret
	}
	return *o.RoleRef
}

// GetRoleRefOk returns a tuple with the RoleRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleBinding) GetRoleRefOk() (*RoleRef, bool) {
	if o == nil || IsNil(o.RoleRef) {
		return nil, false
	}
	return o.RoleRef, true
}

// HasRoleRef returns a boolean if a field has been set.
func (o *RoleBinding) HasRoleRef() bool {
	if o != nil && !IsNil(o.RoleRef) {
		return true
	}

	return false
}

// SetRoleRef gets a reference to the given RoleRef and assigns it to the RoleRef field.
func (o *RoleBinding) SetRoleRef(v RoleRef) {
	o.RoleRef = &v
}

// GetSubjects returns the Subjects field value if set, zero value otherwise.
func (o *RoleBinding) GetSubjects() []Subject {
	if o == nil || IsNil(o.Subjects) {
		var ret []Subject
		return ret
	}
	return o.Subjects
}

// GetSubjectsOk returns a tuple with the Subjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleBinding) GetSubjectsOk() ([]Subject, bool) {
	if o == nil || IsNil(o.Subjects) {
		return nil, false
	}
	return o.Subjects, true
}

// HasSubjects returns a boolean if a field has been set.
func (o *RoleBinding) HasSubjects() bool {
	if o != nil && !IsNil(o.Subjects) {
		return true
	}

	return false
}

// SetSubjects gets a reference to the given []Subject and assigns it to the Subjects field.
func (o *RoleBinding) SetSubjects(v []Subject) {
	o.Subjects = v
}

func (o RoleBinding) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleBinding) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["apiVersion"] = o.ApiVersion
	toSerialize["kind"] = o.Kind
	toSerialize["metadata"] = o.Metadata
	if !IsNil(o.RoleRef) {
		toSerialize["roleRef"] = o.RoleRef
	}
	if !IsNil(o.Subjects) {
		toSerialize["subjects"] = o.Subjects
	}
	return toSerialize, nil
}

func (o *RoleBinding) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"apiVersion",
		"kind",
		"metadata",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRoleBinding := _RoleBinding{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRoleBinding)

	if err != nil {
		return err
	}

	*o = RoleBinding(varRoleBinding)

	return err
}

type NullableRoleBinding struct {
	value *RoleBinding
	isSet bool
}

func (v NullableRoleBinding) Get() *RoleBinding {
	return v.value
}

func (v *NullableRoleBinding) Set(val *RoleBinding) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleBinding) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleBinding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleBinding(val *RoleBinding) *NullableRoleBinding {
	return &NullableRoleBinding{value: val, isSet: true}
}

func (v NullableRoleBinding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleBinding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


