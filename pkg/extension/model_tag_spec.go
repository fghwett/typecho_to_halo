/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TagSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TagSpec{}

// TagSpec struct for TagSpec
type TagSpec struct {
	Color *string `json:"color,omitempty" validate:"regexp=^#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$"`
	Cover *string `json:"cover,omitempty"`
	DisplayName string `json:"displayName"`
	Slug string `json:"slug"`
}

type _TagSpec TagSpec

// NewTagSpec instantiates a new TagSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagSpec(displayName string, slug string) *TagSpec {
	this := TagSpec{}
	this.DisplayName = displayName
	this.Slug = slug
	return &this
}

// NewTagSpecWithDefaults instantiates a new TagSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagSpecWithDefaults() *TagSpec {
	this := TagSpec{}
	return &this
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *TagSpec) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagSpec) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *TagSpec) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *TagSpec) SetColor(v string) {
	o.Color = &v
}

// GetCover returns the Cover field value if set, zero value otherwise.
func (o *TagSpec) GetCover() string {
	if o == nil || IsNil(o.Cover) {
		var ret string
		return ret
	}
	return *o.Cover
}

// GetCoverOk returns a tuple with the Cover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagSpec) GetCoverOk() (*string, bool) {
	if o == nil || IsNil(o.Cover) {
		return nil, false
	}
	return o.Cover, true
}

// HasCover returns a boolean if a field has been set.
func (o *TagSpec) HasCover() bool {
	if o != nil && !IsNil(o.Cover) {
		return true
	}

	return false
}

// SetCover gets a reference to the given string and assigns it to the Cover field.
func (o *TagSpec) SetCover(v string) {
	o.Cover = &v
}

// GetDisplayName returns the DisplayName field value
func (o *TagSpec) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *TagSpec) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *TagSpec) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetSlug returns the Slug field value
func (o *TagSpec) GetSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slug
}

// GetSlugOk returns a tuple with the Slug field value
// and a boolean to check if the value has been set.
func (o *TagSpec) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slug, true
}

// SetSlug sets field value
func (o *TagSpec) SetSlug(v string) {
	o.Slug = v
}

func (o TagSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TagSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !IsNil(o.Cover) {
		toSerialize["cover"] = o.Cover
	}
	toSerialize["displayName"] = o.DisplayName
	toSerialize["slug"] = o.Slug
	return toSerialize, nil
}

func (o *TagSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"displayName",
		"slug",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTagSpec := _TagSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTagSpec)

	if err != nil {
		return err
	}

	*o = TagSpec(varTagSpec)

	return err
}

type NullableTagSpec struct {
	value *TagSpec
	isSet bool
}

func (v NullableTagSpec) Get() *TagSpec {
	return v.value
}

func (v *NullableTagSpec) Set(val *TagSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableTagSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableTagSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagSpec(val *TagSpec) *NullableTagSpec {
	return &NullableTagSpec{value: val, isSet: true}
}

func (v NullableTagSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


