/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AnnotationSettingSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnnotationSettingSpec{}

// AnnotationSettingSpec struct for AnnotationSettingSpec
type AnnotationSettingSpec struct {
	FormSchema []map[string]interface{} `json:"formSchema"`
	TargetRef GroupKind `json:"targetRef"`
}

type _AnnotationSettingSpec AnnotationSettingSpec

// NewAnnotationSettingSpec instantiates a new AnnotationSettingSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnnotationSettingSpec(formSchema []map[string]interface{}, targetRef GroupKind) *AnnotationSettingSpec {
	this := AnnotationSettingSpec{}
	this.FormSchema = formSchema
	this.TargetRef = targetRef
	return &this
}

// NewAnnotationSettingSpecWithDefaults instantiates a new AnnotationSettingSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnnotationSettingSpecWithDefaults() *AnnotationSettingSpec {
	this := AnnotationSettingSpec{}
	return &this
}

// GetFormSchema returns the FormSchema field value
func (o *AnnotationSettingSpec) GetFormSchema() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.FormSchema
}

// GetFormSchemaOk returns a tuple with the FormSchema field value
// and a boolean to check if the value has been set.
func (o *AnnotationSettingSpec) GetFormSchemaOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.FormSchema, true
}

// SetFormSchema sets field value
func (o *AnnotationSettingSpec) SetFormSchema(v []map[string]interface{}) {
	o.FormSchema = v
}

// GetTargetRef returns the TargetRef field value
func (o *AnnotationSettingSpec) GetTargetRef() GroupKind {
	if o == nil {
		var ret GroupKind
		return ret
	}

	return o.TargetRef
}

// GetTargetRefOk returns a tuple with the TargetRef field value
// and a boolean to check if the value has been set.
func (o *AnnotationSettingSpec) GetTargetRefOk() (*GroupKind, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetRef, true
}

// SetTargetRef sets field value
func (o *AnnotationSettingSpec) SetTargetRef(v GroupKind) {
	o.TargetRef = v
}

func (o AnnotationSettingSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnnotationSettingSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["formSchema"] = o.FormSchema
	toSerialize["targetRef"] = o.TargetRef
	return toSerialize, nil
}

func (o *AnnotationSettingSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"formSchema",
		"targetRef",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAnnotationSettingSpec := _AnnotationSettingSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAnnotationSettingSpec)

	if err != nil {
		return err
	}

	*o = AnnotationSettingSpec(varAnnotationSettingSpec)

	return err
}

type NullableAnnotationSettingSpec struct {
	value *AnnotationSettingSpec
	isSet bool
}

func (v NullableAnnotationSettingSpec) Get() *AnnotationSettingSpec {
	return v.value
}

func (v *NullableAnnotationSettingSpec) Set(val *AnnotationSettingSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableAnnotationSettingSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableAnnotationSettingSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnnotationSettingSpec(val *AnnotationSettingSpec) *NullableAnnotationSettingSpec {
	return &NullableAnnotationSettingSpec{value: val, isSet: true}
}

func (v NullableAnnotationSettingSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnnotationSettingSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


