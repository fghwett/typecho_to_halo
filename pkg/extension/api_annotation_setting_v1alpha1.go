/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type AnnotationSettingV1alpha1API interface {

	/*
	CreateAnnotationSetting Method for CreateAnnotationSetting

	Create AnnotationSetting

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateAnnotationSettingRequest
	*/
	CreateAnnotationSetting(ctx context.Context) ApiCreateAnnotationSettingRequest

	// CreateAnnotationSettingExecute executes the request
	//  @return AnnotationSetting
	CreateAnnotationSettingExecute(r ApiCreateAnnotationSettingRequest) (*AnnotationSetting, *http.Response, error)

	/*
	DeleteAnnotationSetting Method for DeleteAnnotationSetting

	Delete AnnotationSetting

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of annotationsetting
	@return ApiDeleteAnnotationSettingRequest
	*/
	DeleteAnnotationSetting(ctx context.Context, name string) ApiDeleteAnnotationSettingRequest

	// DeleteAnnotationSettingExecute executes the request
	DeleteAnnotationSettingExecute(r ApiDeleteAnnotationSettingRequest) (*http.Response, error)

	/*
	GetAnnotationSetting Method for GetAnnotationSetting

	Get AnnotationSetting

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of annotationsetting
	@return ApiGetAnnotationSettingRequest
	*/
	GetAnnotationSetting(ctx context.Context, name string) ApiGetAnnotationSettingRequest

	// GetAnnotationSettingExecute executes the request
	//  @return AnnotationSetting
	GetAnnotationSettingExecute(r ApiGetAnnotationSettingRequest) (*AnnotationSetting, *http.Response, error)

	/*
	ListAnnotationSetting Method for ListAnnotationSetting

	List AnnotationSetting

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListAnnotationSettingRequest
	*/
	ListAnnotationSetting(ctx context.Context) ApiListAnnotationSettingRequest

	// ListAnnotationSettingExecute executes the request
	//  @return AnnotationSettingList
	ListAnnotationSettingExecute(r ApiListAnnotationSettingRequest) (*AnnotationSettingList, *http.Response, error)

	/*
	PatchAnnotationSetting Method for PatchAnnotationSetting

	Patch AnnotationSetting

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of annotationsetting
	@return ApiPatchAnnotationSettingRequest
	*/
	PatchAnnotationSetting(ctx context.Context, name string) ApiPatchAnnotationSettingRequest

	// PatchAnnotationSettingExecute executes the request
	//  @return AnnotationSetting
	PatchAnnotationSettingExecute(r ApiPatchAnnotationSettingRequest) (*AnnotationSetting, *http.Response, error)

	/*
	UpdateAnnotationSetting Method for UpdateAnnotationSetting

	Update AnnotationSetting

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of annotationsetting
	@return ApiUpdateAnnotationSettingRequest
	*/
	UpdateAnnotationSetting(ctx context.Context, name string) ApiUpdateAnnotationSettingRequest

	// UpdateAnnotationSettingExecute executes the request
	//  @return AnnotationSetting
	UpdateAnnotationSettingExecute(r ApiUpdateAnnotationSettingRequest) (*AnnotationSetting, *http.Response, error)
}

// AnnotationSettingV1alpha1APIService AnnotationSettingV1alpha1API service
type AnnotationSettingV1alpha1APIService service

type ApiCreateAnnotationSettingRequest struct {
	ctx context.Context
	ApiService AnnotationSettingV1alpha1API
	annotationSetting *AnnotationSetting
}

// Fresh annotationsetting
func (r ApiCreateAnnotationSettingRequest) AnnotationSetting(annotationSetting AnnotationSetting) ApiCreateAnnotationSettingRequest {
	r.annotationSetting = &annotationSetting
	return r
}

func (r ApiCreateAnnotationSettingRequest) Execute() (*AnnotationSetting, *http.Response, error) {
	return r.ApiService.CreateAnnotationSettingExecute(r)
}

/*
CreateAnnotationSetting Method for CreateAnnotationSetting

Create AnnotationSetting

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateAnnotationSettingRequest
*/
func (a *AnnotationSettingV1alpha1APIService) CreateAnnotationSetting(ctx context.Context) ApiCreateAnnotationSettingRequest {
	return ApiCreateAnnotationSettingRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AnnotationSetting
func (a *AnnotationSettingV1alpha1APIService) CreateAnnotationSettingExecute(r ApiCreateAnnotationSettingRequest) (*AnnotationSetting, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AnnotationSetting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnnotationSettingV1alpha1APIService.CreateAnnotationSetting")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1alpha1/annotationsettings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.annotationSetting
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteAnnotationSettingRequest struct {
	ctx context.Context
	ApiService AnnotationSettingV1alpha1API
	name string
}

func (r ApiDeleteAnnotationSettingRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteAnnotationSettingExecute(r)
}

/*
DeleteAnnotationSetting Method for DeleteAnnotationSetting

Delete AnnotationSetting

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of annotationsetting
 @return ApiDeleteAnnotationSettingRequest
*/
func (a *AnnotationSettingV1alpha1APIService) DeleteAnnotationSetting(ctx context.Context, name string) ApiDeleteAnnotationSettingRequest {
	return ApiDeleteAnnotationSettingRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
func (a *AnnotationSettingV1alpha1APIService) DeleteAnnotationSettingExecute(r ApiDeleteAnnotationSettingRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnnotationSettingV1alpha1APIService.DeleteAnnotationSetting")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1alpha1/annotationsettings/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAnnotationSettingRequest struct {
	ctx context.Context
	ApiService AnnotationSettingV1alpha1API
	name string
}

func (r ApiGetAnnotationSettingRequest) Execute() (*AnnotationSetting, *http.Response, error) {
	return r.ApiService.GetAnnotationSettingExecute(r)
}

/*
GetAnnotationSetting Method for GetAnnotationSetting

Get AnnotationSetting

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of annotationsetting
 @return ApiGetAnnotationSettingRequest
*/
func (a *AnnotationSettingV1alpha1APIService) GetAnnotationSetting(ctx context.Context, name string) ApiGetAnnotationSettingRequest {
	return ApiGetAnnotationSettingRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return AnnotationSetting
func (a *AnnotationSettingV1alpha1APIService) GetAnnotationSettingExecute(r ApiGetAnnotationSettingRequest) (*AnnotationSetting, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AnnotationSetting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnnotationSettingV1alpha1APIService.GetAnnotationSetting")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1alpha1/annotationsettings/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListAnnotationSettingRequest struct {
	ctx context.Context
	ApiService AnnotationSettingV1alpha1API
	page *int32
	size *int32
	labelSelector *[]string
	fieldSelector *[]string
	sort *[]string
}

// Page number. Default is 0.
func (r ApiListAnnotationSettingRequest) Page(page int32) ApiListAnnotationSettingRequest {
	r.page = &page
	return r
}

// Size number. Default is 0.
func (r ApiListAnnotationSettingRequest) Size(size int32) ApiListAnnotationSettingRequest {
	r.size = &size
	return r
}

// Label selector. e.g.: hidden!&#x3D;true
func (r ApiListAnnotationSettingRequest) LabelSelector(labelSelector []string) ApiListAnnotationSettingRequest {
	r.labelSelector = &labelSelector
	return r
}

// Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
func (r ApiListAnnotationSettingRequest) FieldSelector(fieldSelector []string) ApiListAnnotationSettingRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListAnnotationSettingRequest) Sort(sort []string) ApiListAnnotationSettingRequest {
	r.sort = &sort
	return r
}

func (r ApiListAnnotationSettingRequest) Execute() (*AnnotationSettingList, *http.Response, error) {
	return r.ApiService.ListAnnotationSettingExecute(r)
}

/*
ListAnnotationSetting Method for ListAnnotationSetting

List AnnotationSetting

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListAnnotationSettingRequest
*/
func (a *AnnotationSettingV1alpha1APIService) ListAnnotationSetting(ctx context.Context) ApiListAnnotationSettingRequest {
	return ApiListAnnotationSettingRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AnnotationSettingList
func (a *AnnotationSettingV1alpha1APIService) ListAnnotationSettingExecute(r ApiListAnnotationSettingRequest) (*AnnotationSettingList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AnnotationSettingList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnnotationSettingV1alpha1APIService.ListAnnotationSetting")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1alpha1/annotationsettings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.labelSelector != nil {
		t := *r.labelSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", t, "form", "multi")
		}
	}
	if r.fieldSelector != nil {
		t := *r.fieldSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", t, "form", "multi")
		}
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchAnnotationSettingRequest struct {
	ctx context.Context
	ApiService AnnotationSettingV1alpha1API
	name string
	jsonPatchInner *[]JsonPatchInner
}

func (r ApiPatchAnnotationSettingRequest) JsonPatchInner(jsonPatchInner []JsonPatchInner) ApiPatchAnnotationSettingRequest {
	r.jsonPatchInner = &jsonPatchInner
	return r
}

func (r ApiPatchAnnotationSettingRequest) Execute() (*AnnotationSetting, *http.Response, error) {
	return r.ApiService.PatchAnnotationSettingExecute(r)
}

/*
PatchAnnotationSetting Method for PatchAnnotationSetting

Patch AnnotationSetting

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of annotationsetting
 @return ApiPatchAnnotationSettingRequest
*/
func (a *AnnotationSettingV1alpha1APIService) PatchAnnotationSetting(ctx context.Context, name string) ApiPatchAnnotationSettingRequest {
	return ApiPatchAnnotationSettingRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return AnnotationSetting
func (a *AnnotationSettingV1alpha1APIService) PatchAnnotationSettingExecute(r ApiPatchAnnotationSettingRequest) (*AnnotationSetting, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AnnotationSetting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnnotationSettingV1alpha1APIService.PatchAnnotationSetting")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1alpha1/annotationsettings/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jsonPatchInner
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateAnnotationSettingRequest struct {
	ctx context.Context
	ApiService AnnotationSettingV1alpha1API
	name string
	annotationSetting *AnnotationSetting
}

// Updated annotationsetting
func (r ApiUpdateAnnotationSettingRequest) AnnotationSetting(annotationSetting AnnotationSetting) ApiUpdateAnnotationSettingRequest {
	r.annotationSetting = &annotationSetting
	return r
}

func (r ApiUpdateAnnotationSettingRequest) Execute() (*AnnotationSetting, *http.Response, error) {
	return r.ApiService.UpdateAnnotationSettingExecute(r)
}

/*
UpdateAnnotationSetting Method for UpdateAnnotationSetting

Update AnnotationSetting

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of annotationsetting
 @return ApiUpdateAnnotationSettingRequest
*/
func (a *AnnotationSettingV1alpha1APIService) UpdateAnnotationSetting(ctx context.Context, name string) ApiUpdateAnnotationSettingRequest {
	return ApiUpdateAnnotationSettingRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return AnnotationSetting
func (a *AnnotationSettingV1alpha1APIService) UpdateAnnotationSettingExecute(r ApiUpdateAnnotationSettingRequest) (*AnnotationSetting, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AnnotationSetting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnnotationSettingV1alpha1APIService.UpdateAnnotationSetting")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1alpha1/annotationsettings/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.annotationSetting
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
