/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type RememberMeTokenV1alpha1API interface {

	/*
	CreateRememberMeToken Method for CreateRememberMeToken

	Create RememberMeToken

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateRememberMeTokenRequest
	*/
	CreateRememberMeToken(ctx context.Context) ApiCreateRememberMeTokenRequest

	// CreateRememberMeTokenExecute executes the request
	//  @return RememberMeToken
	CreateRememberMeTokenExecute(r ApiCreateRememberMeTokenRequest) (*RememberMeToken, *http.Response, error)

	/*
	DeleteRememberMeToken Method for DeleteRememberMeToken

	Delete RememberMeToken

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of remembermetoken
	@return ApiDeleteRememberMeTokenRequest
	*/
	DeleteRememberMeToken(ctx context.Context, name string) ApiDeleteRememberMeTokenRequest

	// DeleteRememberMeTokenExecute executes the request
	DeleteRememberMeTokenExecute(r ApiDeleteRememberMeTokenRequest) (*http.Response, error)

	/*
	GetRememberMeToken Method for GetRememberMeToken

	Get RememberMeToken

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of remembermetoken
	@return ApiGetRememberMeTokenRequest
	*/
	GetRememberMeToken(ctx context.Context, name string) ApiGetRememberMeTokenRequest

	// GetRememberMeTokenExecute executes the request
	//  @return RememberMeToken
	GetRememberMeTokenExecute(r ApiGetRememberMeTokenRequest) (*RememberMeToken, *http.Response, error)

	/*
	ListRememberMeToken Method for ListRememberMeToken

	List RememberMeToken

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListRememberMeTokenRequest
	*/
	ListRememberMeToken(ctx context.Context) ApiListRememberMeTokenRequest

	// ListRememberMeTokenExecute executes the request
	//  @return RememberMeTokenList
	ListRememberMeTokenExecute(r ApiListRememberMeTokenRequest) (*RememberMeTokenList, *http.Response, error)

	/*
	PatchRememberMeToken Method for PatchRememberMeToken

	Patch RememberMeToken

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of remembermetoken
	@return ApiPatchRememberMeTokenRequest
	*/
	PatchRememberMeToken(ctx context.Context, name string) ApiPatchRememberMeTokenRequest

	// PatchRememberMeTokenExecute executes the request
	//  @return RememberMeToken
	PatchRememberMeTokenExecute(r ApiPatchRememberMeTokenRequest) (*RememberMeToken, *http.Response, error)

	/*
	UpdateRememberMeToken Method for UpdateRememberMeToken

	Update RememberMeToken

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of remembermetoken
	@return ApiUpdateRememberMeTokenRequest
	*/
	UpdateRememberMeToken(ctx context.Context, name string) ApiUpdateRememberMeTokenRequest

	// UpdateRememberMeTokenExecute executes the request
	//  @return RememberMeToken
	UpdateRememberMeTokenExecute(r ApiUpdateRememberMeTokenRequest) (*RememberMeToken, *http.Response, error)
}

// RememberMeTokenV1alpha1APIService RememberMeTokenV1alpha1API service
type RememberMeTokenV1alpha1APIService service

type ApiCreateRememberMeTokenRequest struct {
	ctx context.Context
	ApiService RememberMeTokenV1alpha1API
	rememberMeToken *RememberMeToken
}

// Fresh remembermetoken
func (r ApiCreateRememberMeTokenRequest) RememberMeToken(rememberMeToken RememberMeToken) ApiCreateRememberMeTokenRequest {
	r.rememberMeToken = &rememberMeToken
	return r
}

func (r ApiCreateRememberMeTokenRequest) Execute() (*RememberMeToken, *http.Response, error) {
	return r.ApiService.CreateRememberMeTokenExecute(r)
}

/*
CreateRememberMeToken Method for CreateRememberMeToken

Create RememberMeToken

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateRememberMeTokenRequest
*/
func (a *RememberMeTokenV1alpha1APIService) CreateRememberMeToken(ctx context.Context) ApiCreateRememberMeTokenRequest {
	return ApiCreateRememberMeTokenRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RememberMeToken
func (a *RememberMeTokenV1alpha1APIService) CreateRememberMeTokenExecute(r ApiCreateRememberMeTokenRequest) (*RememberMeToken, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RememberMeToken
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RememberMeTokenV1alpha1APIService.CreateRememberMeToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/security.halo.run/v1alpha1/remembermetokens"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rememberMeToken
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteRememberMeTokenRequest struct {
	ctx context.Context
	ApiService RememberMeTokenV1alpha1API
	name string
}

func (r ApiDeleteRememberMeTokenRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteRememberMeTokenExecute(r)
}

/*
DeleteRememberMeToken Method for DeleteRememberMeToken

Delete RememberMeToken

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of remembermetoken
 @return ApiDeleteRememberMeTokenRequest
*/
func (a *RememberMeTokenV1alpha1APIService) DeleteRememberMeToken(ctx context.Context, name string) ApiDeleteRememberMeTokenRequest {
	return ApiDeleteRememberMeTokenRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
func (a *RememberMeTokenV1alpha1APIService) DeleteRememberMeTokenExecute(r ApiDeleteRememberMeTokenRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RememberMeTokenV1alpha1APIService.DeleteRememberMeToken")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/security.halo.run/v1alpha1/remembermetokens/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetRememberMeTokenRequest struct {
	ctx context.Context
	ApiService RememberMeTokenV1alpha1API
	name string
}

func (r ApiGetRememberMeTokenRequest) Execute() (*RememberMeToken, *http.Response, error) {
	return r.ApiService.GetRememberMeTokenExecute(r)
}

/*
GetRememberMeToken Method for GetRememberMeToken

Get RememberMeToken

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of remembermetoken
 @return ApiGetRememberMeTokenRequest
*/
func (a *RememberMeTokenV1alpha1APIService) GetRememberMeToken(ctx context.Context, name string) ApiGetRememberMeTokenRequest {
	return ApiGetRememberMeTokenRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return RememberMeToken
func (a *RememberMeTokenV1alpha1APIService) GetRememberMeTokenExecute(r ApiGetRememberMeTokenRequest) (*RememberMeToken, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RememberMeToken
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RememberMeTokenV1alpha1APIService.GetRememberMeToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/security.halo.run/v1alpha1/remembermetokens/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListRememberMeTokenRequest struct {
	ctx context.Context
	ApiService RememberMeTokenV1alpha1API
	page *int32
	size *int32
	labelSelector *[]string
	fieldSelector *[]string
	sort *[]string
}

// Page number. Default is 0.
func (r ApiListRememberMeTokenRequest) Page(page int32) ApiListRememberMeTokenRequest {
	r.page = &page
	return r
}

// Size number. Default is 0.
func (r ApiListRememberMeTokenRequest) Size(size int32) ApiListRememberMeTokenRequest {
	r.size = &size
	return r
}

// Label selector. e.g.: hidden!&#x3D;true
func (r ApiListRememberMeTokenRequest) LabelSelector(labelSelector []string) ApiListRememberMeTokenRequest {
	r.labelSelector = &labelSelector
	return r
}

// Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
func (r ApiListRememberMeTokenRequest) FieldSelector(fieldSelector []string) ApiListRememberMeTokenRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListRememberMeTokenRequest) Sort(sort []string) ApiListRememberMeTokenRequest {
	r.sort = &sort
	return r
}

func (r ApiListRememberMeTokenRequest) Execute() (*RememberMeTokenList, *http.Response, error) {
	return r.ApiService.ListRememberMeTokenExecute(r)
}

/*
ListRememberMeToken Method for ListRememberMeToken

List RememberMeToken

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListRememberMeTokenRequest
*/
func (a *RememberMeTokenV1alpha1APIService) ListRememberMeToken(ctx context.Context) ApiListRememberMeTokenRequest {
	return ApiListRememberMeTokenRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RememberMeTokenList
func (a *RememberMeTokenV1alpha1APIService) ListRememberMeTokenExecute(r ApiListRememberMeTokenRequest) (*RememberMeTokenList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RememberMeTokenList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RememberMeTokenV1alpha1APIService.ListRememberMeToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/security.halo.run/v1alpha1/remembermetokens"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.labelSelector != nil {
		t := *r.labelSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", t, "form", "multi")
		}
	}
	if r.fieldSelector != nil {
		t := *r.fieldSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", t, "form", "multi")
		}
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchRememberMeTokenRequest struct {
	ctx context.Context
	ApiService RememberMeTokenV1alpha1API
	name string
	jsonPatchInner *[]JsonPatchInner
}

func (r ApiPatchRememberMeTokenRequest) JsonPatchInner(jsonPatchInner []JsonPatchInner) ApiPatchRememberMeTokenRequest {
	r.jsonPatchInner = &jsonPatchInner
	return r
}

func (r ApiPatchRememberMeTokenRequest) Execute() (*RememberMeToken, *http.Response, error) {
	return r.ApiService.PatchRememberMeTokenExecute(r)
}

/*
PatchRememberMeToken Method for PatchRememberMeToken

Patch RememberMeToken

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of remembermetoken
 @return ApiPatchRememberMeTokenRequest
*/
func (a *RememberMeTokenV1alpha1APIService) PatchRememberMeToken(ctx context.Context, name string) ApiPatchRememberMeTokenRequest {
	return ApiPatchRememberMeTokenRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return RememberMeToken
func (a *RememberMeTokenV1alpha1APIService) PatchRememberMeTokenExecute(r ApiPatchRememberMeTokenRequest) (*RememberMeToken, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RememberMeToken
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RememberMeTokenV1alpha1APIService.PatchRememberMeToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/security.halo.run/v1alpha1/remembermetokens/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jsonPatchInner
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateRememberMeTokenRequest struct {
	ctx context.Context
	ApiService RememberMeTokenV1alpha1API
	name string
	rememberMeToken *RememberMeToken
}

// Updated remembermetoken
func (r ApiUpdateRememberMeTokenRequest) RememberMeToken(rememberMeToken RememberMeToken) ApiUpdateRememberMeTokenRequest {
	r.rememberMeToken = &rememberMeToken
	return r
}

func (r ApiUpdateRememberMeTokenRequest) Execute() (*RememberMeToken, *http.Response, error) {
	return r.ApiService.UpdateRememberMeTokenExecute(r)
}

/*
UpdateRememberMeToken Method for UpdateRememberMeToken

Update RememberMeToken

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of remembermetoken
 @return ApiUpdateRememberMeTokenRequest
*/
func (a *RememberMeTokenV1alpha1APIService) UpdateRememberMeToken(ctx context.Context, name string) ApiUpdateRememberMeTokenRequest {
	return ApiUpdateRememberMeTokenRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return RememberMeToken
func (a *RememberMeTokenV1alpha1APIService) UpdateRememberMeTokenExecute(r ApiUpdateRememberMeTokenRequest) (*RememberMeToken, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RememberMeToken
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RememberMeTokenV1alpha1APIService.UpdateRememberMeToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/security.halo.run/v1alpha1/remembermetokens/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rememberMeToken
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
