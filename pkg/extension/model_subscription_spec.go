/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SubscriptionSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionSpec{}

// SubscriptionSpec struct for SubscriptionSpec
type SubscriptionSpec struct {
	// Perhaps users need to unsubscribe and interact without receiving notifications again
	Disabled *bool `json:"disabled,omitempty"`
	Reason InterestReason `json:"reason"`
	Subscriber SubscriptionSubscriber `json:"subscriber"`
	// The token to unsubscribe
	UnsubscribeToken string `json:"unsubscribeToken"`
}

type _SubscriptionSpec SubscriptionSpec

// NewSubscriptionSpec instantiates a new SubscriptionSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionSpec(reason InterestReason, subscriber SubscriptionSubscriber, unsubscribeToken string) *SubscriptionSpec {
	this := SubscriptionSpec{}
	this.Reason = reason
	this.Subscriber = subscriber
	this.UnsubscribeToken = unsubscribeToken
	return &this
}

// NewSubscriptionSpecWithDefaults instantiates a new SubscriptionSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionSpecWithDefaults() *SubscriptionSpec {
	this := SubscriptionSpec{}
	return &this
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *SubscriptionSpec) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionSpec) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *SubscriptionSpec) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *SubscriptionSpec) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetReason returns the Reason field value
func (o *SubscriptionSpec) GetReason() InterestReason {
	if o == nil {
		var ret InterestReason
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *SubscriptionSpec) GetReasonOk() (*InterestReason, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *SubscriptionSpec) SetReason(v InterestReason) {
	o.Reason = v
}

// GetSubscriber returns the Subscriber field value
func (o *SubscriptionSpec) GetSubscriber() SubscriptionSubscriber {
	if o == nil {
		var ret SubscriptionSubscriber
		return ret
	}

	return o.Subscriber
}

// GetSubscriberOk returns a tuple with the Subscriber field value
// and a boolean to check if the value has been set.
func (o *SubscriptionSpec) GetSubscriberOk() (*SubscriptionSubscriber, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subscriber, true
}

// SetSubscriber sets field value
func (o *SubscriptionSpec) SetSubscriber(v SubscriptionSubscriber) {
	o.Subscriber = v
}

// GetUnsubscribeToken returns the UnsubscribeToken field value
func (o *SubscriptionSpec) GetUnsubscribeToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UnsubscribeToken
}

// GetUnsubscribeTokenOk returns a tuple with the UnsubscribeToken field value
// and a boolean to check if the value has been set.
func (o *SubscriptionSpec) GetUnsubscribeTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UnsubscribeToken, true
}

// SetUnsubscribeToken sets field value
func (o *SubscriptionSpec) SetUnsubscribeToken(v string) {
	o.UnsubscribeToken = v
}

func (o SubscriptionSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	toSerialize["reason"] = o.Reason
	toSerialize["subscriber"] = o.Subscriber
	toSerialize["unsubscribeToken"] = o.UnsubscribeToken
	return toSerialize, nil
}

func (o *SubscriptionSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"reason",
		"subscriber",
		"unsubscribeToken",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubscriptionSpec := _SubscriptionSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubscriptionSpec)

	if err != nil {
		return err
	}

	*o = SubscriptionSpec(varSubscriptionSpec)

	return err
}

type NullableSubscriptionSpec struct {
	value *SubscriptionSpec
	isSet bool
}

func (v NullableSubscriptionSpec) Get() *SubscriptionSpec {
	return v.value
}

func (v *NullableSubscriptionSpec) Set(val *SubscriptionSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionSpec(val *SubscriptionSpec) *NullableSubscriptionSpec {
	return &NullableSubscriptionSpec{value: val, isSet: true}
}

func (v NullableSubscriptionSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


