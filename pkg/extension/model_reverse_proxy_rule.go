/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"encoding/json"
)

// checks if the ReverseProxyRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReverseProxyRule{}

// ReverseProxyRule struct for ReverseProxyRule
type ReverseProxyRule struct {
	File *FileReverseProxyProvider `json:"file,omitempty"`
	Path *string `json:"path,omitempty"`
}

// NewReverseProxyRule instantiates a new ReverseProxyRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReverseProxyRule() *ReverseProxyRule {
	this := ReverseProxyRule{}
	return &this
}

// NewReverseProxyRuleWithDefaults instantiates a new ReverseProxyRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReverseProxyRuleWithDefaults() *ReverseProxyRule {
	this := ReverseProxyRule{}
	return &this
}

// GetFile returns the File field value if set, zero value otherwise.
func (o *ReverseProxyRule) GetFile() FileReverseProxyProvider {
	if o == nil || IsNil(o.File) {
		var ret FileReverseProxyProvider
		return ret
	}
	return *o.File
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReverseProxyRule) GetFileOk() (*FileReverseProxyProvider, bool) {
	if o == nil || IsNil(o.File) {
		return nil, false
	}
	return o.File, true
}

// HasFile returns a boolean if a field has been set.
func (o *ReverseProxyRule) HasFile() bool {
	if o != nil && !IsNil(o.File) {
		return true
	}

	return false
}

// SetFile gets a reference to the given FileReverseProxyProvider and assigns it to the File field.
func (o *ReverseProxyRule) SetFile(v FileReverseProxyProvider) {
	o.File = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *ReverseProxyRule) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReverseProxyRule) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *ReverseProxyRule) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *ReverseProxyRule) SetPath(v string) {
	o.Path = &v
}

func (o ReverseProxyRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReverseProxyRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.File) {
		toSerialize["file"] = o.File
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	return toSerialize, nil
}

type NullableReverseProxyRule struct {
	value *ReverseProxyRule
	isSet bool
}

func (v NullableReverseProxyRule) Get() *ReverseProxyRule {
	return v.value
}

func (v *NullableReverseProxyRule) Set(val *ReverseProxyRule) {
	v.value = val
	v.isSet = true
}

func (v NullableReverseProxyRule) IsSet() bool {
	return v.isSet
}

func (v *NullableReverseProxyRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReverseProxyRule(val *ReverseProxyRule) *NullableReverseProxyRule {
	return &NullableReverseProxyRule{value: val, isSet: true}
}

func (v NullableReverseProxyRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReverseProxyRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


