/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PolicySpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicySpec{}

// PolicySpec struct for PolicySpec
type PolicySpec struct {
	// Reference name of ConfigMap extension
	ConfigMapName *string `json:"configMapName,omitempty"`
	// Display name of policy
	DisplayName string `json:"displayName"`
	// Reference name of PolicyTemplate
	TemplateName string `json:"templateName"`
}

type _PolicySpec PolicySpec

// NewPolicySpec instantiates a new PolicySpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicySpec(displayName string, templateName string) *PolicySpec {
	this := PolicySpec{}
	this.DisplayName = displayName
	this.TemplateName = templateName
	return &this
}

// NewPolicySpecWithDefaults instantiates a new PolicySpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicySpecWithDefaults() *PolicySpec {
	this := PolicySpec{}
	return &this
}

// GetConfigMapName returns the ConfigMapName field value if set, zero value otherwise.
func (o *PolicySpec) GetConfigMapName() string {
	if o == nil || IsNil(o.ConfigMapName) {
		var ret string
		return ret
	}
	return *o.ConfigMapName
}

// GetConfigMapNameOk returns a tuple with the ConfigMapName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicySpec) GetConfigMapNameOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigMapName) {
		return nil, false
	}
	return o.ConfigMapName, true
}

// HasConfigMapName returns a boolean if a field has been set.
func (o *PolicySpec) HasConfigMapName() bool {
	if o != nil && !IsNil(o.ConfigMapName) {
		return true
	}

	return false
}

// SetConfigMapName gets a reference to the given string and assigns it to the ConfigMapName field.
func (o *PolicySpec) SetConfigMapName(v string) {
	o.ConfigMapName = &v
}

// GetDisplayName returns the DisplayName field value
func (o *PolicySpec) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *PolicySpec) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *PolicySpec) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetTemplateName returns the TemplateName field value
func (o *PolicySpec) GetTemplateName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TemplateName
}

// GetTemplateNameOk returns a tuple with the TemplateName field value
// and a boolean to check if the value has been set.
func (o *PolicySpec) GetTemplateNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TemplateName, true
}

// SetTemplateName sets field value
func (o *PolicySpec) SetTemplateName(v string) {
	o.TemplateName = v
}

func (o PolicySpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicySpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConfigMapName) {
		toSerialize["configMapName"] = o.ConfigMapName
	}
	toSerialize["displayName"] = o.DisplayName
	toSerialize["templateName"] = o.TemplateName
	return toSerialize, nil
}

func (o *PolicySpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"displayName",
		"templateName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPolicySpec := _PolicySpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPolicySpec)

	if err != nil {
		return err
	}

	*o = PolicySpec(varPolicySpec)

	return err
}

type NullablePolicySpec struct {
	value *PolicySpec
	isSet bool
}

func (v NullablePolicySpec) Get() *PolicySpec {
	return v.value
}

func (v *NullablePolicySpec) Set(val *PolicySpec) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicySpec) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicySpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicySpec(val *PolicySpec) *NullablePolicySpec {
	return &NullablePolicySpec{value: val, isSet: true}
}

func (v NullablePolicySpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicySpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


