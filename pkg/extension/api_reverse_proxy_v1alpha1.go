/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type ReverseProxyV1alpha1API interface {

	/*
	CreateReverseProxy Method for CreateReverseProxy

	Create ReverseProxy

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateReverseProxyRequest
	*/
	CreateReverseProxy(ctx context.Context) ApiCreateReverseProxyRequest

	// CreateReverseProxyExecute executes the request
	//  @return ReverseProxy
	CreateReverseProxyExecute(r ApiCreateReverseProxyRequest) (*ReverseProxy, *http.Response, error)

	/*
	DeleteReverseProxy Method for DeleteReverseProxy

	Delete ReverseProxy

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of reverseproxy
	@return ApiDeleteReverseProxyRequest
	*/
	DeleteReverseProxy(ctx context.Context, name string) ApiDeleteReverseProxyRequest

	// DeleteReverseProxyExecute executes the request
	DeleteReverseProxyExecute(r ApiDeleteReverseProxyRequest) (*http.Response, error)

	/*
	GetReverseProxy Method for GetReverseProxy

	Get ReverseProxy

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of reverseproxy
	@return ApiGetReverseProxyRequest
	*/
	GetReverseProxy(ctx context.Context, name string) ApiGetReverseProxyRequest

	// GetReverseProxyExecute executes the request
	//  @return ReverseProxy
	GetReverseProxyExecute(r ApiGetReverseProxyRequest) (*ReverseProxy, *http.Response, error)

	/*
	ListReverseProxy Method for ListReverseProxy

	List ReverseProxy

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListReverseProxyRequest
	*/
	ListReverseProxy(ctx context.Context) ApiListReverseProxyRequest

	// ListReverseProxyExecute executes the request
	//  @return ReverseProxyList
	ListReverseProxyExecute(r ApiListReverseProxyRequest) (*ReverseProxyList, *http.Response, error)

	/*
	PatchReverseProxy Method for PatchReverseProxy

	Patch ReverseProxy

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of reverseproxy
	@return ApiPatchReverseProxyRequest
	*/
	PatchReverseProxy(ctx context.Context, name string) ApiPatchReverseProxyRequest

	// PatchReverseProxyExecute executes the request
	//  @return ReverseProxy
	PatchReverseProxyExecute(r ApiPatchReverseProxyRequest) (*ReverseProxy, *http.Response, error)

	/*
	UpdateReverseProxy Method for UpdateReverseProxy

	Update ReverseProxy

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of reverseproxy
	@return ApiUpdateReverseProxyRequest
	*/
	UpdateReverseProxy(ctx context.Context, name string) ApiUpdateReverseProxyRequest

	// UpdateReverseProxyExecute executes the request
	//  @return ReverseProxy
	UpdateReverseProxyExecute(r ApiUpdateReverseProxyRequest) (*ReverseProxy, *http.Response, error)
}

// ReverseProxyV1alpha1APIService ReverseProxyV1alpha1API service
type ReverseProxyV1alpha1APIService service

type ApiCreateReverseProxyRequest struct {
	ctx context.Context
	ApiService ReverseProxyV1alpha1API
	reverseProxy *ReverseProxy
}

// Fresh reverseproxy
func (r ApiCreateReverseProxyRequest) ReverseProxy(reverseProxy ReverseProxy) ApiCreateReverseProxyRequest {
	r.reverseProxy = &reverseProxy
	return r
}

func (r ApiCreateReverseProxyRequest) Execute() (*ReverseProxy, *http.Response, error) {
	return r.ApiService.CreateReverseProxyExecute(r)
}

/*
CreateReverseProxy Method for CreateReverseProxy

Create ReverseProxy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateReverseProxyRequest
*/
func (a *ReverseProxyV1alpha1APIService) CreateReverseProxy(ctx context.Context) ApiCreateReverseProxyRequest {
	return ApiCreateReverseProxyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ReverseProxy
func (a *ReverseProxyV1alpha1APIService) CreateReverseProxyExecute(r ApiCreateReverseProxyRequest) (*ReverseProxy, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReverseProxy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReverseProxyV1alpha1APIService.CreateReverseProxy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/plugin.halo.run/v1alpha1/reverseproxies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.reverseProxy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteReverseProxyRequest struct {
	ctx context.Context
	ApiService ReverseProxyV1alpha1API
	name string
}

func (r ApiDeleteReverseProxyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteReverseProxyExecute(r)
}

/*
DeleteReverseProxy Method for DeleteReverseProxy

Delete ReverseProxy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of reverseproxy
 @return ApiDeleteReverseProxyRequest
*/
func (a *ReverseProxyV1alpha1APIService) DeleteReverseProxy(ctx context.Context, name string) ApiDeleteReverseProxyRequest {
	return ApiDeleteReverseProxyRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
func (a *ReverseProxyV1alpha1APIService) DeleteReverseProxyExecute(r ApiDeleteReverseProxyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReverseProxyV1alpha1APIService.DeleteReverseProxy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/plugin.halo.run/v1alpha1/reverseproxies/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetReverseProxyRequest struct {
	ctx context.Context
	ApiService ReverseProxyV1alpha1API
	name string
}

func (r ApiGetReverseProxyRequest) Execute() (*ReverseProxy, *http.Response, error) {
	return r.ApiService.GetReverseProxyExecute(r)
}

/*
GetReverseProxy Method for GetReverseProxy

Get ReverseProxy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of reverseproxy
 @return ApiGetReverseProxyRequest
*/
func (a *ReverseProxyV1alpha1APIService) GetReverseProxy(ctx context.Context, name string) ApiGetReverseProxyRequest {
	return ApiGetReverseProxyRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return ReverseProxy
func (a *ReverseProxyV1alpha1APIService) GetReverseProxyExecute(r ApiGetReverseProxyRequest) (*ReverseProxy, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReverseProxy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReverseProxyV1alpha1APIService.GetReverseProxy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/plugin.halo.run/v1alpha1/reverseproxies/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListReverseProxyRequest struct {
	ctx context.Context
	ApiService ReverseProxyV1alpha1API
	page *int32
	size *int32
	labelSelector *[]string
	fieldSelector *[]string
	sort *[]string
}

// Page number. Default is 0.
func (r ApiListReverseProxyRequest) Page(page int32) ApiListReverseProxyRequest {
	r.page = &page
	return r
}

// Size number. Default is 0.
func (r ApiListReverseProxyRequest) Size(size int32) ApiListReverseProxyRequest {
	r.size = &size
	return r
}

// Label selector. e.g.: hidden!&#x3D;true
func (r ApiListReverseProxyRequest) LabelSelector(labelSelector []string) ApiListReverseProxyRequest {
	r.labelSelector = &labelSelector
	return r
}

// Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
func (r ApiListReverseProxyRequest) FieldSelector(fieldSelector []string) ApiListReverseProxyRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListReverseProxyRequest) Sort(sort []string) ApiListReverseProxyRequest {
	r.sort = &sort
	return r
}

func (r ApiListReverseProxyRequest) Execute() (*ReverseProxyList, *http.Response, error) {
	return r.ApiService.ListReverseProxyExecute(r)
}

/*
ListReverseProxy Method for ListReverseProxy

List ReverseProxy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListReverseProxyRequest
*/
func (a *ReverseProxyV1alpha1APIService) ListReverseProxy(ctx context.Context) ApiListReverseProxyRequest {
	return ApiListReverseProxyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ReverseProxyList
func (a *ReverseProxyV1alpha1APIService) ListReverseProxyExecute(r ApiListReverseProxyRequest) (*ReverseProxyList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReverseProxyList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReverseProxyV1alpha1APIService.ListReverseProxy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/plugin.halo.run/v1alpha1/reverseproxies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.labelSelector != nil {
		t := *r.labelSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", t, "form", "multi")
		}
	}
	if r.fieldSelector != nil {
		t := *r.fieldSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", t, "form", "multi")
		}
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchReverseProxyRequest struct {
	ctx context.Context
	ApiService ReverseProxyV1alpha1API
	name string
	jsonPatchInner *[]JsonPatchInner
}

func (r ApiPatchReverseProxyRequest) JsonPatchInner(jsonPatchInner []JsonPatchInner) ApiPatchReverseProxyRequest {
	r.jsonPatchInner = &jsonPatchInner
	return r
}

func (r ApiPatchReverseProxyRequest) Execute() (*ReverseProxy, *http.Response, error) {
	return r.ApiService.PatchReverseProxyExecute(r)
}

/*
PatchReverseProxy Method for PatchReverseProxy

Patch ReverseProxy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of reverseproxy
 @return ApiPatchReverseProxyRequest
*/
func (a *ReverseProxyV1alpha1APIService) PatchReverseProxy(ctx context.Context, name string) ApiPatchReverseProxyRequest {
	return ApiPatchReverseProxyRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return ReverseProxy
func (a *ReverseProxyV1alpha1APIService) PatchReverseProxyExecute(r ApiPatchReverseProxyRequest) (*ReverseProxy, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReverseProxy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReverseProxyV1alpha1APIService.PatchReverseProxy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/plugin.halo.run/v1alpha1/reverseproxies/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jsonPatchInner
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateReverseProxyRequest struct {
	ctx context.Context
	ApiService ReverseProxyV1alpha1API
	name string
	reverseProxy *ReverseProxy
}

// Updated reverseproxy
func (r ApiUpdateReverseProxyRequest) ReverseProxy(reverseProxy ReverseProxy) ApiUpdateReverseProxyRequest {
	r.reverseProxy = &reverseProxy
	return r
}

func (r ApiUpdateReverseProxyRequest) Execute() (*ReverseProxy, *http.Response, error) {
	return r.ApiService.UpdateReverseProxyExecute(r)
}

/*
UpdateReverseProxy Method for UpdateReverseProxy

Update ReverseProxy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of reverseproxy
 @return ApiUpdateReverseProxyRequest
*/
func (a *ReverseProxyV1alpha1APIService) UpdateReverseProxy(ctx context.Context, name string) ApiUpdateReverseProxyRequest {
	return ApiUpdateReverseProxyRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return ReverseProxy
func (a *ReverseProxyV1alpha1APIService) UpdateReverseProxyExecute(r ApiUpdateReverseProxyRequest) (*ReverseProxy, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReverseProxy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReverseProxyV1alpha1APIService.UpdateReverseProxy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/plugin.halo.run/v1alpha1/reverseproxies/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.reverseProxy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
