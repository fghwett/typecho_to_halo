/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"encoding/json"
)

// checks if the NotificationTemplateSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationTemplateSpec{}

// NotificationTemplateSpec struct for NotificationTemplateSpec
type NotificationTemplateSpec struct {
	ReasonSelector *ReasonSelector `json:"reasonSelector,omitempty"`
	Template *TemplateContent `json:"template,omitempty"`
}

// NewNotificationTemplateSpec instantiates a new NotificationTemplateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationTemplateSpec() *NotificationTemplateSpec {
	this := NotificationTemplateSpec{}
	return &this
}

// NewNotificationTemplateSpecWithDefaults instantiates a new NotificationTemplateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationTemplateSpecWithDefaults() *NotificationTemplateSpec {
	this := NotificationTemplateSpec{}
	return &this
}

// GetReasonSelector returns the ReasonSelector field value if set, zero value otherwise.
func (o *NotificationTemplateSpec) GetReasonSelector() ReasonSelector {
	if o == nil || IsNil(o.ReasonSelector) {
		var ret ReasonSelector
		return ret
	}
	return *o.ReasonSelector
}

// GetReasonSelectorOk returns a tuple with the ReasonSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationTemplateSpec) GetReasonSelectorOk() (*ReasonSelector, bool) {
	if o == nil || IsNil(o.ReasonSelector) {
		return nil, false
	}
	return o.ReasonSelector, true
}

// HasReasonSelector returns a boolean if a field has been set.
func (o *NotificationTemplateSpec) HasReasonSelector() bool {
	if o != nil && !IsNil(o.ReasonSelector) {
		return true
	}

	return false
}

// SetReasonSelector gets a reference to the given ReasonSelector and assigns it to the ReasonSelector field.
func (o *NotificationTemplateSpec) SetReasonSelector(v ReasonSelector) {
	o.ReasonSelector = &v
}

// GetTemplate returns the Template field value if set, zero value otherwise.
func (o *NotificationTemplateSpec) GetTemplate() TemplateContent {
	if o == nil || IsNil(o.Template) {
		var ret TemplateContent
		return ret
	}
	return *o.Template
}

// GetTemplateOk returns a tuple with the Template field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationTemplateSpec) GetTemplateOk() (*TemplateContent, bool) {
	if o == nil || IsNil(o.Template) {
		return nil, false
	}
	return o.Template, true
}

// HasTemplate returns a boolean if a field has been set.
func (o *NotificationTemplateSpec) HasTemplate() bool {
	if o != nil && !IsNil(o.Template) {
		return true
	}

	return false
}

// SetTemplate gets a reference to the given TemplateContent and assigns it to the Template field.
func (o *NotificationTemplateSpec) SetTemplate(v TemplateContent) {
	o.Template = &v
}

func (o NotificationTemplateSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationTemplateSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReasonSelector) {
		toSerialize["reasonSelector"] = o.ReasonSelector
	}
	if !IsNil(o.Template) {
		toSerialize["template"] = o.Template
	}
	return toSerialize, nil
}

type NullableNotificationTemplateSpec struct {
	value *NotificationTemplateSpec
	isSet bool
}

func (v NullableNotificationTemplateSpec) Get() *NotificationTemplateSpec {
	return v.value
}

func (v *NullableNotificationTemplateSpec) Set(val *NotificationTemplateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationTemplateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationTemplateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationTemplateSpec(val *NotificationTemplateSpec) *NullableNotificationTemplateSpec {
	return &NullableNotificationTemplateSpec{value: val, isSet: true}
}

func (v NullableNotificationTemplateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationTemplateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


