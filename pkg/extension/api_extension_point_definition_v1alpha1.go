/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type ExtensionPointDefinitionV1alpha1API interface {

	/*
	CreateExtensionPointDefinition Method for CreateExtensionPointDefinition

	Create ExtensionPointDefinition

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateExtensionPointDefinitionRequest
	*/
	CreateExtensionPointDefinition(ctx context.Context) ApiCreateExtensionPointDefinitionRequest

	// CreateExtensionPointDefinitionExecute executes the request
	//  @return ExtensionPointDefinition
	CreateExtensionPointDefinitionExecute(r ApiCreateExtensionPointDefinitionRequest) (*ExtensionPointDefinition, *http.Response, error)

	/*
	DeleteExtensionPointDefinition Method for DeleteExtensionPointDefinition

	Delete ExtensionPointDefinition

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of extensionpointdefinition
	@return ApiDeleteExtensionPointDefinitionRequest
	*/
	DeleteExtensionPointDefinition(ctx context.Context, name string) ApiDeleteExtensionPointDefinitionRequest

	// DeleteExtensionPointDefinitionExecute executes the request
	DeleteExtensionPointDefinitionExecute(r ApiDeleteExtensionPointDefinitionRequest) (*http.Response, error)

	/*
	GetExtensionPointDefinition Method for GetExtensionPointDefinition

	Get ExtensionPointDefinition

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of extensionpointdefinition
	@return ApiGetExtensionPointDefinitionRequest
	*/
	GetExtensionPointDefinition(ctx context.Context, name string) ApiGetExtensionPointDefinitionRequest

	// GetExtensionPointDefinitionExecute executes the request
	//  @return ExtensionPointDefinition
	GetExtensionPointDefinitionExecute(r ApiGetExtensionPointDefinitionRequest) (*ExtensionPointDefinition, *http.Response, error)

	/*
	ListExtensionPointDefinition Method for ListExtensionPointDefinition

	List ExtensionPointDefinition

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListExtensionPointDefinitionRequest
	*/
	ListExtensionPointDefinition(ctx context.Context) ApiListExtensionPointDefinitionRequest

	// ListExtensionPointDefinitionExecute executes the request
	//  @return ExtensionPointDefinitionList
	ListExtensionPointDefinitionExecute(r ApiListExtensionPointDefinitionRequest) (*ExtensionPointDefinitionList, *http.Response, error)

	/*
	PatchExtensionPointDefinition Method for PatchExtensionPointDefinition

	Patch ExtensionPointDefinition

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of extensionpointdefinition
	@return ApiPatchExtensionPointDefinitionRequest
	*/
	PatchExtensionPointDefinition(ctx context.Context, name string) ApiPatchExtensionPointDefinitionRequest

	// PatchExtensionPointDefinitionExecute executes the request
	//  @return ExtensionPointDefinition
	PatchExtensionPointDefinitionExecute(r ApiPatchExtensionPointDefinitionRequest) (*ExtensionPointDefinition, *http.Response, error)

	/*
	UpdateExtensionPointDefinition Method for UpdateExtensionPointDefinition

	Update ExtensionPointDefinition

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of extensionpointdefinition
	@return ApiUpdateExtensionPointDefinitionRequest
	*/
	UpdateExtensionPointDefinition(ctx context.Context, name string) ApiUpdateExtensionPointDefinitionRequest

	// UpdateExtensionPointDefinitionExecute executes the request
	//  @return ExtensionPointDefinition
	UpdateExtensionPointDefinitionExecute(r ApiUpdateExtensionPointDefinitionRequest) (*ExtensionPointDefinition, *http.Response, error)
}

// ExtensionPointDefinitionV1alpha1APIService ExtensionPointDefinitionV1alpha1API service
type ExtensionPointDefinitionV1alpha1APIService service

type ApiCreateExtensionPointDefinitionRequest struct {
	ctx context.Context
	ApiService ExtensionPointDefinitionV1alpha1API
	extensionPointDefinition *ExtensionPointDefinition
}

// Fresh extensionpointdefinition
func (r ApiCreateExtensionPointDefinitionRequest) ExtensionPointDefinition(extensionPointDefinition ExtensionPointDefinition) ApiCreateExtensionPointDefinitionRequest {
	r.extensionPointDefinition = &extensionPointDefinition
	return r
}

func (r ApiCreateExtensionPointDefinitionRequest) Execute() (*ExtensionPointDefinition, *http.Response, error) {
	return r.ApiService.CreateExtensionPointDefinitionExecute(r)
}

/*
CreateExtensionPointDefinition Method for CreateExtensionPointDefinition

Create ExtensionPointDefinition

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateExtensionPointDefinitionRequest
*/
func (a *ExtensionPointDefinitionV1alpha1APIService) CreateExtensionPointDefinition(ctx context.Context) ApiCreateExtensionPointDefinitionRequest {
	return ApiCreateExtensionPointDefinitionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ExtensionPointDefinition
func (a *ExtensionPointDefinitionV1alpha1APIService) CreateExtensionPointDefinitionExecute(r ApiCreateExtensionPointDefinitionRequest) (*ExtensionPointDefinition, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExtensionPointDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtensionPointDefinitionV1alpha1APIService.CreateExtensionPointDefinition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/plugin.halo.run/v1alpha1/extensionpointdefinitions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.extensionPointDefinition
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteExtensionPointDefinitionRequest struct {
	ctx context.Context
	ApiService ExtensionPointDefinitionV1alpha1API
	name string
}

func (r ApiDeleteExtensionPointDefinitionRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteExtensionPointDefinitionExecute(r)
}

/*
DeleteExtensionPointDefinition Method for DeleteExtensionPointDefinition

Delete ExtensionPointDefinition

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of extensionpointdefinition
 @return ApiDeleteExtensionPointDefinitionRequest
*/
func (a *ExtensionPointDefinitionV1alpha1APIService) DeleteExtensionPointDefinition(ctx context.Context, name string) ApiDeleteExtensionPointDefinitionRequest {
	return ApiDeleteExtensionPointDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
func (a *ExtensionPointDefinitionV1alpha1APIService) DeleteExtensionPointDefinitionExecute(r ApiDeleteExtensionPointDefinitionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtensionPointDefinitionV1alpha1APIService.DeleteExtensionPointDefinition")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/plugin.halo.run/v1alpha1/extensionpointdefinitions/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetExtensionPointDefinitionRequest struct {
	ctx context.Context
	ApiService ExtensionPointDefinitionV1alpha1API
	name string
}

func (r ApiGetExtensionPointDefinitionRequest) Execute() (*ExtensionPointDefinition, *http.Response, error) {
	return r.ApiService.GetExtensionPointDefinitionExecute(r)
}

/*
GetExtensionPointDefinition Method for GetExtensionPointDefinition

Get ExtensionPointDefinition

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of extensionpointdefinition
 @return ApiGetExtensionPointDefinitionRequest
*/
func (a *ExtensionPointDefinitionV1alpha1APIService) GetExtensionPointDefinition(ctx context.Context, name string) ApiGetExtensionPointDefinitionRequest {
	return ApiGetExtensionPointDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return ExtensionPointDefinition
func (a *ExtensionPointDefinitionV1alpha1APIService) GetExtensionPointDefinitionExecute(r ApiGetExtensionPointDefinitionRequest) (*ExtensionPointDefinition, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExtensionPointDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtensionPointDefinitionV1alpha1APIService.GetExtensionPointDefinition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/plugin.halo.run/v1alpha1/extensionpointdefinitions/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListExtensionPointDefinitionRequest struct {
	ctx context.Context
	ApiService ExtensionPointDefinitionV1alpha1API
	page *int32
	size *int32
	labelSelector *[]string
	fieldSelector *[]string
	sort *[]string
}

// Page number. Default is 0.
func (r ApiListExtensionPointDefinitionRequest) Page(page int32) ApiListExtensionPointDefinitionRequest {
	r.page = &page
	return r
}

// Size number. Default is 0.
func (r ApiListExtensionPointDefinitionRequest) Size(size int32) ApiListExtensionPointDefinitionRequest {
	r.size = &size
	return r
}

// Label selector. e.g.: hidden!&#x3D;true
func (r ApiListExtensionPointDefinitionRequest) LabelSelector(labelSelector []string) ApiListExtensionPointDefinitionRequest {
	r.labelSelector = &labelSelector
	return r
}

// Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
func (r ApiListExtensionPointDefinitionRequest) FieldSelector(fieldSelector []string) ApiListExtensionPointDefinitionRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListExtensionPointDefinitionRequest) Sort(sort []string) ApiListExtensionPointDefinitionRequest {
	r.sort = &sort
	return r
}

func (r ApiListExtensionPointDefinitionRequest) Execute() (*ExtensionPointDefinitionList, *http.Response, error) {
	return r.ApiService.ListExtensionPointDefinitionExecute(r)
}

/*
ListExtensionPointDefinition Method for ListExtensionPointDefinition

List ExtensionPointDefinition

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListExtensionPointDefinitionRequest
*/
func (a *ExtensionPointDefinitionV1alpha1APIService) ListExtensionPointDefinition(ctx context.Context) ApiListExtensionPointDefinitionRequest {
	return ApiListExtensionPointDefinitionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ExtensionPointDefinitionList
func (a *ExtensionPointDefinitionV1alpha1APIService) ListExtensionPointDefinitionExecute(r ApiListExtensionPointDefinitionRequest) (*ExtensionPointDefinitionList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExtensionPointDefinitionList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtensionPointDefinitionV1alpha1APIService.ListExtensionPointDefinition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/plugin.halo.run/v1alpha1/extensionpointdefinitions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.labelSelector != nil {
		t := *r.labelSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", t, "form", "multi")
		}
	}
	if r.fieldSelector != nil {
		t := *r.fieldSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", t, "form", "multi")
		}
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchExtensionPointDefinitionRequest struct {
	ctx context.Context
	ApiService ExtensionPointDefinitionV1alpha1API
	name string
	jsonPatchInner *[]JsonPatchInner
}

func (r ApiPatchExtensionPointDefinitionRequest) JsonPatchInner(jsonPatchInner []JsonPatchInner) ApiPatchExtensionPointDefinitionRequest {
	r.jsonPatchInner = &jsonPatchInner
	return r
}

func (r ApiPatchExtensionPointDefinitionRequest) Execute() (*ExtensionPointDefinition, *http.Response, error) {
	return r.ApiService.PatchExtensionPointDefinitionExecute(r)
}

/*
PatchExtensionPointDefinition Method for PatchExtensionPointDefinition

Patch ExtensionPointDefinition

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of extensionpointdefinition
 @return ApiPatchExtensionPointDefinitionRequest
*/
func (a *ExtensionPointDefinitionV1alpha1APIService) PatchExtensionPointDefinition(ctx context.Context, name string) ApiPatchExtensionPointDefinitionRequest {
	return ApiPatchExtensionPointDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return ExtensionPointDefinition
func (a *ExtensionPointDefinitionV1alpha1APIService) PatchExtensionPointDefinitionExecute(r ApiPatchExtensionPointDefinitionRequest) (*ExtensionPointDefinition, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExtensionPointDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtensionPointDefinitionV1alpha1APIService.PatchExtensionPointDefinition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/plugin.halo.run/v1alpha1/extensionpointdefinitions/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jsonPatchInner
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateExtensionPointDefinitionRequest struct {
	ctx context.Context
	ApiService ExtensionPointDefinitionV1alpha1API
	name string
	extensionPointDefinition *ExtensionPointDefinition
}

// Updated extensionpointdefinition
func (r ApiUpdateExtensionPointDefinitionRequest) ExtensionPointDefinition(extensionPointDefinition ExtensionPointDefinition) ApiUpdateExtensionPointDefinitionRequest {
	r.extensionPointDefinition = &extensionPointDefinition
	return r
}

func (r ApiUpdateExtensionPointDefinitionRequest) Execute() (*ExtensionPointDefinition, *http.Response, error) {
	return r.ApiService.UpdateExtensionPointDefinitionExecute(r)
}

/*
UpdateExtensionPointDefinition Method for UpdateExtensionPointDefinition

Update ExtensionPointDefinition

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of extensionpointdefinition
 @return ApiUpdateExtensionPointDefinitionRequest
*/
func (a *ExtensionPointDefinitionV1alpha1APIService) UpdateExtensionPointDefinition(ctx context.Context, name string) ApiUpdateExtensionPointDefinitionRequest {
	return ApiUpdateExtensionPointDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return ExtensionPointDefinition
func (a *ExtensionPointDefinitionV1alpha1APIService) UpdateExtensionPointDefinitionExecute(r ApiUpdateExtensionPointDefinitionRequest) (*ExtensionPointDefinition, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExtensionPointDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtensionPointDefinitionV1alpha1APIService.UpdateExtensionPointDefinition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/plugin.halo.run/v1alpha1/extensionpointdefinitions/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.extensionPointDefinition
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
