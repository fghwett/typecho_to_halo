/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type ReasonTypeV1alpha1API interface {

	/*
	CreateReasonType Method for CreateReasonType

	Create ReasonType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateReasonTypeRequest
	*/
	CreateReasonType(ctx context.Context) ApiCreateReasonTypeRequest

	// CreateReasonTypeExecute executes the request
	//  @return ReasonType
	CreateReasonTypeExecute(r ApiCreateReasonTypeRequest) (*ReasonType, *http.Response, error)

	/*
	DeleteReasonType Method for DeleteReasonType

	Delete ReasonType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of reasontype
	@return ApiDeleteReasonTypeRequest
	*/
	DeleteReasonType(ctx context.Context, name string) ApiDeleteReasonTypeRequest

	// DeleteReasonTypeExecute executes the request
	DeleteReasonTypeExecute(r ApiDeleteReasonTypeRequest) (*http.Response, error)

	/*
	GetReasonType Method for GetReasonType

	Get ReasonType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of reasontype
	@return ApiGetReasonTypeRequest
	*/
	GetReasonType(ctx context.Context, name string) ApiGetReasonTypeRequest

	// GetReasonTypeExecute executes the request
	//  @return ReasonType
	GetReasonTypeExecute(r ApiGetReasonTypeRequest) (*ReasonType, *http.Response, error)

	/*
	ListReasonType Method for ListReasonType

	List ReasonType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListReasonTypeRequest
	*/
	ListReasonType(ctx context.Context) ApiListReasonTypeRequest

	// ListReasonTypeExecute executes the request
	//  @return ReasonTypeList
	ListReasonTypeExecute(r ApiListReasonTypeRequest) (*ReasonTypeList, *http.Response, error)

	/*
	PatchReasonType Method for PatchReasonType

	Patch ReasonType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of reasontype
	@return ApiPatchReasonTypeRequest
	*/
	PatchReasonType(ctx context.Context, name string) ApiPatchReasonTypeRequest

	// PatchReasonTypeExecute executes the request
	//  @return ReasonType
	PatchReasonTypeExecute(r ApiPatchReasonTypeRequest) (*ReasonType, *http.Response, error)

	/*
	UpdateReasonType Method for UpdateReasonType

	Update ReasonType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of reasontype
	@return ApiUpdateReasonTypeRequest
	*/
	UpdateReasonType(ctx context.Context, name string) ApiUpdateReasonTypeRequest

	// UpdateReasonTypeExecute executes the request
	//  @return ReasonType
	UpdateReasonTypeExecute(r ApiUpdateReasonTypeRequest) (*ReasonType, *http.Response, error)
}

// ReasonTypeV1alpha1APIService ReasonTypeV1alpha1API service
type ReasonTypeV1alpha1APIService service

type ApiCreateReasonTypeRequest struct {
	ctx context.Context
	ApiService ReasonTypeV1alpha1API
	reasonType *ReasonType
}

// Fresh reasontype
func (r ApiCreateReasonTypeRequest) ReasonType(reasonType ReasonType) ApiCreateReasonTypeRequest {
	r.reasonType = &reasonType
	return r
}

func (r ApiCreateReasonTypeRequest) Execute() (*ReasonType, *http.Response, error) {
	return r.ApiService.CreateReasonTypeExecute(r)
}

/*
CreateReasonType Method for CreateReasonType

Create ReasonType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateReasonTypeRequest
*/
func (a *ReasonTypeV1alpha1APIService) CreateReasonType(ctx context.Context) ApiCreateReasonTypeRequest {
	return ApiCreateReasonTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ReasonType
func (a *ReasonTypeV1alpha1APIService) CreateReasonTypeExecute(r ApiCreateReasonTypeRequest) (*ReasonType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReasonType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReasonTypeV1alpha1APIService.CreateReasonType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/notification.halo.run/v1alpha1/reasontypes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.reasonType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteReasonTypeRequest struct {
	ctx context.Context
	ApiService ReasonTypeV1alpha1API
	name string
}

func (r ApiDeleteReasonTypeRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteReasonTypeExecute(r)
}

/*
DeleteReasonType Method for DeleteReasonType

Delete ReasonType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of reasontype
 @return ApiDeleteReasonTypeRequest
*/
func (a *ReasonTypeV1alpha1APIService) DeleteReasonType(ctx context.Context, name string) ApiDeleteReasonTypeRequest {
	return ApiDeleteReasonTypeRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
func (a *ReasonTypeV1alpha1APIService) DeleteReasonTypeExecute(r ApiDeleteReasonTypeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReasonTypeV1alpha1APIService.DeleteReasonType")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/notification.halo.run/v1alpha1/reasontypes/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetReasonTypeRequest struct {
	ctx context.Context
	ApiService ReasonTypeV1alpha1API
	name string
}

func (r ApiGetReasonTypeRequest) Execute() (*ReasonType, *http.Response, error) {
	return r.ApiService.GetReasonTypeExecute(r)
}

/*
GetReasonType Method for GetReasonType

Get ReasonType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of reasontype
 @return ApiGetReasonTypeRequest
*/
func (a *ReasonTypeV1alpha1APIService) GetReasonType(ctx context.Context, name string) ApiGetReasonTypeRequest {
	return ApiGetReasonTypeRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return ReasonType
func (a *ReasonTypeV1alpha1APIService) GetReasonTypeExecute(r ApiGetReasonTypeRequest) (*ReasonType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReasonType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReasonTypeV1alpha1APIService.GetReasonType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/notification.halo.run/v1alpha1/reasontypes/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListReasonTypeRequest struct {
	ctx context.Context
	ApiService ReasonTypeV1alpha1API
	page *int32
	size *int32
	labelSelector *[]string
	fieldSelector *[]string
	sort *[]string
}

// Page number. Default is 0.
func (r ApiListReasonTypeRequest) Page(page int32) ApiListReasonTypeRequest {
	r.page = &page
	return r
}

// Size number. Default is 0.
func (r ApiListReasonTypeRequest) Size(size int32) ApiListReasonTypeRequest {
	r.size = &size
	return r
}

// Label selector. e.g.: hidden!&#x3D;true
func (r ApiListReasonTypeRequest) LabelSelector(labelSelector []string) ApiListReasonTypeRequest {
	r.labelSelector = &labelSelector
	return r
}

// Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
func (r ApiListReasonTypeRequest) FieldSelector(fieldSelector []string) ApiListReasonTypeRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListReasonTypeRequest) Sort(sort []string) ApiListReasonTypeRequest {
	r.sort = &sort
	return r
}

func (r ApiListReasonTypeRequest) Execute() (*ReasonTypeList, *http.Response, error) {
	return r.ApiService.ListReasonTypeExecute(r)
}

/*
ListReasonType Method for ListReasonType

List ReasonType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListReasonTypeRequest
*/
func (a *ReasonTypeV1alpha1APIService) ListReasonType(ctx context.Context) ApiListReasonTypeRequest {
	return ApiListReasonTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ReasonTypeList
func (a *ReasonTypeV1alpha1APIService) ListReasonTypeExecute(r ApiListReasonTypeRequest) (*ReasonTypeList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReasonTypeList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReasonTypeV1alpha1APIService.ListReasonType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/notification.halo.run/v1alpha1/reasontypes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.labelSelector != nil {
		t := *r.labelSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", t, "form", "multi")
		}
	}
	if r.fieldSelector != nil {
		t := *r.fieldSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", t, "form", "multi")
		}
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchReasonTypeRequest struct {
	ctx context.Context
	ApiService ReasonTypeV1alpha1API
	name string
	jsonPatchInner *[]JsonPatchInner
}

func (r ApiPatchReasonTypeRequest) JsonPatchInner(jsonPatchInner []JsonPatchInner) ApiPatchReasonTypeRequest {
	r.jsonPatchInner = &jsonPatchInner
	return r
}

func (r ApiPatchReasonTypeRequest) Execute() (*ReasonType, *http.Response, error) {
	return r.ApiService.PatchReasonTypeExecute(r)
}

/*
PatchReasonType Method for PatchReasonType

Patch ReasonType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of reasontype
 @return ApiPatchReasonTypeRequest
*/
func (a *ReasonTypeV1alpha1APIService) PatchReasonType(ctx context.Context, name string) ApiPatchReasonTypeRequest {
	return ApiPatchReasonTypeRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return ReasonType
func (a *ReasonTypeV1alpha1APIService) PatchReasonTypeExecute(r ApiPatchReasonTypeRequest) (*ReasonType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReasonType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReasonTypeV1alpha1APIService.PatchReasonType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/notification.halo.run/v1alpha1/reasontypes/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jsonPatchInner
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateReasonTypeRequest struct {
	ctx context.Context
	ApiService ReasonTypeV1alpha1API
	name string
	reasonType *ReasonType
}

// Updated reasontype
func (r ApiUpdateReasonTypeRequest) ReasonType(reasonType ReasonType) ApiUpdateReasonTypeRequest {
	r.reasonType = &reasonType
	return r
}

func (r ApiUpdateReasonTypeRequest) Execute() (*ReasonType, *http.Response, error) {
	return r.ApiService.UpdateReasonTypeExecute(r)
}

/*
UpdateReasonType Method for UpdateReasonType

Update ReasonType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of reasontype
 @return ApiUpdateReasonTypeRequest
*/
func (a *ReasonTypeV1alpha1APIService) UpdateReasonType(ctx context.Context, name string) ApiUpdateReasonTypeRequest {
	return ApiUpdateReasonTypeRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return ReasonType
func (a *ReasonTypeV1alpha1APIService) UpdateReasonTypeExecute(r ApiUpdateReasonTypeRequest) (*ReasonType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReasonType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReasonTypeV1alpha1APIService.UpdateReasonType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/notification.halo.run/v1alpha1/reasontypes/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.reasonType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
