/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type PolicyTemplateV1alpha1API interface {

	/*
	CreatePolicyTemplate Method for CreatePolicyTemplate

	Create PolicyTemplate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreatePolicyTemplateRequest
	*/
	CreatePolicyTemplate(ctx context.Context) ApiCreatePolicyTemplateRequest

	// CreatePolicyTemplateExecute executes the request
	//  @return PolicyTemplate
	CreatePolicyTemplateExecute(r ApiCreatePolicyTemplateRequest) (*PolicyTemplate, *http.Response, error)

	/*
	DeletePolicyTemplate Method for DeletePolicyTemplate

	Delete PolicyTemplate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of policytemplate
	@return ApiDeletePolicyTemplateRequest
	*/
	DeletePolicyTemplate(ctx context.Context, name string) ApiDeletePolicyTemplateRequest

	// DeletePolicyTemplateExecute executes the request
	DeletePolicyTemplateExecute(r ApiDeletePolicyTemplateRequest) (*http.Response, error)

	/*
	GetPolicyTemplate Method for GetPolicyTemplate

	Get PolicyTemplate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of policytemplate
	@return ApiGetPolicyTemplateRequest
	*/
	GetPolicyTemplate(ctx context.Context, name string) ApiGetPolicyTemplateRequest

	// GetPolicyTemplateExecute executes the request
	//  @return PolicyTemplate
	GetPolicyTemplateExecute(r ApiGetPolicyTemplateRequest) (*PolicyTemplate, *http.Response, error)

	/*
	ListPolicyTemplate Method for ListPolicyTemplate

	List PolicyTemplate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListPolicyTemplateRequest
	*/
	ListPolicyTemplate(ctx context.Context) ApiListPolicyTemplateRequest

	// ListPolicyTemplateExecute executes the request
	//  @return PolicyTemplateList
	ListPolicyTemplateExecute(r ApiListPolicyTemplateRequest) (*PolicyTemplateList, *http.Response, error)

	/*
	PatchPolicyTemplate Method for PatchPolicyTemplate

	Patch PolicyTemplate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of policytemplate
	@return ApiPatchPolicyTemplateRequest
	*/
	PatchPolicyTemplate(ctx context.Context, name string) ApiPatchPolicyTemplateRequest

	// PatchPolicyTemplateExecute executes the request
	//  @return PolicyTemplate
	PatchPolicyTemplateExecute(r ApiPatchPolicyTemplateRequest) (*PolicyTemplate, *http.Response, error)

	/*
	UpdatePolicyTemplate Method for UpdatePolicyTemplate

	Update PolicyTemplate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of policytemplate
	@return ApiUpdatePolicyTemplateRequest
	*/
	UpdatePolicyTemplate(ctx context.Context, name string) ApiUpdatePolicyTemplateRequest

	// UpdatePolicyTemplateExecute executes the request
	//  @return PolicyTemplate
	UpdatePolicyTemplateExecute(r ApiUpdatePolicyTemplateRequest) (*PolicyTemplate, *http.Response, error)
}

// PolicyTemplateV1alpha1APIService PolicyTemplateV1alpha1API service
type PolicyTemplateV1alpha1APIService service

type ApiCreatePolicyTemplateRequest struct {
	ctx context.Context
	ApiService PolicyTemplateV1alpha1API
	policyTemplate *PolicyTemplate
}

// Fresh policytemplate
func (r ApiCreatePolicyTemplateRequest) PolicyTemplate(policyTemplate PolicyTemplate) ApiCreatePolicyTemplateRequest {
	r.policyTemplate = &policyTemplate
	return r
}

func (r ApiCreatePolicyTemplateRequest) Execute() (*PolicyTemplate, *http.Response, error) {
	return r.ApiService.CreatePolicyTemplateExecute(r)
}

/*
CreatePolicyTemplate Method for CreatePolicyTemplate

Create PolicyTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreatePolicyTemplateRequest
*/
func (a *PolicyTemplateV1alpha1APIService) CreatePolicyTemplate(ctx context.Context) ApiCreatePolicyTemplateRequest {
	return ApiCreatePolicyTemplateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PolicyTemplate
func (a *PolicyTemplateV1alpha1APIService) CreatePolicyTemplateExecute(r ApiCreatePolicyTemplateRequest) (*PolicyTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PolicyTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PolicyTemplateV1alpha1APIService.CreatePolicyTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/storage.halo.run/v1alpha1/policytemplates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.policyTemplate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeletePolicyTemplateRequest struct {
	ctx context.Context
	ApiService PolicyTemplateV1alpha1API
	name string
}

func (r ApiDeletePolicyTemplateRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeletePolicyTemplateExecute(r)
}

/*
DeletePolicyTemplate Method for DeletePolicyTemplate

Delete PolicyTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of policytemplate
 @return ApiDeletePolicyTemplateRequest
*/
func (a *PolicyTemplateV1alpha1APIService) DeletePolicyTemplate(ctx context.Context, name string) ApiDeletePolicyTemplateRequest {
	return ApiDeletePolicyTemplateRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
func (a *PolicyTemplateV1alpha1APIService) DeletePolicyTemplateExecute(r ApiDeletePolicyTemplateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PolicyTemplateV1alpha1APIService.DeletePolicyTemplate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/storage.halo.run/v1alpha1/policytemplates/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetPolicyTemplateRequest struct {
	ctx context.Context
	ApiService PolicyTemplateV1alpha1API
	name string
}

func (r ApiGetPolicyTemplateRequest) Execute() (*PolicyTemplate, *http.Response, error) {
	return r.ApiService.GetPolicyTemplateExecute(r)
}

/*
GetPolicyTemplate Method for GetPolicyTemplate

Get PolicyTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of policytemplate
 @return ApiGetPolicyTemplateRequest
*/
func (a *PolicyTemplateV1alpha1APIService) GetPolicyTemplate(ctx context.Context, name string) ApiGetPolicyTemplateRequest {
	return ApiGetPolicyTemplateRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return PolicyTemplate
func (a *PolicyTemplateV1alpha1APIService) GetPolicyTemplateExecute(r ApiGetPolicyTemplateRequest) (*PolicyTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PolicyTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PolicyTemplateV1alpha1APIService.GetPolicyTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/storage.halo.run/v1alpha1/policytemplates/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListPolicyTemplateRequest struct {
	ctx context.Context
	ApiService PolicyTemplateV1alpha1API
	page *int32
	size *int32
	labelSelector *[]string
	fieldSelector *[]string
	sort *[]string
}

// Page number. Default is 0.
func (r ApiListPolicyTemplateRequest) Page(page int32) ApiListPolicyTemplateRequest {
	r.page = &page
	return r
}

// Size number. Default is 0.
func (r ApiListPolicyTemplateRequest) Size(size int32) ApiListPolicyTemplateRequest {
	r.size = &size
	return r
}

// Label selector. e.g.: hidden!&#x3D;true
func (r ApiListPolicyTemplateRequest) LabelSelector(labelSelector []string) ApiListPolicyTemplateRequest {
	r.labelSelector = &labelSelector
	return r
}

// Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
func (r ApiListPolicyTemplateRequest) FieldSelector(fieldSelector []string) ApiListPolicyTemplateRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListPolicyTemplateRequest) Sort(sort []string) ApiListPolicyTemplateRequest {
	r.sort = &sort
	return r
}

func (r ApiListPolicyTemplateRequest) Execute() (*PolicyTemplateList, *http.Response, error) {
	return r.ApiService.ListPolicyTemplateExecute(r)
}

/*
ListPolicyTemplate Method for ListPolicyTemplate

List PolicyTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListPolicyTemplateRequest
*/
func (a *PolicyTemplateV1alpha1APIService) ListPolicyTemplate(ctx context.Context) ApiListPolicyTemplateRequest {
	return ApiListPolicyTemplateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PolicyTemplateList
func (a *PolicyTemplateV1alpha1APIService) ListPolicyTemplateExecute(r ApiListPolicyTemplateRequest) (*PolicyTemplateList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PolicyTemplateList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PolicyTemplateV1alpha1APIService.ListPolicyTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/storage.halo.run/v1alpha1/policytemplates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.labelSelector != nil {
		t := *r.labelSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", t, "form", "multi")
		}
	}
	if r.fieldSelector != nil {
		t := *r.fieldSelector
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", t, "form", "multi")
		}
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchPolicyTemplateRequest struct {
	ctx context.Context
	ApiService PolicyTemplateV1alpha1API
	name string
	jsonPatchInner *[]JsonPatchInner
}

func (r ApiPatchPolicyTemplateRequest) JsonPatchInner(jsonPatchInner []JsonPatchInner) ApiPatchPolicyTemplateRequest {
	r.jsonPatchInner = &jsonPatchInner
	return r
}

func (r ApiPatchPolicyTemplateRequest) Execute() (*PolicyTemplate, *http.Response, error) {
	return r.ApiService.PatchPolicyTemplateExecute(r)
}

/*
PatchPolicyTemplate Method for PatchPolicyTemplate

Patch PolicyTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of policytemplate
 @return ApiPatchPolicyTemplateRequest
*/
func (a *PolicyTemplateV1alpha1APIService) PatchPolicyTemplate(ctx context.Context, name string) ApiPatchPolicyTemplateRequest {
	return ApiPatchPolicyTemplateRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return PolicyTemplate
func (a *PolicyTemplateV1alpha1APIService) PatchPolicyTemplateExecute(r ApiPatchPolicyTemplateRequest) (*PolicyTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PolicyTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PolicyTemplateV1alpha1APIService.PatchPolicyTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/storage.halo.run/v1alpha1/policytemplates/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jsonPatchInner
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdatePolicyTemplateRequest struct {
	ctx context.Context
	ApiService PolicyTemplateV1alpha1API
	name string
	policyTemplate *PolicyTemplate
}

// Updated policytemplate
func (r ApiUpdatePolicyTemplateRequest) PolicyTemplate(policyTemplate PolicyTemplate) ApiUpdatePolicyTemplateRequest {
	r.policyTemplate = &policyTemplate
	return r
}

func (r ApiUpdatePolicyTemplateRequest) Execute() (*PolicyTemplate, *http.Response, error) {
	return r.ApiService.UpdatePolicyTemplateExecute(r)
}

/*
UpdatePolicyTemplate Method for UpdatePolicyTemplate

Update PolicyTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of policytemplate
 @return ApiUpdatePolicyTemplateRequest
*/
func (a *PolicyTemplateV1alpha1APIService) UpdatePolicyTemplate(ctx context.Context, name string) ApiUpdatePolicyTemplateRequest {
	return ApiUpdatePolicyTemplateRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return PolicyTemplate
func (a *PolicyTemplateV1alpha1APIService) UpdatePolicyTemplateExecute(r ApiUpdatePolicyTemplateRequest) (*PolicyTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PolicyTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PolicyTemplateV1alpha1APIService.UpdatePolicyTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/storage.halo.run/v1alpha1/policytemplates/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.policyTemplate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
