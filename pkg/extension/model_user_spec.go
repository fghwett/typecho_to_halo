/*
Halo

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.20.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package extension_sdk

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the UserSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSpec{}

// UserSpec struct for UserSpec
type UserSpec struct {
	Avatar *string `json:"avatar,omitempty"`
	Bio *string `json:"bio,omitempty"`
	Disabled *bool `json:"disabled,omitempty"`
	DisplayName string `json:"displayName"`
	Email string `json:"email"`
	EmailVerified *bool `json:"emailVerified,omitempty"`
	LoginHistoryLimit *int32 `json:"loginHistoryLimit,omitempty"`
	Password *string `json:"password,omitempty"`
	Phone *string `json:"phone,omitempty"`
	RegisteredAt *time.Time `json:"registeredAt,omitempty"`
	TotpEncryptedSecret *string `json:"totpEncryptedSecret,omitempty"`
	TwoFactorAuthEnabled *bool `json:"twoFactorAuthEnabled,omitempty"`
}

type _UserSpec UserSpec

// NewUserSpec instantiates a new UserSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSpec(displayName string, email string) *UserSpec {
	this := UserSpec{}
	this.DisplayName = displayName
	this.Email = email
	return &this
}

// NewUserSpecWithDefaults instantiates a new UserSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSpecWithDefaults() *UserSpec {
	this := UserSpec{}
	return &this
}

// GetAvatar returns the Avatar field value if set, zero value otherwise.
func (o *UserSpec) GetAvatar() string {
	if o == nil || IsNil(o.Avatar) {
		var ret string
		return ret
	}
	return *o.Avatar
}

// GetAvatarOk returns a tuple with the Avatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSpec) GetAvatarOk() (*string, bool) {
	if o == nil || IsNil(o.Avatar) {
		return nil, false
	}
	return o.Avatar, true
}

// HasAvatar returns a boolean if a field has been set.
func (o *UserSpec) HasAvatar() bool {
	if o != nil && !IsNil(o.Avatar) {
		return true
	}

	return false
}

// SetAvatar gets a reference to the given string and assigns it to the Avatar field.
func (o *UserSpec) SetAvatar(v string) {
	o.Avatar = &v
}

// GetBio returns the Bio field value if set, zero value otherwise.
func (o *UserSpec) GetBio() string {
	if o == nil || IsNil(o.Bio) {
		var ret string
		return ret
	}
	return *o.Bio
}

// GetBioOk returns a tuple with the Bio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSpec) GetBioOk() (*string, bool) {
	if o == nil || IsNil(o.Bio) {
		return nil, false
	}
	return o.Bio, true
}

// HasBio returns a boolean if a field has been set.
func (o *UserSpec) HasBio() bool {
	if o != nil && !IsNil(o.Bio) {
		return true
	}

	return false
}

// SetBio gets a reference to the given string and assigns it to the Bio field.
func (o *UserSpec) SetBio(v string) {
	o.Bio = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *UserSpec) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSpec) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *UserSpec) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *UserSpec) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetDisplayName returns the DisplayName field value
func (o *UserSpec) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *UserSpec) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *UserSpec) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetEmail returns the Email field value
func (o *UserSpec) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *UserSpec) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *UserSpec) SetEmail(v string) {
	o.Email = v
}

// GetEmailVerified returns the EmailVerified field value if set, zero value otherwise.
func (o *UserSpec) GetEmailVerified() bool {
	if o == nil || IsNil(o.EmailVerified) {
		var ret bool
		return ret
	}
	return *o.EmailVerified
}

// GetEmailVerifiedOk returns a tuple with the EmailVerified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSpec) GetEmailVerifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.EmailVerified) {
		return nil, false
	}
	return o.EmailVerified, true
}

// HasEmailVerified returns a boolean if a field has been set.
func (o *UserSpec) HasEmailVerified() bool {
	if o != nil && !IsNil(o.EmailVerified) {
		return true
	}

	return false
}

// SetEmailVerified gets a reference to the given bool and assigns it to the EmailVerified field.
func (o *UserSpec) SetEmailVerified(v bool) {
	o.EmailVerified = &v
}

// GetLoginHistoryLimit returns the LoginHistoryLimit field value if set, zero value otherwise.
func (o *UserSpec) GetLoginHistoryLimit() int32 {
	if o == nil || IsNil(o.LoginHistoryLimit) {
		var ret int32
		return ret
	}
	return *o.LoginHistoryLimit
}

// GetLoginHistoryLimitOk returns a tuple with the LoginHistoryLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSpec) GetLoginHistoryLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.LoginHistoryLimit) {
		return nil, false
	}
	return o.LoginHistoryLimit, true
}

// HasLoginHistoryLimit returns a boolean if a field has been set.
func (o *UserSpec) HasLoginHistoryLimit() bool {
	if o != nil && !IsNil(o.LoginHistoryLimit) {
		return true
	}

	return false
}

// SetLoginHistoryLimit gets a reference to the given int32 and assigns it to the LoginHistoryLimit field.
func (o *UserSpec) SetLoginHistoryLimit(v int32) {
	o.LoginHistoryLimit = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UserSpec) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSpec) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *UserSpec) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UserSpec) SetPassword(v string) {
	o.Password = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *UserSpec) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSpec) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *UserSpec) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *UserSpec) SetPhone(v string) {
	o.Phone = &v
}

// GetRegisteredAt returns the RegisteredAt field value if set, zero value otherwise.
func (o *UserSpec) GetRegisteredAt() time.Time {
	if o == nil || IsNil(o.RegisteredAt) {
		var ret time.Time
		return ret
	}
	return *o.RegisteredAt
}

// GetRegisteredAtOk returns a tuple with the RegisteredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSpec) GetRegisteredAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RegisteredAt) {
		return nil, false
	}
	return o.RegisteredAt, true
}

// HasRegisteredAt returns a boolean if a field has been set.
func (o *UserSpec) HasRegisteredAt() bool {
	if o != nil && !IsNil(o.RegisteredAt) {
		return true
	}

	return false
}

// SetRegisteredAt gets a reference to the given time.Time and assigns it to the RegisteredAt field.
func (o *UserSpec) SetRegisteredAt(v time.Time) {
	o.RegisteredAt = &v
}

// GetTotpEncryptedSecret returns the TotpEncryptedSecret field value if set, zero value otherwise.
func (o *UserSpec) GetTotpEncryptedSecret() string {
	if o == nil || IsNil(o.TotpEncryptedSecret) {
		var ret string
		return ret
	}
	return *o.TotpEncryptedSecret
}

// GetTotpEncryptedSecretOk returns a tuple with the TotpEncryptedSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSpec) GetTotpEncryptedSecretOk() (*string, bool) {
	if o == nil || IsNil(o.TotpEncryptedSecret) {
		return nil, false
	}
	return o.TotpEncryptedSecret, true
}

// HasTotpEncryptedSecret returns a boolean if a field has been set.
func (o *UserSpec) HasTotpEncryptedSecret() bool {
	if o != nil && !IsNil(o.TotpEncryptedSecret) {
		return true
	}

	return false
}

// SetTotpEncryptedSecret gets a reference to the given string and assigns it to the TotpEncryptedSecret field.
func (o *UserSpec) SetTotpEncryptedSecret(v string) {
	o.TotpEncryptedSecret = &v
}

// GetTwoFactorAuthEnabled returns the TwoFactorAuthEnabled field value if set, zero value otherwise.
func (o *UserSpec) GetTwoFactorAuthEnabled() bool {
	if o == nil || IsNil(o.TwoFactorAuthEnabled) {
		var ret bool
		return ret
	}
	return *o.TwoFactorAuthEnabled
}

// GetTwoFactorAuthEnabledOk returns a tuple with the TwoFactorAuthEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSpec) GetTwoFactorAuthEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.TwoFactorAuthEnabled) {
		return nil, false
	}
	return o.TwoFactorAuthEnabled, true
}

// HasTwoFactorAuthEnabled returns a boolean if a field has been set.
func (o *UserSpec) HasTwoFactorAuthEnabled() bool {
	if o != nil && !IsNil(o.TwoFactorAuthEnabled) {
		return true
	}

	return false
}

// SetTwoFactorAuthEnabled gets a reference to the given bool and assigns it to the TwoFactorAuthEnabled field.
func (o *UserSpec) SetTwoFactorAuthEnabled(v bool) {
	o.TwoFactorAuthEnabled = &v
}

func (o UserSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Avatar) {
		toSerialize["avatar"] = o.Avatar
	}
	if !IsNil(o.Bio) {
		toSerialize["bio"] = o.Bio
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	toSerialize["displayName"] = o.DisplayName
	toSerialize["email"] = o.Email
	if !IsNil(o.EmailVerified) {
		toSerialize["emailVerified"] = o.EmailVerified
	}
	if !IsNil(o.LoginHistoryLimit) {
		toSerialize["loginHistoryLimit"] = o.LoginHistoryLimit
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	if !IsNil(o.RegisteredAt) {
		toSerialize["registeredAt"] = o.RegisteredAt
	}
	if !IsNil(o.TotpEncryptedSecret) {
		toSerialize["totpEncryptedSecret"] = o.TotpEncryptedSecret
	}
	if !IsNil(o.TwoFactorAuthEnabled) {
		toSerialize["twoFactorAuthEnabled"] = o.TwoFactorAuthEnabled
	}
	return toSerialize, nil
}

func (o *UserSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"displayName",
		"email",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserSpec := _UserSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserSpec)

	if err != nil {
		return err
	}

	*o = UserSpec(varUserSpec)

	return err
}

type NullableUserSpec struct {
	value *UserSpec
	isSet bool
}

func (v NullableUserSpec) Get() *UserSpec {
	return v.value
}

func (v *NullableUserSpec) Set(val *UserSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSpec(val *UserSpec) *NullableUserSpec {
	return &NullableUserSpec{value: val, isSet: true}
}

func (v NullableUserSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


